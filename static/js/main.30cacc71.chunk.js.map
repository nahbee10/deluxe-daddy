{"version":3,"sources":["components/Placenta.js","components/PlacentaNew.js","App.js","serviceWorker.js","index.js"],"names":["generatedCubeRenderTarget","ldrCubeRenderTarget","hdrCubeRenderTarget","rgbmCubeRenderTarget","style","height","params","Placenta","getEnvScene","envScene","THREE","geometry","deleteAttribute","roomMaterial","metalness","side","room","scale","setScalar","add","mainLight","lightMaterial","color","emissive","emissiveIntensity","light1","material","setHex","position","set","light2","clone","light3","sceneSetup","width","el","clientWidth","console","log","scene","background","camera","renderer","physicallyCorrectLights","myThis","flatShading","loadModel","undefined","object","traverse","child","addCustomSceneObjects","requestID","window","requestAnimationFrame","startAnimationLoop","manager","onProgress","item","loaded","total","textureLoader","texture","load","xhr","lengthComputable","percentComplete","Math","round","onError","loader","OBJLoader","obj","setPixelRatio","devicePixelRatio","setSize","innerWidth","outputEncoding","stats","Stats","appendChild","domElement","onDocumentMouseMove","event","children","a","fromBufferGeometry","mergeVertices","fromGeometry","geometry2","group","group2","roughness","torusMesh","x","y","z","torusMesh2","rotation","PI","Nodes","torusMeshNode","torusMeshNode2","planeMesh","a2","material_","geometry_","geometry2_","group_","group2_","torusMesh_","torusMesh2_","torusMeshNode_","torusMeshNode2_","planeMesh_","a3","material__","geometry__","geometry2__","group__","group2__","torusMesh__","torusMesh2__","torusMeshNode__","torusMeshNode2__","planeMesh__","onLoad","pmremGenerator","dispose","hdrCubeMap","HDRCubeTextureLoader","setPath","setDataType","fromCubemap","magFilter","needsUpdate","ldrCubeMap","encoding","rgbmCubeMap","format","compileCubemapShader","fromScene","renderTarget","cubeMap","begin","visible","newEnvMap","envMap","map","toneMappingExposure","render","end","handleWindowResize","clientHeight","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","controls","ref","Component","counter","frame","clock","library","vertexColors","wireframe","opacity","transparent","textures","brick","url","grass","grassNormal","decalDiffuse","decalNormal","cloud","spherical","App","createClass","id","className","margin","Switch","Route","exact","path","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30cacc71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AsciiEffect } from 'three/examples/jsm/effects/AsciiEffect.js';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nvar angle = 0;\nvar radiusL = 32;\nvar radiusS = 14; \n\nconst style = {\n  height: 5400 // we can control scene size by setting container dimensions\n};\n\nvar params = {\n\tenvMap: 'HDR',\n\troughness: 0.0,\n\tmetalness: 0.0,\n\texposure: 1.0,\n\tnodes: true,\n\tanimate: true,\n\tdebug: false\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar torusMesh, planeMesh;\nvar generatedCubeRenderTarget, ldrCubeRenderTarget, hdrCubeRenderTarget, rgbmCubeRenderTarget;\nvar ldrCubeMap, hdrCubeMap, rgbmCubeMap;\n\nclass Placenta extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    \n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  getEnvScene = () => {\n\n\t\tvar envScene = new THREE.Scene();\n\n\t\tvar geometry = new THREE.BoxBufferGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\n\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\n\t\troom.scale.setScalar( 10 );\n\t\tenvScene.add( room );\n\n\t\tvar mainLight = new THREE.PointLight( 0xffffff, 50, 0, 2 );\n\t\tenvScene.add( mainLight );\n\n\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\n\n\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\n\t\tlight1.material.color.setHex( 0xff0000 );\n\t\tlight1.position.set( - 5, 2, 0 );\n\t\tlight1.scale.set( 0.1, 1, 1 );\n\t\tenvScene.add( light1 );\n\n\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight2.material.color.setHex( 0x00ff00 );\n\t\tlight2.position.set( 0, 5, 0 );\n\t\tlight2.scale.set( 1, 0.1, 1 );\n\t\tenvScene.add( light2 );\n\n\t\tvar light3 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight3.material.color.setHex( 0x0000ff );\n\t\tlight3.position.set( 2, 1, 5 );\n\t\tlight3.scale.set( 1.5, 2, 0.1 );\n\t\tenvScene.add( light3 );\n\n\t\treturn envScene;\n\n\t}\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = 5400;\n    console.log(\"height\",height);\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0,0,0);\n    this.camera = new THREE.PerspectiveCamera(\n      40, // fov = field of view\n      width / height, // aspect ratio\n      1, // near plane\n      1000 // far plane\n    );\n    // this.camera.position.y = 150;\n    this.camera.position.set( 0, 0, 390 );\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n\n    var object;\n    var myThis = this;\n    var ship_material = new THREE.MeshPhongMaterial( { flatShading: true }  );\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n\n              // if ( child.isMesh ) child.material = ship_material;\n\n            } );\n\n            // myThis.object.position.z = -1000;\n            // myThis.object.scale.x = 80;\n            // myThis.object.scale.y = 80;\n            // myThis.object.scale.z = 80;\n            // myThis.scene.add( myThis.object );\n            // myThis.subdivide( geometry, 3 );\n            myThis.addCustomSceneObjects();\n            myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n    var textureLoader = new THREE.TextureLoader( this.manager );\n\n    this.texture = textureLoader.load( 'UterusWhole.jpg' );\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'placenta12.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, 5400 );\n\t// container.appendChild( renderer.domElement );\n\n\t//renderer.toneMapping = ReinhardToneMapping;\n\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\tthis.stats = new Stats();\n\t// container.appendChild( stats.dom );\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    // document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n  onDocumentMouseMove = ( event ) => {\n\n    // var windowHalfX = window.innerWidth / 2;\n    // var windowHalfY = window.innerHeight / 2;\n    // var myThis2 = this;\n    //     myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n    //     myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n      }\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n  \tconsole.log(\"this.object.children[1].geometry\",this.object.children[1].geometry);\n\n\tvar a = new THREE.Geometry().fromBufferGeometry( this.object.children[1].geometry );\n\ta.mergeVertices();\n\tthis.object.children[1].geometry.fromGeometry( a );\n\n\n  \tvar geometry = this.object.children[1].geometry;\n\tvar geometry2 = this.object.children[1].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group = new THREE.Group();\n\tthis.group2 = new THREE.Group();\n\n\tvar material;\n\n\tmaterial = new THREE.MeshStandardMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\tmaterial.flatShading = false;\n\n\tthis.torusMesh = new THREE.Mesh( geometry, material );\n\tthis.torusMesh.scale.x = 10;\n\tthis.torusMesh.scale.y = 10;\n\tthis.torusMesh.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMesh2.rotation.z = Math.PI;\n\tthis.torusMesh2.scale.x = 10;\n\tthis.torusMesh2.scale.y = 10;\n\tthis.torusMesh2.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group.add( this.torusMesh );\n\tthis.group2.add( this.torusMesh2 );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial = new Nodes.MeshStandardNodeMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\n\tthis.torusMeshNode = new THREE.Mesh( geometry, material );\n\tthis.torusMeshNode.scale.x = 10;\n\tthis.torusMeshNode.scale.y = 10;\n\tthis.torusMeshNode.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMeshNode2.rotation.z = Math.PI;\n\tthis.torusMeshNode2.scale.x = 10;\n\tthis.torusMeshNode2.scale.y = 10;\n\tthis.torusMeshNode2.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2.add(this.torusMeshNode2);\n\tthis.group.add(this.torusMeshNode);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh = new THREE.Mesh( geometry, material );\n\tthis.planeMesh.position.y = - 50;\n\tthis.planeMesh.rotation.x = - Math.PI * 0.5;\n\tthis.group.add(this.planeMesh);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2);\n\n\n\n\tvar a2 = new THREE.Geometry().fromBufferGeometry( this.object.children[2].geometry );\n\ta2.mergeVertices();\n\tthis.object.children[2].geometry.fromGeometry( a2 );\n\n\tconsole.log(this.object.children[2].geometry);\n\n  \tvar geometry_ = this.object.children[2].geometry;\n\tvar geometry2_ = this.object.children[2].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group_ = new THREE.Group();\n\tthis.group2_ = new THREE.Group();\n\n\tvar material_;\n\n\tmaterial_ = new THREE.MeshStandardMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\tmaterial_.flatShading = false;\n\n\tthis.torusMesh_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMesh_.scale.x = 10;\n\tthis.torusMesh_.scale.y = 10;\n\tthis.torusMesh_.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMesh2_.rotation.z = Math.PI;\n\tthis.torusMesh2_.scale.x = 10;\n\tthis.torusMesh2_.scale.y = 10;\n\tthis.torusMesh2_.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group_.add( this.torusMesh_ );\n\tthis.group2_.add( this.torusMesh2_ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial_ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\n\tthis.torusMeshNode_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMeshNode_.scale.x = 10;\n\tthis.torusMeshNode_.scale.y = 10;\n\tthis.torusMeshNode_.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMeshNode2_.rotation.z = Math.PI;\n\tthis.torusMeshNode2_.scale.x = 10;\n\tthis.torusMeshNode2_.scale.y = 10;\n\tthis.torusMeshNode2_.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2_.add(this.torusMeshNode2_);\n\tthis.group_.add(this.torusMeshNode_);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh_ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh_.position.y = - 50;\n\tthis.planeMesh_.rotation.x = - Math.PI * 0.5;\n\tthis.group_.add(this.planeMesh_);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2_);\n\n\tvar a3 = new THREE.Geometry().fromBufferGeometry( this.object.children[0].geometry );\n\ta3.mergeVertices();\n\tthis.object.children[0].geometry.fromGeometry( a3 );\n\n\tconsole.log(this.object.children[0].geometry);\n\n  \tvar geometry__ = this.object.children[0].geometry;\n\tvar geometry2__ = this.object.children[0].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group__ = new THREE.Group();\n\tthis.group2__ = new THREE.Group();\n\n\tvar material__;\n\n\tmaterial__ = new THREE.MeshStandardMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\tmaterial__.flatShading = false;\n\n\tthis.torusMesh__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMesh__.scale.x = 10;\n\tthis.torusMesh__.scale.y = 10;\n\tthis.torusMesh__.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMesh2__.rotation.z = Math.PI;\n\tthis.torusMesh2__.scale.x = 10;\n\tthis.torusMesh2__.scale.y = 10;\n\tthis.torusMesh2__.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group__.add( this.torusMesh__ );\n\tthis.group2__.add( this.torusMesh2__ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial__ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\n\tthis.torusMeshNode__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMeshNode__.scale.x = 10;\n\tthis.torusMeshNode__.scale.y = 10;\n\tthis.torusMeshNode__.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMeshNode2__.rotation.z = Math.PI;\n\tthis.torusMeshNode2__.scale.x = 10;\n\tthis.torusMeshNode2__.scale.y = 10;\n\tthis.torusMeshNode2__.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\tthis.group.position.y = 90;\n\tthis.group2.position.y = 90;\n\tthis.group_.position.y = 90;\n\tthis.group2_.position.y = 90;\n\tthis.group__.position.y = 90;\n\tthis.group2__.position.y = 90;\n\tthis.group2__.add(this.torusMeshNode2__);\n\tthis.group__.add(this.torusMeshNode__);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh__ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh__.position.y = - 50;\n\tthis.planeMesh__.rotation.x = - Math.PI * 0.5;\n\tthis.group__.add(this.planeMesh__);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2__);\n\n\n\n  \tTHREE.DefaultLoadingManager.onLoad = function ( ) {\n\n\t\tpmremGenerator.dispose();\n\n\t};\n\n\tvar hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ];\n\tvar myThis = this;\n\tthis.hdrCubeMap = new HDRCubeTextureLoader()\n\t\t.setPath( 'textures/cube/pp_cube_map/' )\n\t\t.setDataType( THREE.UnsignedByteType )\n\t\t.load( hdrUrls, function () {\n\t\t\thdrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.hdrCubeMap );\n\n\t\t\tmyThis.hdrCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.hdrCubeMap.needsUpdate = true;\n\n\t\t} );\n\n\tvar ldrUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.ldrCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisa/' )\n\t\t.load( ldrUrls, function () {\n\n\t\t\tmyThis.ldrCubeMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tldrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.ldrCubeMap );\n\n\t\t} );\n\n\n\tvar rgbmUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.rgbmCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisaRGBM16/' )\n\t\t.load( rgbmUrls, function () {\n\n\t\t\tmyThis.rgbmCubeMap.encoding = THREE.RGBM16Encoding;\n\t\t\tmyThis.rgbmCubeMap.format = THREE.RGBAFormat;\n\n\t\t\trgbmCubeRenderTarget = pmremGenerator.fromCubemap( myThis.rgbmCubeMap );\n\n\t\t\tmyThis.rgbmCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.rgbmCubeMap.needsUpdate = true;\n\n\t\t} );\n\tvar pmremGenerator = new THREE.PMREMGenerator( this.renderer );\n\tpmremGenerator.compileCubemapShader();\n\n\tvar envScene = this.getEnvScene();\n\tgeneratedCubeRenderTarget = pmremGenerator.fromScene( envScene, 0.04 );\n\n\t\n    \n  };\n\n  startAnimationLoop = () => {\n  \t\n \t// \n  \t\t\n  \t\tif (this.object != undefined){\n  \t\tthis.stats.begin();\n\t  \tthis.torusMesh.visible = ! params.nodes;\n\t\tthis.torusMeshNode.visible = params.nodes;\n\n\t\tthis.torusMesh.material.roughness = params.roughness;\n\t\tthis.torusMesh.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode.material.roughness = params.roughness;\n\t\tthis.torusMeshNode.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2.visible = ! params.nodes;\n\t\tthis.torusMeshNode2.visible = params.nodes;\n\n\t\tthis.torusMesh2.material.roughness = params.roughness;\n\t\tthis.torusMesh2.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2.material.metalness = params.metalness;\n\n\t\tthis.torusMesh_.visible = ! params.nodes;\n\t\tthis.torusMeshNode_.visible = params.nodes;\n\n\t\tthis.torusMesh_.material.roughness = params.roughness;\n\t\tthis.torusMesh_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2_.visible = ! params.nodes;\n\t\tthis.torusMeshNode2_.visible = params.nodes;\n\n\t\tthis.torusMesh2_.material.roughness = params.roughness;\n\t\tthis.torusMesh2_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh__.visible = ! params.nodes;\n\t\tthis.torusMeshNode__.visible = params.nodes;\n\n\t\tthis.torusMesh__.material.roughness = params.roughness;\n\t\tthis.torusMesh__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode__.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2__.visible = ! params.nodes;\n\t\tthis.torusMeshNode2__.visible = params.nodes;\n\n\t\tthis.torusMesh2__.material.roughness = params.roughness;\n\t\tthis.torusMesh2__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2__.material.metalness = params.metalness;\n\n\t\tvar renderTarget, cubeMap;\n\n\t\tswitch ( params.envMap ) {\n\n\t\t\tcase 'Generated':\n\t\t\t\trenderTarget = generatedCubeRenderTarget;\n\t\t\t\tcubeMap = generatedCubeRenderTarget.texture;\n\t\t\t\tbreak;\n\t\t\tcase 'LDR':\n\t\t\t\trenderTarget = ldrCubeRenderTarget;\n\t\t\t\tcubeMap = ldrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'HDR':\n\t\t\t\trenderTarget = hdrCubeRenderTarget;\n\t\t\t\tcubeMap = hdrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'RGBM16':\n\t\t\t\trenderTarget = rgbmCubeRenderTarget;\n\t\t\t\tcubeMap = rgbmCubeMap;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar newEnvMap = renderTarget ? renderTarget.texture : null;\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh.material.envMap ) {\n\n\t\t\tthis.torusMesh.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh.material.map = newEnvMap;\n\t\t\tthis.planeMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode.rotation.y = this.torusMesh.rotation.y;\n\n\t\t\tthis.torusMesh2.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2.rotation.y = this.torusMesh2.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh_.material.envMap ) {\n\n\t\t\tthis.torusMesh_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode_.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh_.material.map = newEnvMap;\n\t\t\tthis.planeMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2_.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode_.rotation.y = this.torusMesh_.rotation.y;\n\n\t\t\tthis.torusMesh2_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2_.rotation.y = this.torusMesh2_.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh__.material.envMap ) {\n\n\t\t\tthis.torusMesh__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode__.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh__.material.map = newEnvMap;\n\t\t\tthis.planeMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2__.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode__.rotation.y = this.torusMesh__.rotation.y;\n\n\t\t\tthis.torusMesh2__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2__.rotation.y = this.torusMesh2__.rotation.y;\n\n\t\t}\n\n\t\tthis.planeMesh.visible = params.debug;\n\t\tthis.planeMesh_.visible = params.debug;\n\t\tthis.planeMesh__.visible = params.debug;\n\n\t\tif ((this.group != undefined) && (this.group2 != undefined)){\n\t      // this.camera.rotation.y += 0.1;\n\t      // this.group.position.y = radiusL * Math.cos( angle );  \n\t      // this.group.position.x = radiusL * Math.sin( angle );\n\t      // this.group.rotation.z = Math.PI - angle;\n\n\t      // this.group2.position.y = radiusS * Math.cos( angle );  \n\t      // this.group2.position.x = radiusS * Math.sin( angle );\n\t      // this.group2.rotation.z = Math.PI - angle;\n\t      // angle += 0.01;\n\t      // var xAdd = ( this.mouseX - this.camera.position.x ) * .05;\n\t      // var nahee = this.camera.position.x + xAdd;\n\t      // this.camera.position.x = nahee;\n\t      // this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * .05;\n\t    }\n    \tthis.camera.position.y = -20;\n    \t// this.camera.position.z = 0;\n\t\tthis.scene.background = cubeMap;\n\t\tthis.renderer.toneMappingExposure = params.exposure;\n\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\t    this.stats.end();\n\n\t}\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\n\nexport default Placenta;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { FresnelShader } from 'three/examples/jsm/shaders/FresnelShader.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport { NodeMaterialLoader, NodeMaterialLoaderUtils } from 'three/examples/jsm/loaders/NodeMaterialLoader.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport { Interaction } from 'three.interaction';\nimport { OutlineEffect } from 'three/examples/jsm/effects/OutlineEffect.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nconst style = {\n // height: 5000 // we can control scene size by setting container dimensions\n};\nvar counter = 0;\nconst frame = new Nodes.NodeFrame();\nconst clock = new THREE.Clock();\n\nvar container, stats;\nvar camera, scene, renderer;\nvar smoothMesh, wireframe;\n\n\nconst smoothMaterial = new THREE.MeshPhongMaterial( { color: 0x00ffff, flatShading: true, vertexColors: false } );\nconst wireframeMaterial = new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true, opacity: 0.15, transparent: true } );\n\n\nconst faceIndices = [ 'a', 'b', 'c' ];\n\n\nconst params = {\n\t\t\t\tsubdivisions: 2\n\t\t\t};\n\nconst library = {};\nconst textures = {\n\t\t\tbrick: { url: 'textures/brick_diffuse.jpg' },\n\t\t\tgrass: { url: 'textures/grasslight-big.jpg' },\n\t\t\tgrassNormal: { url: 'textures/grasslight-big-nm.jpg' },\n\t\t\tdecalDiffuse: { url: 'textures/decal-diffuse.png' },\n\t\t\tdecalNormal: { url: 'textures/decal/decal-normal.jpg' },\n\t\t\tcloud: { url: 'textures/cloud.png' },\n\t\t\tspherical: { url: 'textures/envmap.png' }\n\t\t};\n\n\nclass PlacentaNew extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t    this.state = {\n\t      cm:\"textures/cube/ux/\"\n\t    };\n\t}\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.handleWindowResize();\n    console.log(this.state.cm);\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.mesh = [];\n    this.scene = new THREE.Scene();\n    this.scene.background = this.cubemap(this.state.cm, \".png\");\n    // this.scene.background = new THREE.Color( 0x00ffff );\n //    this.camera = new THREE.PerspectiveCamera( 30, width / height, 1, 500 );\n\t// this.camera.position.z = 155;\n\n\tthis.camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );\n\tthis.camera.position.z = 3200;\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    const light = new THREE.PointLight( 0xffffff, 55 );\n\tlight.position.set( 1, 1, 2 );\n\t// this.scene.add( light );\n   \n    this.renderer = new THREE.WebGLRenderer();\n    // this.renderer.physicallyCorrectLights = true;\n    this.renderer.uuid = THREE.MathUtils.generateUUID(); // generate to library\n\t// this.renderer.outputEncoding = THREE.sRGBEncoding;\n\tthis.effect = new OutlineEffect( this.renderer );\n\n\tlibrary[ this.renderer.uuid ] = this.renderer;\n\tlibrary[ this.camera.uuid ] = this.camera;\n\n\tvar object;\n    var myThis = this;\n\n\tthis.rayCaster = new THREE.Raycaster();\n\n\tconst geometryB = new THREE.SphereBufferGeometry( 100, 32, 16 );\n\n\tconst shaderB = FresnelShader;\n\tconst uniformsB = THREE.UniformsUtils.clone( shaderB.uniforms );\n\n\tuniformsB[ \"tCube\" ].value = this.cubemap(this.state.cm, \".png\");\n\n\tconst materialB = new THREE.ShaderMaterial( {\n\t\tuniforms: uniformsB,\n\t\tvertexShader: shaderB.vertexShader,\n\t\tfragmentShader: shaderB.fragmentShader\n\t} );\n\n    var ship_material = new THREE.MeshPhongMaterial( { flatShading: true }  );\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n\n              if ( child.isMesh ) child.material = ship_material;\n              if(child.geometry !== undefined){ \n             const geometry2 = new THREE.Geometry().fromBufferGeometry( child.geometry );\n\t\t\tgeometry2.mergeVertices();\n\t\t\tconsole.log(\"geometry2\",geometry2);\n\n\t\t\t// const material2 = new THREE.MeshBasicMaterial( { color: 0xcccccc, wireframe: true } );\n\t\t\t// const mesh2 = new THREE.Mesh( child.geometry, materialB );\n\t\t\t// myThis.scene.add( mesh2 );\n\t\t\t// mesh2.scale.set(600, 600, 600); //for desktop\n\t\t\t// mesh2.position.set(0, 21, 0);\n\t\t\t// mesh2.on('click', myThis.goEvent);\n\n\t\t\tmyThis.subdivide( geometry2, 2 );\n\t\t\tcounter ++;\n\t\t\tmyThis.startAnimationLoop();\n              }\n\n\n            } );\n\n            // myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n    var textureLoader = new THREE.TextureLoader( this.manager );\n\n    this.texture = textureLoader.load( 'UterusWhole.jpg' );\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'placenta9.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n\n    \n\n\t\n\n\tthis.spheres = [];\n\n\tfor ( let i = 0; i < 145; i ++ ) {\n\n\t\tconst mesh = new THREE.Mesh( geometryB, materialB );\n\n\t\tmesh.position.x = Math.random() * 2500 - 5000;\n\t\tmesh.position.y = Math.random() * 2500 - 5000;\n\t\tmesh.position.z = Math.random() * 2500 - 5000;\n\n\t\tmesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 6 + 1;\n\n\t\tthis.scene.add( mesh );\n\n\t\tthis.spheres.push( mesh );\n\n\t}\n\t\t\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, window.innerHeight );\n\n\tthis.interaction = new Interaction(this.renderer, this.scene, this.camera);\n\n\tthis.stats = new Stats();\n\tthis.el.appendChild( this.stats.dom );\n\n\t//\n\n\tthis.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\tthis.controls.minDistance = 10;\n\tthis.controls.maxDistance = 400;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n    this.startAnimationLoop();\n  };\n\n  \tgoEvent = (ev) => {\n\t\tconsole.log(\"oh clicked\");\n\t\tthis.setState({\n\t      cm: \"textures/cube/Park2/\"\n\t    });\n\t    this.scene.background = this.cubemap(\"textures/cube/Park2/\", \".jpg\");\n\t    const shaderB = FresnelShader;\n\t\tconst uniformsB = THREE.UniformsUtils.clone( shaderB.uniforms );\n\n\t\tuniformsB[ \"tCube\" ].value = this.cubemap(\"textures/cube/Park2/\", \".jpg\");\n\n\t\tconst materialB = new THREE.ShaderMaterial( {\n\t\t\tuniforms: uniformsB,\n\t\t\tvertexShader: shaderB.vertexShader,\n\t\t\tfragmentShader: shaderB.fragmentShader\n\t\t} );\n\n\t    for ( let i = 0, il = this.spheres.length; i < il; i ++ ) {\n\n\t\t\tconst sphere = this.spheres[ i ];\n\n\t\t\tsphere.material = materialB;\n\n\t\t}\n\n\t}\n\n  onDocumentMouseMove = ( event ) => {\n\n    var windowHalfX = window.innerWidth / 2;\n    var windowHalfY = window.innerHeight / 2;\n    var myThis2 = this;\n\n        myThis2.mouseX = ( event.clientX - windowHalfX ) * 10;\n\t\tmyThis2.mouseY = ( event.clientY - windowHalfY ) * 10;\n      }\n\nsubdivide = ( geometry, subdivisions ) => {\n\n\t\tconst modifier = new SubdivisionModifier( 0 );\n\n\t\tconst smoothGeometry = modifier.modify( geometry );\n\n\t\t// colorify faces\n\t\tconsole.log(smoothGeometry);\n\t\tvar bufferSmoothGeometry = new THREE.BufferGeometry().fromGeometry( smoothGeometry ); \n\n\n\t\t///////displace\n\t    this.mtl = new Nodes.PhongNodeMaterial();\n\n\t\tvar time = new Nodes.TimerNode();\n\t\tvar scale = new Nodes.FloatNode( 1 );\n\t\tvar speed = new Nodes.FloatNode( .2 );\n\t\tvar colorA = new Nodes.ColorNode( 0xBFAEFF );\n\t\tvar colorB = new Nodes.ColorNode( 0xE59FFF );\n\n\t\t// used for serialization only\n\t\ttime.name = \"time\";\n\t\tspeed.name = \"speed\";\n\n\t\tvar uv = new Nodes.UVNode();\n\n\t\tvar timeScl = new Nodes.OperatorNode(\n\t\t\ttime,\n\t\t\tspeed,\n\t\t\tNodes.OperatorNode.MUL\n\t\t);\n\n\t\tvar displaceOffset = new Nodes.OperatorNode(\n\t\t\ttimeScl,\n\t\t\tuv,\n\t\t\tNodes.OperatorNode.ADD\n\t\t);\n\n\t\tvar tex = new Nodes.TextureNode( this.getTexture( \"cloud\" ), displaceOffset );\n\t\tvar texArea = new Nodes.SwitchNode( tex, 'w' );\n\n\t\tvar displace = new Nodes.OperatorNode(\n\t\t\tnew Nodes.NormalNode(),\n\t\t\ttexArea,\n\t\t\tNodes.OperatorNode.MUL\n\t\t);\n\n\t\tvar displaceScale = new Nodes.OperatorNode(\n\t\t\tdisplace,\n\t\t\tscale,\n\t\t\tNodes.OperatorNode.MUL\n\t\t);\n\n\t\tvar blend = new Nodes.OperatorNode(\n\t\t\tnew Nodes.PositionNode(),\n\t\t\tdisplaceScale,\n\t\t\tNodes.OperatorNode.ADD\n\t\t);\n\n\t\tvar color = new Nodes.MathNode(\n\t\t\tcolorB,\n\t\t\tcolorA,\n\t\t\ttexArea,\n\t\t\tNodes.MathNode.MIX\n\t\t);\n\n\t\tthis.mtl.color = this.mtl.specular = new Nodes.ColorNode( 0 );\n\t\tthis.mtl.emissive = color;\n\t\tthis.mtl.position = blend;\n\t\t///////displace\n\n\t\t// this.mtl.side = THREE.DoubleSide;\n\t\tthis.smoothMesh = new THREE.Mesh( bufferSmoothGeometry, this.mtl );\n\t\tconsole.log(this.smoothMesh.geometry);\n\t\tthis.scene.add( this.smoothMesh );\n\t\tthis.smoothMesh.scale.set(700, 700, 700);\n\t\tthis.smoothMesh.position.set(0, 21, 0);\n\t\tthis.mesh[counter] = this.smoothMesh;\n\n\n\t}\n\n\n\tgetTexture = ( name ) => {\n\n\t\tlet texture = textures[ name ].texture;\n\n\t\tif ( ! texture ) {\n\n\t\t\ttexture = textures[ name ].texture = new THREE.TextureLoader().load( textures[ name ].url );\n\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\tlibrary[ texture.uuid ] = texture;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tupdatePREM = ( textureCube ) => {\n\n\t\tthis.pmremCube = this.pmremCube || textureCube;\n\n\t\tif ( ! this.pmremCube || ! this.renderer ) return;\n\n\t\tconst minFilter = this.pmremCube.minFilter;\n\t\tconst magFilter = this.pmremCube.magFilter;\n\t\tconst generateMipmaps = this.pmremCube.generateMipmaps;\n\n\t\tconst pmremGenerator = new THREE.PMREMGenerator( this.renderer );\n\t\tthis.premTexture = pmremGenerator.fromCubemap( this.pmremCube ).texture;\n\t\tpmremGenerator.dispose();\n\n\t\tthis.pmremCube.minFilter = minFilter;\n\t\tthis.pmremCube.magFilter = magFilter;\n\t\tthis.pmremCube.generateMipmaps = generateMipmaps;\n\t\tthis.pmremCube.needsUpdate = true;\n\n\t\tlibrary[ this.premTexture.uuid ] = this.premTexture;\n\n\t}\n\n\n\n\tcubemap = (pathParam, pathFormat) => {\n\n\t\tconst path = pathParam;\n\t\tconst format = pathFormat;\n\t\tconst urls = [\n\t\t\tpath + 'posx' + format, path + 'negx' + format,\n\t\t\tpath + 'posy' + format, path + 'negy' + format,\n\t\t\tpath + 'posz' + format, path + 'negz' + format\n\t\t];\n\n\t\tconst textureCube = new THREE.CubeTextureLoader().load( urls );\n\n\t\t// library[ textureCube.uuid ] = textureCube;\n\n\t\treturn textureCube;\n\n\t};\n\n\n\n  startAnimationLoop = () => {\n\n  \tconst delta = clock.getDelta();\n  \tfor (var i = 0; i <2; i++) {\n  \t\t  \tif (this.mesh != undefined){\n  \t\t  \t\tif (this.mesh[i] != undefined){\n  \t\tthis.mesh[i].position.z = this.mesh[i].position.y = 0;\n\t\t// this.camera.lookAt( this.scene.position);\n\t //    this.renderer.render(this.scene, this.camera);\n\t this.mesh[i].rotation.y += 0.01;\n\t    frame.setRenderer( this.renderer ).update( delta );\n\n\t\tif ( this.mesh[i].material instanceof Nodes.NodeMaterial ) {\n\n\t\t\tframe.updateNode( this.mesh[i].material );\n\n\t\t}\n\t}\n  \t}\n  \t}\n\n  \t\n\n\tconst timer = 0.00005 * Date.now();\n\t// console.log(\"this.camera.position.x\",( this.mouseX - this.camera.position.x ) * .05);\n\tvar dd = 0;\n\tif (( this.camera.position.x != NaN)&&(this.mouseX!=undefined)){\n\t\tdd = Math.floor(( this.mouseX - this.camera.position.x ) * .05);\n\t\tthis.camera.position.z += ( - this.mouseY - this.camera.position.z ) * .05;\n\t}\n\tif (dd != NaN){\n\t\tthis.camera.position.x += dd;\n\t}\n\t// console.log(this.camera.position.x);\n\t// console.log(this.camera.position.x);\n\t// this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * .05;\n\n\tthis.camera.lookAt( this.scene.position );\n\n\tfor ( let i = 0, il = this.spheres.length; i < il; i ++ ) {\n\n\t\tconst sphere = this.spheres[ i ];\n\n\t\tsphere.position.x = 5000 * Math.cos( timer + i );\n\t\tsphere.position.y = 5000 * Math.sin( timer + i * 1.1 );\n\n\t}\n  \t\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\n\t\t\n\t    // this.stats.end();\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)}>\n    </div>;\n  }\n}\n\n\nexport default PlacentaNew;\n","import React, { Component , Fragment} from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from 'react-router-dom';\nimport './App.css';\n\nimport createClass from 'create-react-class';\n\nimport Placenta from './components/Placenta';\nimport PlacentaNew from './components/PlacentaNew';\n\nvar App = createClass({\n    render: function () {\n    return (\n      <Router>\n        <div id=\"app\" className=\"App\" style={{margin:\"0px auto\", height:\"905px\"}}>\n          <Fragment>\n              <Switch>\n              <Route exact path=\"/\" exact render={() => (\n\n                  <Placenta></Placenta>\n                )} />\n\n                </Switch>\n              </Fragment>\n            </div>\n          </Router>\n\n        )}\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}