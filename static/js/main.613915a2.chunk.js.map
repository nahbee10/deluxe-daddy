{"version":3,"sources":["components/Placenta.js","components/PlacentaAll.js","App.js","serviceWorker.js","index.js"],"names":["generatedCubeRenderTarget","ldrCubeRenderTarget","hdrCubeRenderTarget","rgbmCubeRenderTarget","style","height","params","Component","PlacentaAll","getEnvScene","envScene","THREE","geometry","deleteAttribute","roomMaterial","metalness","side","room","scale","setScalar","add","mainLight","lightMaterial","color","emissive","emissiveIntensity","light1","material","setHex","position","set","light2","clone","light3","sceneSetup","width","el","clientWidth","console","log","scene","fog","background","camera","renderer","physicallyCorrectLights","light","lights","myThis","ship_material","flatShading","specular","shininess","refractionRatio","combine","reflectivity","group_","loadModel","undefined","object","traverse","child","geometry2","fromBufferGeometry","mergeVertices","mesh2","rotation","Math","PI","addCustomSceneObjects","requestID","window","requestAnimationFrame","startAnimationLoop","manager","onProgress","item","loaded","total","xhr","lengthComputable","percentComplete","round","onError","loader","OBJLoader","load","obj","setPixelRatio","devicePixelRatio","setSize","innerWidth","outputEncoding","stats","Stats","appendChild","domElement","cubemap","pathParam","pathFormat","urls","onDocumentMouseMove","event","y","render","end","handleWindowResize","clientHeight","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","controls","dispose","ref","App","createClass","id","className","margin","Switch","Route","exact","path","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4MAkCIA,EAA2BC,EAAqBC,EAAqBC,E,8MAjBnEC,EAAQ,CACZC,OAAQ,MAGNC,EACK,MADLA,EAEQ,EAFRA,EAGQ,EAHRA,EAIO,EAJPA,GAKI,EALJA,GAMM,EANNA,GAOI,ECRFF,GDiBiBG,Y,kBCjBT,CACZF,OAAQ,OA2UKG,E,4MAnSbC,YAAc,WAEd,IAAIC,EAAW,IAAIC,KAEfC,EAAW,IAAID,IACnBC,EAASC,gBAAiB,MAC1B,IAAIC,EAAe,IAAIH,IAA4B,CAAEI,UAAW,EAAGC,KAAML,MACrEM,EAAO,IAAIN,IAAYC,EAAUE,GACrCG,EAAKC,MAAMC,UAAW,IACtBT,EAASU,IAAKH,GAEd,IAAII,EAAY,IAAIV,KAAkB,SAAU,GAAI,EAAG,GACvDD,EAASU,IAAKC,GAEd,IAAIC,EAAgB,IAAIX,IAA2B,CAAEY,MAAO,EAAUC,SAAU,SAAUC,kBAAmB,KAEzGC,EAAS,IAAIf,IAAYC,EAAUU,GACvCI,EAAOC,SAASJ,MAAMK,OAAQ,UAC9BF,EAAOG,SAASC,KAAO,EAAG,EAAG,GAC7BJ,EAAOR,MAAMY,IAAK,GAAK,EAAG,GAC1BpB,EAASU,IAAKM,GAEd,IAAIK,EAAS,IAAIpB,IAAYC,EAAUU,EAAcU,SACrDD,EAAOJ,SAASJ,MAAMK,OAAQ,OAC9BG,EAAOF,SAASC,IAAK,EAAG,EAAG,GAC3BC,EAAOb,MAAMY,IAAK,EAAG,GAAK,GAC1BpB,EAASU,IAAKW,GAEd,IAAIE,EAAS,IAAItB,IAAYC,EAAUU,EAAcU,SAMrD,OALAC,EAAON,SAASJ,MAAMK,OAAQ,KAC9BK,EAAOJ,SAASC,IAAK,EAAG,EAAG,GAC3BG,EAAOf,MAAMY,IAAK,IAAK,EAAG,IAC1BpB,EAASU,IAAKa,GAEPvB,G,EAMPwB,WAAa,WAEX,IAAMC,EAAQ,EAAKC,GAAGC,YAEtBC,QAAQC,IAAI,SADG,MAGf,EAAKC,MAAQ,IAAI7B,KAKlB,EAAK6B,MAAMC,IAAM,IAAI9B,IAHP,SAKb,EAAK6B,MAAME,WAAa,IAAI/B,IAAY,EAAE,EAAE,GAC5C,EAAKgC,OAAS,IAAIhC,IAChB,GACAwB,EAba,KAcb,EACA,KAGF,EAAKQ,OAAOd,SAASC,IAAK,EAAG,EAAG,KAOhC,EAAKc,SAAW,IAAIjC,KACpB,EAAKiC,SAASC,yBAA0B,EAcxC,IAAMC,EAAQ,IAAInC,IAAoB,EAAU,KAChDmC,EAAMjB,SAASC,IAAK,EAAG,EAAG,GAC7B,EAAKU,MAAMpB,IAAK0B,GAEf,IAAMC,EAAS,GACdA,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GACnDoC,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GACnDoC,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GACnDoC,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GACnDoC,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GACnDoC,EAAQ,GAAM,IAAIpC,KAAkB,SAAU,IAAK,GAEnDoC,EAAQ,GAAIlB,SAASC,IAAK,EAAG,GAAI,IACjCiB,EAAQ,GAAIlB,SAASC,IAAK,GAAI,GAAI,IAClCiB,EAAQ,GAAIlB,SAASC,KAAO,IAAM,IAAM,IACxCiB,EAAQ,GAAIlB,SAASC,IAAK,GAAI,IAAK,GACnCiB,EAAQ,GAAIlB,SAASC,IAAK,IAAK,GAAI,IACnCiB,EAAQ,GAAIlB,SAASC,KAAO,GAAI,IAAK,GACrC,EAAKU,MAAMpB,IAAK2B,EAAQ,IACxB,EAAKP,MAAMpB,IAAK2B,EAAQ,IACxB,EAAKP,MAAMpB,IAAK2B,EAAQ,IACxB,EAAKP,MAAMpB,IAAK2B,EAAQ,IACxB,EAAKP,MAAMpB,IAAK2B,EAAQ,IACxB,EAAKP,MAAMpB,IAAK2B,EAAQ,IAEvB,IAAIC,EAAM,eACNC,EAAgB,IAAItC,IAAyB,CAChDuC,aAAa,EACb3B,MAAO,QAEPC,SAAU,QACV2B,SAAU,SACV1B,kBAAkB,EAElB2B,UAAU,IACVC,gBAAgB,IAChBC,QAAS3C,IACT4C,aAAc,IAIf,EAAKC,OAAS,IAAI7C,IAElB,EAAK8C,UAAY,gBAEUC,GAAjBV,EAAOW,SACTX,EAAOW,OAAOC,UAAU,SAAWC,GAI3C,QAAsBH,IAAnBG,EAAMjD,SAAuB,CAC/B,IAAMkD,GAAY,IAAInD,KAAiBoD,mBAAoBF,EAAMjD,UACjEkD,EAAUE,gBACV,IAAMC,EAAQ,IAAItD,IAAYmD,EAAWb,GACzCgB,EAAMpC,SAASC,IAAI,EAAG,IAAK,GAC3BmC,EAAM/C,MAAMY,IAAI,EAAG,EAAG,GACtBmC,EAAMC,SAASpC,IAAI,EAAG,EAAGqC,KAAKC,IAC9BpB,EAAOQ,OAAOpC,IAAK6C,GACnB3B,QAAQC,IAAI,UAYLS,EAAOqB,wBACPrB,EAAOsB,UAAYC,OAAOC,sBAAsBxB,EAAOyB,sBAM/D,EAAKC,QAAU,IAAI/D,IAAsB,EAAK8C,WAE1C,EAAKiB,QAAQC,WAAa,SAAWC,EAAMC,EAAQC,GAEjDxC,QAAQC,IAAKqC,EAAMC,EAAQC,IAIjC,EAAKH,WAAa,SAAUI,GAEtB,GAAKA,EAAIC,iBAAmB,CAE1B,IAAIC,EAAkBF,EAAIF,OAASE,EAAID,MAAQ,IAC/CxC,QAAQC,IAAK,SAAW4B,KAAKe,MAAOD,EAAiB,GAAM,kBAMnE,EAAKE,QAAU,aAEf,EAAKC,OAAS,IAAIC,IAAW,EAAKX,SAElC,EAAKU,OAAOE,KAAM,kBAAkB,SAAWC,GAE7CvC,EAAOW,OAAS4B,EAChBjD,QAAQC,IAAIgD,KAEX,EAAKZ,WAAY,EAAKQ,SAEzB,EAAKvC,SAAS4C,cAAejB,OAAOkB,kBACvC,EAAK7C,SAAS8C,QAASnB,OAAOoB,WAAY,MAK1C,EAAK/C,SAASgD,eAAiBjF,KAE/B,EAAKkF,MAAQ,IAAIC,IASd,EAAK1D,GAAG2D,YAAY,EAAKnD,SAASoD,a,EAMrCC,QAAU,SAACC,EAAWC,GAErB,IAEMC,EAAO,CAFAF,EAGL,OAFOC,EADFD,EAGmB,OAFjBC,EADFD,EAIL,OAHOC,EADFD,EAImB,OAHjBC,EADFD,EAKL,OAJOC,EADFD,EAKmB,OAJjBC,GAWf,OAJoB,IAAIxF,KAA0B2E,KAAMc,I,EAQxDC,oBAAsB,SAAEC,K,EAaxBjC,sBAAwB,WACvB,EAAK7B,MAAMpB,IAAI,EAAKoC,S,EAKrBiB,mBAAqB,WAIlB,EAAK9B,OAAOd,SAAS0E,GAAK,GAM1B,EAAK3D,SAAS4D,OAAO,EAAKhE,MAAO,EAAKG,QAEtC,EAAKa,OAAOU,SAASqC,GAAK,IAC1B,EAAKV,MAAMY,MAKZ,EAAKnC,UAAYC,OAAOC,sBAAsB,EAAKC,qB,EAIrDiC,mBAAqB,WACnB,IAAMvE,EAAQ,EAAKC,GAAGC,YAChBhC,EAAS,EAAK+B,GAAGuE,aAGvB,EAAK/D,SAAS8C,QAAQvD,EAAO9B,GAC7B,EAAKsC,OAAOiE,OAASzE,EAAQ9B,EAI7B,EAAKsC,OAAOkE,0B,kEAtSZC,KAAK5E,aAEL4E,KAAKrC,qBACLF,OAAOwC,iBAAiB,SAAUD,KAAKJ,sB,6CAIvCnC,OAAOyC,oBAAoB,SAAUF,KAAKJ,oBAC1CnC,OAAO0C,qBAAqBH,KAAKxC,WACjCwC,KAAKI,SAASC,Y,+BAgSN,IAAD,OACP,OAAO,yBAAK/G,MAAOA,EAAOgH,IAAK,SAAAA,GAAG,OAAK,EAAKhF,GAAKgF,S,GA5S3B7G,aCXX8G,EApBLC,IAAY,CAClBd,OAAQ,WAAa,IAAD,EACpB,OACE,kBAAC,IAAD,KACE,yBAAKe,GAAG,MAAMC,UAAU,MAAMpH,MAAO,CAACqH,OAAO,WAAYpH,OAAO,UAC9D,kBAAC,WAAD,KACI,kBAACqH,EAAA,EAAD,KACA,kBAACC,EAAA,GAAD,GAAOC,OAAK,EAACC,KAAK,KAAlB,kDAAoC,kBAEhC,kBAAC,EAAD,SAFJ,WCXMC,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OACP,kBAAC,IAAM2B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvG,QAAQuG,MAAMA,EAAMC,c","file":"static/js/main.613915a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AsciiEffect } from 'three/examples/jsm/effects/AsciiEffect.js';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nvar angle = 0;\nvar radiusL = 32;\nvar radiusS = 14; \n\nconst style = {\n  height: 5400 // we can control scene size by setting container dimensions\n};\n\nvar params = {\n\tenvMap: 'HDR',\n\troughness: 0.0,\n\tmetalness: 0.0,\n\texposure: 1.0,\n\tnodes: true,\n\tanimate: true,\n\tdebug: false\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar torusMesh, planeMesh;\nvar generatedCubeRenderTarget, ldrCubeRenderTarget, hdrCubeRenderTarget, rgbmCubeRenderTarget;\nvar ldrCubeMap, hdrCubeMap, rgbmCubeMap;\n\nclass Placenta extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    \n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  getEnvScene = () => {\n\n\t\tvar envScene = new THREE.Scene();\n\n\t\tvar geometry = new THREE.BoxBufferGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\n\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\n\t\troom.scale.setScalar( 10 );\n\t\tenvScene.add( room );\n\n\t\tvar mainLight = new THREE.PointLight( 0xffffff, 50, 0, 2 );\n\t\tenvScene.add( mainLight );\n\n\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\n\n\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\n\t\tlight1.material.color.setHex( 0xff0000 );\n\t\tlight1.position.set( - 5, 2, 0 );\n\t\tlight1.scale.set( 0.1, 1, 1 );\n\t\tenvScene.add( light1 );\n\n\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight2.material.color.setHex( 0x00ff00 );\n\t\tlight2.position.set( 0, 5, 0 );\n\t\tlight2.scale.set( 1, 0.1, 1 );\n\t\tenvScene.add( light2 );\n\n\t\tvar light3 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight3.material.color.setHex( 0x0000ff );\n\t\tlight3.position.set( 2, 1, 5 );\n\t\tlight3.scale.set( 1.5, 2, 0.1 );\n\t\tenvScene.add( light3 );\n\n\t\treturn envScene;\n\n\t}\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = 5400;\n    console.log(\"height\",height);\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0,0,0);\n    this.camera = new THREE.PerspectiveCamera(\n      40, // fov = field of view\n      width / height, // aspect ratio\n      1, // near plane\n      1000 // far plane\n    );\n    // this.camera.position.y = 150;\n    this.camera.position.set( 0, 0, 390 );\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n\n    var object;\n    var myThis = this;\n    var ship_material = new THREE.MeshPhongMaterial( { flatShading: true }  );\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n\n              // if ( child.isMesh ) child.material = ship_material;\n\n            } );\n\n            // myThis.object.position.z = -1000;\n            // myThis.object.scale.x = 80;\n            // myThis.object.scale.y = 80;\n            // myThis.object.scale.z = 80;\n            // myThis.scene.add( myThis.object );\n            // myThis.subdivide( geometry, 3 );\n            myThis.addCustomSceneObjects();\n            myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n    var textureLoader = new THREE.TextureLoader( this.manager );\n\n    this.texture = textureLoader.load( 'UterusWhole.jpg' );\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'placenta12.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, 5400 );\n\t// container.appendChild( renderer.domElement );\n\n\t//renderer.toneMapping = ReinhardToneMapping;\n\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\tthis.stats = new Stats();\n\t// container.appendChild( stats.dom );\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    // document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n  onDocumentMouseMove = ( event ) => {\n\n    // var windowHalfX = window.innerWidth / 2;\n    // var windowHalfY = window.innerHeight / 2;\n    // var myThis2 = this;\n    //     myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n    //     myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n      }\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n  \tconsole.log(\"this.object.children[1].geometry\",this.object.children[1].geometry);\n\n\tvar a = new THREE.Geometry().fromBufferGeometry( this.object.children[1].geometry );\n\ta.mergeVertices();\n\tthis.object.children[1].geometry.fromGeometry( a );\n\n\n  \tvar geometry = this.object.children[1].geometry;\n\tvar geometry2 = this.object.children[1].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group = new THREE.Group();\n\tthis.group2 = new THREE.Group();\n\n\tvar material;\n\n\tmaterial = new THREE.MeshStandardMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\tmaterial.flatShading = false;\n\n\tthis.torusMesh = new THREE.Mesh( geometry, material );\n\tthis.torusMesh.scale.x = 10;\n\tthis.torusMesh.scale.y = 10;\n\tthis.torusMesh.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMesh2.rotation.z = Math.PI;\n\tthis.torusMesh2.scale.x = 10;\n\tthis.torusMesh2.scale.y = 10;\n\tthis.torusMesh2.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group.add( this.torusMesh );\n\tthis.group2.add( this.torusMesh2 );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial = new Nodes.MeshStandardNodeMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\n\tthis.torusMeshNode = new THREE.Mesh( geometry, material );\n\tthis.torusMeshNode.scale.x = 10;\n\tthis.torusMeshNode.scale.y = 10;\n\tthis.torusMeshNode.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMeshNode2.rotation.z = Math.PI;\n\tthis.torusMeshNode2.scale.x = 10;\n\tthis.torusMeshNode2.scale.y = 10;\n\tthis.torusMeshNode2.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2.add(this.torusMeshNode2);\n\tthis.group.add(this.torusMeshNode);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh = new THREE.Mesh( geometry, material );\n\tthis.planeMesh.position.y = - 50;\n\tthis.planeMesh.rotation.x = - Math.PI * 0.5;\n\tthis.group.add(this.planeMesh);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2);\n\n\n\n\tvar a2 = new THREE.Geometry().fromBufferGeometry( this.object.children[2].geometry );\n\ta2.mergeVertices();\n\tthis.object.children[2].geometry.fromGeometry( a2 );\n\n\tconsole.log(this.object.children[2].geometry);\n\n  \tvar geometry_ = this.object.children[2].geometry;\n\tvar geometry2_ = this.object.children[2].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group_ = new THREE.Group();\n\tthis.group2_ = new THREE.Group();\n\n\tvar material_;\n\n\tmaterial_ = new THREE.MeshStandardMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\tmaterial_.flatShading = false;\n\n\tthis.torusMesh_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMesh_.scale.x = 10;\n\tthis.torusMesh_.scale.y = 10;\n\tthis.torusMesh_.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMesh2_.rotation.z = Math.PI;\n\tthis.torusMesh2_.scale.x = 10;\n\tthis.torusMesh2_.scale.y = 10;\n\tthis.torusMesh2_.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group_.add( this.torusMesh_ );\n\tthis.group2_.add( this.torusMesh2_ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial_ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\n\tthis.torusMeshNode_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMeshNode_.scale.x = 10;\n\tthis.torusMeshNode_.scale.y = 10;\n\tthis.torusMeshNode_.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMeshNode2_.rotation.z = Math.PI;\n\tthis.torusMeshNode2_.scale.x = 10;\n\tthis.torusMeshNode2_.scale.y = 10;\n\tthis.torusMeshNode2_.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2_.add(this.torusMeshNode2_);\n\tthis.group_.add(this.torusMeshNode_);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh_ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh_.position.y = - 50;\n\tthis.planeMesh_.rotation.x = - Math.PI * 0.5;\n\tthis.group_.add(this.planeMesh_);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2_);\n\n\tvar a3 = new THREE.Geometry().fromBufferGeometry( this.object.children[0].geometry );\n\ta3.mergeVertices();\n\tthis.object.children[0].geometry.fromGeometry( a3 );\n\n\tconsole.log(this.object.children[0].geometry);\n\n  \tvar geometry__ = this.object.children[0].geometry;\n\tvar geometry2__ = this.object.children[0].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group__ = new THREE.Group();\n\tthis.group2__ = new THREE.Group();\n\n\tvar material__;\n\n\tmaterial__ = new THREE.MeshStandardMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\tmaterial__.flatShading = false;\n\n\tthis.torusMesh__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMesh__.scale.x = 10;\n\tthis.torusMesh__.scale.y = 10;\n\tthis.torusMesh__.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMesh2__.rotation.z = Math.PI;\n\tthis.torusMesh2__.scale.x = 10;\n\tthis.torusMesh2__.scale.y = 10;\n\tthis.torusMesh2__.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group__.add( this.torusMesh__ );\n\tthis.group2__.add( this.torusMesh2__ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial__ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\n\tthis.torusMeshNode__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMeshNode__.scale.x = 10;\n\tthis.torusMeshNode__.scale.y = 10;\n\tthis.torusMeshNode__.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMeshNode2__.rotation.z = Math.PI;\n\tthis.torusMeshNode2__.scale.x = 10;\n\tthis.torusMeshNode2__.scale.y = 10;\n\tthis.torusMeshNode2__.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\tthis.group.position.y = 90;\n\tthis.group2.position.y = 90;\n\tthis.group_.position.y = 90;\n\tthis.group2_.position.y = 90;\n\tthis.group__.position.y = 90;\n\tthis.group2__.position.y = 90;\n\tthis.group2__.add(this.torusMeshNode2__);\n\tthis.group__.add(this.torusMeshNode__);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh__ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh__.position.y = - 50;\n\tthis.planeMesh__.rotation.x = - Math.PI * 0.5;\n\tthis.group__.add(this.planeMesh__);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2__);\n\n\n\n  \tTHREE.DefaultLoadingManager.onLoad = function ( ) {\n\n\t\tpmremGenerator.dispose();\n\n\t};\n\n\tvar hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ];\n\tvar myThis = this;\n\tthis.hdrCubeMap = new HDRCubeTextureLoader()\n\t\t.setPath( 'textures/cube/pp_cube_map/' )\n\t\t.setDataType( THREE.UnsignedByteType )\n\t\t.load( hdrUrls, function () {\n\t\t\thdrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.hdrCubeMap );\n\n\t\t\tmyThis.hdrCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.hdrCubeMap.needsUpdate = true;\n\n\t\t} );\n\n\tvar ldrUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.ldrCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisa/' )\n\t\t.load( ldrUrls, function () {\n\n\t\t\tmyThis.ldrCubeMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tldrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.ldrCubeMap );\n\n\t\t} );\n\n\n\tvar rgbmUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.rgbmCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisaRGBM16/' )\n\t\t.load( rgbmUrls, function () {\n\n\t\t\tmyThis.rgbmCubeMap.encoding = THREE.RGBM16Encoding;\n\t\t\tmyThis.rgbmCubeMap.format = THREE.RGBAFormat;\n\n\t\t\trgbmCubeRenderTarget = pmremGenerator.fromCubemap( myThis.rgbmCubeMap );\n\n\t\t\tmyThis.rgbmCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.rgbmCubeMap.needsUpdate = true;\n\n\t\t} );\n\tvar pmremGenerator = new THREE.PMREMGenerator( this.renderer );\n\tpmremGenerator.compileCubemapShader();\n\n\tvar envScene = this.getEnvScene();\n\tgeneratedCubeRenderTarget = pmremGenerator.fromScene( envScene, 0.04 );\n\n\t\n    \n  };\n\n  startAnimationLoop = () => {\n  \t\n \t// \n  \t\t\n  \t\tif (this.object != undefined){\n  \t\tthis.stats.begin();\n\t  \tthis.torusMesh.visible = ! params.nodes;\n\t\tthis.torusMeshNode.visible = params.nodes;\n\n\t\tthis.torusMesh.material.roughness = params.roughness;\n\t\tthis.torusMesh.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode.material.roughness = params.roughness;\n\t\tthis.torusMeshNode.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2.visible = ! params.nodes;\n\t\tthis.torusMeshNode2.visible = params.nodes;\n\n\t\tthis.torusMesh2.material.roughness = params.roughness;\n\t\tthis.torusMesh2.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2.material.metalness = params.metalness;\n\n\t\tthis.torusMesh_.visible = ! params.nodes;\n\t\tthis.torusMeshNode_.visible = params.nodes;\n\n\t\tthis.torusMesh_.material.roughness = params.roughness;\n\t\tthis.torusMesh_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2_.visible = ! params.nodes;\n\t\tthis.torusMeshNode2_.visible = params.nodes;\n\n\t\tthis.torusMesh2_.material.roughness = params.roughness;\n\t\tthis.torusMesh2_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh__.visible = ! params.nodes;\n\t\tthis.torusMeshNode__.visible = params.nodes;\n\n\t\tthis.torusMesh__.material.roughness = params.roughness;\n\t\tthis.torusMesh__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode__.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2__.visible = ! params.nodes;\n\t\tthis.torusMeshNode2__.visible = params.nodes;\n\n\t\tthis.torusMesh2__.material.roughness = params.roughness;\n\t\tthis.torusMesh2__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2__.material.metalness = params.metalness;\n\n\t\tvar renderTarget, cubeMap;\n\n\t\tswitch ( params.envMap ) {\n\n\t\t\tcase 'Generated':\n\t\t\t\trenderTarget = generatedCubeRenderTarget;\n\t\t\t\tcubeMap = generatedCubeRenderTarget.texture;\n\t\t\t\tbreak;\n\t\t\tcase 'LDR':\n\t\t\t\trenderTarget = ldrCubeRenderTarget;\n\t\t\t\tcubeMap = ldrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'HDR':\n\t\t\t\trenderTarget = hdrCubeRenderTarget;\n\t\t\t\tcubeMap = hdrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'RGBM16':\n\t\t\t\trenderTarget = rgbmCubeRenderTarget;\n\t\t\t\tcubeMap = rgbmCubeMap;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar newEnvMap = renderTarget ? renderTarget.texture : null;\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh.material.envMap ) {\n\n\t\t\tthis.torusMesh.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh.material.map = newEnvMap;\n\t\t\tthis.planeMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode.rotation.y = this.torusMesh.rotation.y;\n\n\t\t\tthis.torusMesh2.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2.rotation.y = this.torusMesh2.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh_.material.envMap ) {\n\n\t\t\tthis.torusMesh_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode_.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh_.material.map = newEnvMap;\n\t\t\tthis.planeMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2_.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode_.rotation.y = this.torusMesh_.rotation.y;\n\n\t\t\tthis.torusMesh2_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2_.rotation.y = this.torusMesh2_.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh__.material.envMap ) {\n\n\t\t\tthis.torusMesh__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode__.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh__.material.map = newEnvMap;\n\t\t\tthis.planeMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2__.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode__.rotation.y = this.torusMesh__.rotation.y;\n\n\t\t\tthis.torusMesh2__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2__.rotation.y = this.torusMesh2__.rotation.y;\n\n\t\t}\n\n\t\tthis.planeMesh.visible = params.debug;\n\t\tthis.planeMesh_.visible = params.debug;\n\t\tthis.planeMesh__.visible = params.debug;\n\n\t\tif ((this.group != undefined) && (this.group2 != undefined)){\n\t      // this.camera.rotation.y += 0.1;\n\t      // this.group.position.y = radiusL * Math.cos( angle );  \n\t      // this.group.position.x = radiusL * Math.sin( angle );\n\t      // this.group.rotation.z = Math.PI - angle;\n\n\t      // this.group2.position.y = radiusS * Math.cos( angle );  \n\t      // this.group2.position.x = radiusS * Math.sin( angle );\n\t      // this.group2.rotation.z = Math.PI - angle;\n\t      // angle += 0.01;\n\t      // var xAdd = ( this.mouseX - this.camera.position.x ) * .05;\n\t      // var nahee = this.camera.position.x + xAdd;\n\t      // this.camera.position.x = nahee;\n\t      // this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * .05;\n\t    }\n    \tthis.camera.position.y = -20;\n    \t// this.camera.position.z = 0;\n\t\tthis.scene.background = cubeMap;\n\t\tthis.renderer.toneMappingExposure = params.exposure;\n\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\t    this.stats.end();\n\n\t}\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\n\nexport default Placenta;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AsciiEffect } from 'three/examples/jsm/effects/AsciiEffect.js';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\n\nvar angle = 0;\nvar radiusL = 32;\nvar radiusS = 14; \n\nconst style = {\n  height: 5400 // we can control scene size by setting container dimensions\n};\n\nconst params_bloom = {\n\t\texposure: 1,\n\t\tbloomStrength: 1,\n\t\tbloomThreshold: .5,\n\t\tbloomRadius: 1\n\t};\n\nvar params = {\n\tenvMap: 'HDR',\n\troughness: 0.0,\n\tmetalness: 0.0,\n\texposure: 1.0,\n\tnodes: true,\n\tanimate: true,\n\tdebug: false\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar torusMesh, planeMesh;\nvar generatedCubeRenderTarget, ldrCubeRenderTarget, hdrCubeRenderTarget, rgbmCubeRenderTarget;\nvar ldrCubeMap, hdrCubeMap, rgbmCubeMap;\n\nclass PlacentaAll extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    \n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  getEnvScene = () => {\n\n\t\tvar envScene = new THREE.Scene();\n\n\t\tvar geometry = new THREE.BoxBufferGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\n\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\n\t\troom.scale.setScalar( 10 );\n\t\tenvScene.add( room );\n\n\t\tvar mainLight = new THREE.PointLight( 0xffffff, 50, 0, 2 );\n\t\tenvScene.add( mainLight );\n\n\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\n\n\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\n\t\tlight1.material.color.setHex( 0xff0000 );\n\t\tlight1.position.set( - 5, 2, 0 );\n\t\tlight1.scale.set( 0.1, 1, 1 );\n\t\tenvScene.add( light1 );\n\n\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight2.material.color.setHex( 0x00ff00 );\n\t\tlight2.position.set( 0, 5, 0 );\n\t\tlight2.scale.set( 1, 0.1, 1 );\n\t\tenvScene.add( light2 );\n\n\t\tvar light3 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight3.material.color.setHex( 0x0000ff );\n\t\tlight3.position.set( 2, 1, 5 );\n\t\tlight3.scale.set( 1.5, 2, 0.1 );\n\t\tenvScene.add( light3 );\n\n\t\treturn envScene;\n\n\t}\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = 5400;\n    console.log(\"height\",height);\n\n    this.scene = new THREE.Scene();\n    {\n\t  const color = 0x3f7b9d;  // white\n\t  const near = 0;\n\t  const far = 60;\n\t  this.scene.fog = new THREE.Fog(color);\n\t}\n    this.scene.background = new THREE.Color(0,0,0);\n    this.camera = new THREE.PerspectiveCamera(\n      40, // fov = field of view\n      width / height, // aspect ratio\n      1, // near plane\n      1000 // far plane\n    );\n    // this.camera.position.y = 150;\n    this.camera.position.set( 0, 0, 390 );\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n    // this.renderer.toneMapping = THREE.ReinhardToneMapping;\n\n //    this.renderScene = new RenderPass( this.scene, this.camera );\n\n\t// this.bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n\t// this.bloomPass.threshold = params_bloom.bloomThreshold;\n\t// this.bloomPass.strength = params_bloom.bloomStrength;\n\t// this.bloomPass.radius = params_bloom.bloomRadius;\n\n\t// this.composer = new EffectComposer( this.renderer );\n\t// this.composer.addPass( this.renderScene );\n\t// this.composer.addPass( this.bloomPass );\n\n    const light = new THREE.AmbientLight( 0x000000 ,500); // soft white light\n    light.position.set( 0, 0, 0 );\n\tthis.scene.add( light );\n\n\t\tconst lights = [];\n\t\t\tlights[ 0 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 1 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 2 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 3 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 4 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 5 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\n\t\t\tlights[ 0 ].position.set( 0, 60, 40 );\n\t\t\tlights[ 1 ].position.set( 10, 20, 40 );\n\t\t\tlights[ 2 ].position.set( - 10, - 20, - 40 );\n\t\t\tlights[ 3 ].position.set( 0, -400, 0 );\n\t\t\tlights[ 4 ].position.set( 10, -20, 40 );\n\t\t\tlights[ 5 ].position.set( - 10, 130, 0 );\n\t\t\tthis.scene.add( lights[ 0 ] );\n\t\t\tthis.scene.add( lights[ 1 ] );\n\t\t\tthis.scene.add( lights[ 2 ] );\n\t\t\tthis.scene.add( lights[ 3 ] );\n\t\t\tthis.scene.add( lights[ 4 ] );\n\t\t\tthis.scene.add( lights[ 5 ] );\n    var object;\n    var myThis = this;\n    var ship_material = new THREE.MeshPhongMaterial( { \n    \tflatShading: false,\n    \tcolor: 0x2194ce,\n    \t// color:0x7544ba,\n    \temissive: 0x5e1919,\n    \tspecular: 0xf79a9a,\n    \temissiveIntensity:3,\n    \t// specular: 0x000000,\n    \tshininess:100,\n    \trefractionRatio:.56,\n    \tcombine: THREE.AddOperation,\n    \treflectivity: 1\n\n    }  );\n\n    this.group_ = new THREE.Group();\n\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n            \t// child.geometry.mergeVertices();\n\t\t\t\t\n\t\t\t\t// myThis.scene.add( mesh2 );\n\t\t\t\tif(child.geometry !== undefined){ \n\t\t\t\t\tconst geometry2 = new THREE.Geometry().fromBufferGeometry( child.geometry );\n\t\t\t\t\tgeometry2.mergeVertices();\n\t\t\t\t\tconst mesh2 = new THREE.Mesh( geometry2, ship_material );\n\t\t\t\t\tmesh2.position.set(0, 100, 0); \n\t\t\t\t\tmesh2.scale.set(5, 5, 5); \n\t\t\t\t\tmesh2.rotation.set(0, 0, Math.PI); \n\t\t\t\t\tmyThis.group_.add( mesh2 );\n\t\t\t\t\tconsole.log(\"hi\");\n\t\t\t\t}\n\t\t\t\t\n\n            } );\n\n            // myThis.object.position.z = -1000;\n            // myThis.object.scale.x = 80;\n            // myThis.object.scale.y = 80;\n            // myThis.object.scale.z = 80;\n\n            // myThis.subdivide( geometry, 3 );\n            myThis.addCustomSceneObjects();\n            myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'placenta12.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, 5400 );\n\t// this.composer.setSize( window.innerWidth, 5400 );\n\t// container.appendChild( renderer.domElement );\n\n\t// renderer.toneMapping = ReinhardToneMapping;\n\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\tthis.stats = new Stats();\n\t// container.appendChild( stats.dom );\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    // document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n\n\tcubemap = (pathParam, pathFormat) => {\n\n\t\tconst path = pathParam;\n\t\tconst format = pathFormat;\n\t\tconst urls = [\n\t\t\tpath + 'posx' + format, path + 'negx' + format,\n\t\t\tpath + 'posy' + format, path + 'negy' + format,\n\t\t\tpath + 'posz' + format, path + 'negz' + format\n\t\t];\n\n\t\tconst textureCube = new THREE.CubeTextureLoader().load( urls );\n\n\t\t// library[ textureCube.uuid ] = textureCube;\n\n\t\treturn textureCube;\n\n\t};\n\n  onDocumentMouseMove = ( event ) => {\n\n    // var windowHalfX = window.innerWidth / 2;\n    // var windowHalfY = window.innerHeight / 2;\n    // var myThis2 = this;\n    //     myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n    //     myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n      }\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n  \tthis.scene.add(this.group_);\n\t\n    \n  };\n\n  startAnimationLoop = () => {\n  \t\n \t// \n  \t\t\n    \tthis.camera.position.y = -20;\n    \t// this.camera.position.z = 0;\n\t\t// this.scene.background = cubeMap;\n\t\t// this.renderer.toneMappingExposure = params.exposure;\n\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\t    // this.composer.render();\n\t    this.group_.rotation.y += 0.04;\n\t    this.stats.end();\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\n\nexport default PlacentaAll;\n","import React, { Component , Fragment} from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from 'react-router-dom';\nimport './App.css';\n\nimport createClass from 'create-react-class';\n\nimport Placenta from './components/Placenta';\nimport PlacentaAll from './components/PlacentaAll';\n\nvar App = createClass({\n    render: function () {\n    return (\n      <Router>\n        <div id=\"app\" className=\"App\" style={{margin:\"0px auto\", height:\"905px\"}}>\n          <Fragment>\n              <Switch>\n              <Route exact path=\"/\" exact render={() => (\n\n                  <PlacentaAll></PlacentaAll>\n                )} />\n\n                </Switch>\n              </Fragment>\n            </div>\n          </Router>\n\n        )}\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}