{"version":3,"sources":["components/Placenta.js","components/PlacentaAll.js","js/SpecGlossMultiUVInstanceExample.js","js/SpecGlossMultiUVInstanceExample3.js","js/SpecGlossMultiUVInstanceExample2.js","js/SpecGlossMultiUVInstanceExample4.js","components/PlacentaNo.js","App.js","serviceWorker.js","index.js"],"names":["generatedCubeRenderTarget","ldrCubeRenderTarget","hdrCubeRenderTarget","rgbmCubeRenderTarget","style","height","params","Component","addOrMergeProp","material","propName","data","Object","assign","toJSON","res","THREE","prototype","call","this","undefined","_serializationManager","serialize","bind","afterSerialize","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","c","Math","cos","s","sin","set","join","DEFAULT_MAP_LIST","PROP_TO_CHUNK_MAP","mapRegex","getReplaceString","mapName","getUniformNameFromProp","prop","addMapTransformPropsToMaterial","_mapName","shaderUniforms","value","x","y","decorateMaterialWithPerMapTransforms","mapList","isPerMapTransformExtended","shaderIncludes","i","length","uniform","type","stage","lookup","isSpecGlossExtended","push","chunkName","shaderChunk","replace","SerializationManager","addFunction","meta","metadata","extensions","forEach","toArray","addAfterFunction","roughnessMap","roughness","metalnessMap","metalness","processFunctions","afterFunctions","func","f","SHADER_INCLUDES_SPEC_GLOSS","roughnessmap_fragment","metalnessmap_fragment","lights_physical_fragment","decorateMaterialWithSpecGloss","console","log","specular","setHex","glossiness","glossinessMap","specularMap","USE_GLOSSINESSMAP","defineProperty","get","v","getHex","isTexture","uuid","INSTANCES","gltfScale","mobOrDesk","PlacentaNo","props","sceneSetup","width","window","innerWidth","innerHeight","scene","intersectsScene","mouseX","mouseY","targetX","targetY","clock","camera","position","z","light","add","ambient","renderer","physicallyCorrectLights","outputEncoding","setPixelRatio","devicePixelRatio","setSize","interaction","Interaction","stats","Stats","offsetAttArr","scaleAttArr","matArraySize","matrixArray","Float32Array","matrixAttributeArray","matrixArray2","matrixAttributeArray2","matrixArray3","matrixAttributeArray3","matrixArray4","matrixAttributeArray4","matrixArray5","matrixAttributeArray5","initInstanceAttributesExtended","mesh","mesh2","mesh3","mesh4","initTexture","initBall","loadGLTF","loadGLTF2","startAnimationLoop","el","appendChild","domElement","document","addEventListener","onDocumentMouseMove","myThis","loader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","ddsLoader","DDSLoader","setDDSLoader","loadStartTime","performance","now","load","gltf","object","info","toFixed","traverse","node","isMeshStandardMaterial","isShaderMaterial","envMap","needsUpdate","PI","scale","meshGLTF","children","frustumCulled","geometry","materialGLTF","applyInstancingToMeshExtended","meshArr","error","gltf2","meshGLTF2","materialGLTF2","texture","wrapS","wrapT","name","texture3","texture4","texture5","texture6","mapping","encoding","map","material2","material3","material4","material5","mesh5","max","minus","minus2","minus3","array","attArray","meshName","n","nurbsControlPoints","nurbsKnots","random","knot","clamp","positions","NURBSCurve","getSpacedPoints","offsets","scales","dummy2","dummy4","dummy3","l","object2","userData","index","cursor","on","ev","goEventClicked","goEvent","goEvent2","clone","updateMatrixWorld","instanceOffsetAttribute2","instanceScaleAttribute2","indecis","addAttribute","uTime","uScale","uSelected","isSimpleInstanceExtended","begin_vertex","onBeforeCompile","shader","uniforms","vertexShader","decorateMaterialWithSimpleInstancing2","customDepthMaterial","decorateMaterialWithSimpleInstancing","depthPacking","copy","instanceCount","setAttribute","event","windowHalfX","windowHalfY","myThis2","clientX","clientY","param","setState","display","delta","getDelta","time","selected","ss","render","end","requestID","requestAnimationFrame","removeModal","handleWindowResize","clientWidth","clientHeight","aspect","updateProjectionMatrix","state","removeEventListener","cancelAnimationFrame","ref","onClick","className","top","left","background","src","frameborder","allow","allowfullscreen","App","createClass","id","margin","Switch","Route","exact","path","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4MAkCIA,EAA2BC,EAAqBC,EAAqBC,E,6MAjBnEC,EAAQ,CACZC,OAAQ,MAGNC,EACK,MADLA,EAEQ,EAFRA,EAGQ,EAHRA,EAIO,EAJPA,GAKI,EALJA,GAMM,EANNA,GAOI,ECRFF,GDiBiBG,Y,kBCjBT,CACZF,OAAQ,O,GA0BgBE,Y,mCC3C1B,SAASC,EAAgBC,EAAUC,EAAUC,GAEvCF,EAAUC,GAEdE,OAAOC,OAAQJ,EAAUC,GAAYC,GAIrCF,EAAUC,GAAaC,EAOzB,SAASG,IACR,IAAIC,EAAMC,KAAeC,UAAUH,OAAOI,KACzCC,UACAC,EACAD,KAAKE,sBAAsBC,UAAUC,KAAKJ,KAAKE,wBAGhD,OADAF,KAAKE,sBAAsBG,eAAeN,KAAKC,KAAKE,sBAAsBN,GACnEA,EAIR,SAASU,EAAgBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAUC,EAAIC,GAEtD,IAAIC,EAAIC,KAAKC,IAAKL,GACdM,EAAIF,KAAKG,IAAKP,GAElBX,KAAKmB,IACJV,EAAKK,EAAGL,EAAKQ,GAAKR,GAAOK,EAAIF,EAAKK,EAAIJ,GAAOD,EAAKL,GAChDG,EAAKO,EAAGP,EAAKI,GAAKJ,IAASO,EAAIL,EAAKE,EAAID,GAAOA,EAAKL,EACtD,EAAG,EAAG,GASuB,CAC9B,kCACA,yBACA,wDACA,mDACA,oFACA,yCACA,UAGCY,KAAM,MAEyB,CAChC,uCACA,2BACA,4DACA,kFACA,2CAGA,UACCA,KAAM,MAEyB,CAChC,6BACA,4CACA,2EACA,gDACCA,KAAM,MAoER,IAAIC,EAAmB,CACtB,WACA,cACA,MACA,cACA,eACA,eACA,iBAOGC,EAAoB,CACvB,SAAY,oBACZ,YAAe,uBACf,IAAO,eACP,YAAe,uBACf,aAAgB,wBAChB,aAAgB,wBAChB,cAAiB,wBACjB,iBAAoB,yBAKjBC,EAAW,oCAGf,SAASC,EAAiBC,GACzB,MAAM,oBAAN,OAA2BC,EAAuBD,GAAlD,6BAID,SAASC,EAAuBC,GAC/B,MAAM,KAAN,OAAYA,EAAZ,aAOD,SAASC,EAAgCtC,EAAUmC,GAElD,IAAII,EAAWJ,EACfnC,EAAS,GAAD,OAAImC,EAAJ,WAAuB,IAAI5B,KAAc,EAAE,GACnDP,EAAS,GAAD,OAAImC,EAAJ,WAAuB,IAAI5B,KACnCP,EAAS,GAAD,OAAImC,EAAJ,WAAuB,IAAI5B,KACnCP,EAAS,GAAD,OAAImC,EAAJ,aAAyB,EACjCnC,EAAS,GAAD,OAAImC,EAAJ,iBAA6B,WACpCzB,KAAK8B,eAAeJ,EAAuBG,IAAWE,MACrDzB,eACAN,KAAK,GAAL,OAAQ6B,EAAR,WAA0BG,EAC1BhC,KAAK,GAAL,OAAQ6B,EAAR,WAA0BI,EAC1BjC,KAAK,GAAL,OAAQ6B,EAAR,WAA0BG,EAC1BhC,KAAK,GAAL,OAAQ6B,EAAR,WAA0BI,EAC1BjC,KAAK,GAAL,OAAQ6B,EAAR,aACA7B,KAAK,GAAL,OAAQ6B,EAAR,WAA0BG,EAC1BhC,KAAK,GAAL,OAAQ6B,EAAR,WAA0BI,IAE1B7B,KAAKd,GAIO,SAAS4C,EAAsC5C,EAAU6C,GAEvE,GAAK7C,EAAS8C,0BAA4B,OAAO9C,EAEjDA,EAAS8C,2BAA4B,EAGrCD,EAAUA,GAAWd,EAMrB,IAJA,IAAIS,EAAiB,GACjBO,EAAiB,GACjBlC,EAAY,GAENmC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAO,CAE3C,IAAIb,EAAUU,EAASG,GAGvB,QAA6BrC,IAAxBX,EAAUmC,GAA0B,CAExCG,EAA+BtC,EAAUmC,GAEzC,IAAIe,EAAU,CAAET,MAAO,IAAIlC,KAAiB4C,KAAK,OAAQC,MAAO,YAChEF,EAAQT,MAAMzB,eAAiBA,EAAeF,KAAMoC,EAAQT,OAE5DD,EAAeJ,EAAuBD,IAAYe,EAIlD,IAAIG,EAASlB,EACTnC,EAASsD,qBAAmC,gBAAZnB,IACnCkB,EAAS,oBAEVxC,EAAU0C,KAAKpB,GAGf,IAAIqB,EAAYxB,EAAkBqB,GAG9BI,EAAezD,EAAS+C,gBAAkB/C,EAAS+C,eAAeS,IAAejD,KAAkBiD,GAGvGC,EAAcA,EAAYC,QAASzB,EAAWC,EAAiBC,IAK/DY,EAAgBS,GAAcC,GAuChC,OAhCA1D,EAAgBC,EAAU,iBAAkBwC,GAC5CzC,EAAgBC,EAAU,iBAAkB+C,GAExC/C,EAASY,wBAAuBZ,EAASY,sBAAwB,IAAI+C,GAEzE3D,EAASY,sBAAsBgD,YAAa,SAAC1D,EAAK2D,GAWjD,OAVK3D,EAAK4D,SAASC,aAAa7D,EAAK4D,SAASC,WAAa,IAC3D7D,EAAK4D,SAASC,WAAWjB,2BAA4B,EAErDjC,EAAUmD,SAAQ,SAAA7B,GACjBjC,EAAK,GAAD,OAAIiC,EAAJ,WAAuBnC,EAAS,GAAD,OAAImC,EAAJ,WAAqB8B,UACxD/D,EAAK,GAAD,OAAIiC,EAAJ,WAAuBnC,EAAS,GAAD,OAAImC,EAAJ,WAAqB8B,UACxD/D,EAAK,GAAD,OAAIiC,EAAJ,WAAuBnC,EAAS,GAAD,OAAImC,EAAJ,WAAqB8B,UACxD/D,EAAK,GAAD,OAAIiC,EAAJ,aAAyBnC,EAAS,GAAD,OAAImC,EAAJ,gBAG/BjC,GAELY,KAAKd,IAGRA,EAASY,sBAAsBsD,kBAC9B,SAAUhE,UACFA,EAAKiE,oBACLjE,EAAKkE,iBACLlE,EAAKmE,oBACLnE,EAAKoE,aAIdtE,EAASK,OAASA,EAAOS,KAAKd,GAEvBA,EAwER,SAAS2D,IACRjD,KAAK6D,iBAAmB,GACxB7D,KAAK8D,eAAiB,GC5WvB,SAASzE,EAAgBC,EAAUC,EAAUC,GAEvCF,EAAUC,GAEdE,OAAOC,OAAQJ,EAAUC,GAAYC,GAIrCF,EAAUC,GAAaC,EAOzB,SAASG,IACR,IAAIC,EAAMC,KAAeC,UAAUH,OAAOI,KACzCC,UACAC,EACAD,KAAKE,sBAAsBC,UAAUC,KAAKJ,KAAKE,wBAGhD,OADAF,KAAKE,sBAAsBG,eAAeN,KAAKC,KAAKE,sBAAsBN,GACnEA,EDyVRqD,EAAqBnD,UAAY,CAChCoD,YAAa,SAAUa,GACtB/D,KAAK6D,iBAAiBhB,KAAKkB,IAE5B5D,UAJgC,SAItBX,EAAM2D,GAEf,OADAnD,KAAK6D,iBAAiBP,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,MAC5BA,GAERa,eARgC,SAQjBb,GACdQ,KAAK8D,eAAeR,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,OAElCgE,iBAAkB,SAAUO,GAC3B/D,KAAK8D,eAAejB,KAAKkB,KChV3B,IA8BIE,EAA6B,CAChCC,sBA/B8B,CAC9B,kCACA,yBACA,wDACA,mDACA,oFACA,yCACA,UAGC9C,KAAM,MAsBP+C,sBApBgC,CAChC,uCACA,2BACA,4DACA,kFACA,2CAGA,UACC/C,KAAM,MAYPgD,yBAVgC,CAChC,6BACA,4CACA,2EACA,gDACChD,KAAM,OAQO,SAASiD,EAA+B/E,GAEtD,GADAgF,QAAQC,IAAI,SACPjF,EAASsD,oBAAsB,OAAOtD,EAE3CA,EAASsD,qBAAsB,EAI/B,IAAId,EAAiB,CACpB0C,SAAU,CAAEzC,OAAO,IAAIlC,KAAc4E,OAAQ,UAAYhC,KAAM,OAAQC,MAAO,YAC9EgC,WAAY,CAAE3C,MAAO,EAAGU,KAAM,QAASC,MAAO,YAC9CiC,cAAe,CAAE5C,MAAO,KAAMU,KAAM,YAAaC,MAAO,YACxDkC,YAAa,CAAE7C,MAAO,KAAMU,KAAM,YAAaC,MAAO,aAGnDL,EAAiB5C,OAAOC,OAAO,GAAGuE,GAKtC5E,EAAgBC,EAAU,iBAAkBwC,GAC5CzC,EAAgBC,EAAU,iBAAkB+C,GAC5ChD,EAAgBC,EAAU,UALZ,CAACuF,kBAAmB,YAO3BvF,EAASqE,oBACTrE,EAASmE,aAzBiD,eA6BvDlE,GAETE,OAAOqF,eAAgBxF,EAAUC,EAAU,CAC1CwF,IAAK,kBAAKjD,EAAgBvC,GAAWwC,OACrCZ,IAAK,SAAE6D,GAAF,OAASlD,EAAgBvC,GAAWwC,MAAQiD,MAJnD,IAAM,IAAIzF,KAAYuC,EAAkB,EAA9BvC,GASND,EAASY,wBAAuBZ,EAASY,sBAAwB,IAAI+C,IACzE,IAAIe,EAAI,SAASxE,EAAK2D,GAChB3D,EAAK4D,SAASC,aAAa7D,EAAK4D,SAASC,WAAa,IAC3D7D,EAAK4D,SAASC,WAAWT,qBAAsB,EAC/CpD,EAAKkF,WAAa1E,KAAK0E,WACvBlF,EAAKgF,SAAWxE,KAAKwE,SAASS,SAC3BjF,KAAK2E,eAAiB3E,KAAK2E,cAAcO,YAAW1F,EAAKmF,cAAgB3E,KAAK2E,cAAchF,OAAQwD,GAAOgC,OAC7G/E,KAAKd,GAMP,OAJAA,EAASY,sBAAsBgD,YAAYc,GAE3C1E,EAASK,OAASA,EAAOS,KAAKd,GAEvBA,EAwOR,SAAS2D,KACRjD,KAAK6D,iBAAmB,GACxB7D,KAAK8D,eAAiB,GC5WvB,SAASzE,GAAgBC,EAAUC,EAAUC,GAEvCF,EAAUC,GAEdE,OAAOC,OAAQJ,EAAUC,GAAYC,GAIrCF,EAAUC,GAAaC,EAOzB,SAASG,KACR,IAAIC,EAAMC,KAAeC,UAAUH,OAAOI,KACzCC,UACAC,EACAD,KAAKE,sBAAsBC,UAAUC,KAAKJ,KAAKE,wBAGhD,OADAF,KAAKE,sBAAsBG,eAAeN,KAAKC,KAAKE,sBAAsBN,GACnEA,EDyVRqD,GAAqBnD,UAAY,CAChCoD,YAAa,SAAUa,GACtB/D,KAAK6D,iBAAiBhB,KAAKkB,IAE5B5D,UAJgC,SAItBX,EAAM2D,GAEf,OADAnD,KAAK6D,iBAAiBP,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,MAC5BA,GAERa,eARgC,SAQjBb,GACdQ,KAAK8D,eAAeR,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,OAElCgE,iBAAkB,SAAUO,GAC3B/D,KAAK8D,eAAejB,KAAKkB,KChVI,CAC9B,kCACA,yBACA,wDACA,mDACA,oFACA,yCACA,UAGC3C,KAAM,MAEyB,CAChC,uCACA,2BACA,4DACA,kFACA,2CAGA,UACCA,KAAM,MAEyB,CAChC,6BACA,4CACA,2EACA,gDACCA,KAAM,MAqUR,SAAS6B,KACRjD,KAAK6D,iBAAmB,GACxB7D,KAAK8D,eAAiB,GC9YvB,SAASzE,GAAgBC,EAAUC,EAAUC,GAEvCF,EAAUC,GAEdE,OAAOC,OAAQJ,EAAUC,GAAYC,GAIrCF,EAAUC,GAAaC,EAOzB,SAASG,KACR,IAAIC,EAAMC,KAAeC,UAAUH,OAAOI,KACzCC,UACAC,EACAD,KAAKE,sBAAsBC,UAAUC,KAAKJ,KAAKE,wBAGhD,OADAF,KAAKE,sBAAsBG,eAAeN,KAAKC,KAAKE,sBAAsBN,GACnEA,ED2XRqD,GAAqBnD,UAAY,CAChCoD,YAAa,SAAUa,GACtB/D,KAAK6D,iBAAiBhB,KAAKkB,IAE5B5D,UAJgC,SAItBX,EAAM2D,GAEf,OADAnD,KAAK6D,iBAAiBP,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,MAC5BA,GAERa,eARgC,SAQjBb,GACdQ,KAAK8D,eAAeR,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,OAElCgE,iBAAkB,SAAUO,GAC3B/D,KAAK8D,eAAejB,KAAKkB,KClXI,CAC9B,kCACA,yBACA,wDACA,mDACA,oFACA,yCACA,UAGC3C,KAAM,MAEyB,CAChC,uCACA,2BACA,4DACA,kFACA,2CAGA,UACCA,KAAM,MAEyB,CAChC,6BACA,4CACA,2EACA,gDACCA,KAAM,MAkWR,SAAS6B,KACRjD,KAAK6D,iBAAmB,GACxB7D,KAAK8D,eAAiB,GAGvBb,GAAqBnD,UAAY,CAChCoD,YAAa,SAAUa,GACtB/D,KAAK6D,iBAAiBhB,KAAKkB,IAE5B5D,UAJgC,SAItBX,EAAM2D,GAEf,OADAnD,KAAK6D,iBAAiBP,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,MAC5BA,GAERa,eARgC,SAQjBb,GACdQ,KAAK8D,eAAeR,SAAQ,SAAAU,GAAC,OAAEA,EAAExE,OAElCgE,iBAAkB,SAAUO,GAC3B/D,KAAK8D,eAAejB,KAAKkB,K,sBCxavBqB,GAAY,IAEZC,GAAY,KAGVpG,GAAQ,GAMVqG,IAAY,EAoiCDC,G,kDAjiCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAoBNC,WAAa,WAEX,IAAMC,EAAQC,OAAOC,WACf1G,EAASyG,OAAOE,aAGrBP,KADGI,GAASxG,KAOZkG,GAAY,GACZC,GAAY,MAEZD,GAAY,IACZC,GAAY,MAGb,EAAKS,MAAQ,IAAIjG,KAEpB,EAAKkG,gBAAkB,IAAIlG,KAE3B,EAAKmG,OAAS,EACd,EAAKC,OAAS,EAEd,EAAKC,QAAU,EACf,EAAKC,QAAU,EAEZ,EAAKC,MAAQ,IAAIvG,IAEpB,EAAKwG,OAAS,IAAIxG,KAAyB,GAAI8F,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KAC1F,EAAKQ,OAAOC,SAASC,EAAI,KAMtB,IAAIC,EAAQ,IAAI3G,IAAwB,SAAS,GACpD2G,EAAMF,SAASnF,IAAK,IAAK,IAAK,KAa9B,EAAK2E,MAAMW,IAAID,GAEf,IAAIE,EAAU,IAAI7G,IAAoB,SACtC,EAAKiG,MAAMW,IAAKC,GAGb,EAAKC,SAAW,IAAI9G,KACpB,EAAK8G,SAASC,yBAA0B,EAExC,EAAKD,SAASE,eAAiBhH,KAG/B,EAAK8G,SAASG,cAAenB,OAAOoB,kBACvC,EAAKJ,SAASK,QAASrB,OAAOC,WAAYD,OAAOE,aAEjD,EAAKoB,YAAc,IAAIC,KAAY,EAAKP,SAAU,EAAKZ,gBAAiB,EAAKM,QAG7E,EAAKc,MAAQ,IAAIC,IAWjB,EAAKC,aAAe,GACpB,EAAKC,YAAc,GAInB,IAAMC,EAA2B,EAAZnC,GACrB,EAAKoC,YAAc,CAClB,IAAIC,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,IAElB,EAAKG,qBAAuB,GAE5B,EAAKC,aAAe,CACnB,IAAIF,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,IAElB,EAAKK,sBAAwB,GAE7B,EAAKC,aAAe,CACnB,IAAIJ,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,IAElB,EAAKO,sBAAwB,GAE7B,EAAKC,aAAe,CACnB,IAAIN,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,IAElB,EAAKS,sBAAwB,GAE7B,EAAKC,aAAe,CACnB,IAAIR,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,GACjB,IAAIE,aAAaF,IAElB,EAAKW,sBAAwB,GAIzB5C,IACA,EAAK6C,+BAA+B,IAAI,IAAI,IAAI,IAAI,EAAKX,YAAY,EAAKE,qBAAqB,EAAKU,KAAM,GAE7G,EAAKD,+BAA+B,IAAI,IAAI,IAAI,GAAG,EAAKR,aAAa,EAAKC,sBAAsB,EAAKS,MAAO,GAE5G,EAAKF,+BAA+B,IAAI,IAAI,IAAI,IAAI,EAAKN,aAAa,EAAKC,sBAAsB,EAAKQ,MAAO,GAE7G,EAAKH,+BAA+B,IAAI,IAAI,GAAG,IAAI,EAAKJ,aAAa,EAAKC,sBAAsB,EAAKO,MAAO,KAEzG,EAAKJ,+BAA+B,IAAI,IAAI,IAAI,IAAI,EAAKX,YAAY,EAAKE,qBAAqB,EAAKU,KAAM,GAE7G,EAAKD,+BAA+B,IAAI,IAAI,IAAI,IAAI,EAAKR,aAAa,EAAKC,sBAAsB,EAAKS,MAAO,GAE7G,EAAKF,+BAA+B,IAAI,IAAI,IAAI,IAAI,EAAKN,aAAa,EAAKC,sBAAsB,EAAKQ,MAAO,GAE7G,EAAKH,+BAA+B,IAAI,EAAE,IAAI,IAAI,EAAKJ,aAAa,EAAKC,sBAAsB,EAAKO,MAAO,IAG5G,EAAKC,cACL,EAAKC,WAGL,EAAKC,WACL,EAAKC,YACL,EAAKC,qBAEF,EAAKC,GAAGC,YAAY,EAAKnC,SAASoC,YAElCC,SAASC,iBAAkB,YAAa,EAAKC,qBAAqB,IAlLlD,EAqLlBR,SAAW,WAEV,IAAIS,EAAM,eAEZ,EAAKC,OAAS,IAAIC,IAClB,IAAMC,EAAc,IAAIC,IACxBD,EAAYE,eAAgB,sCAC5B,EAAKJ,OAAOK,eAAeH,GAC3B,IAAMI,EAAY,IAAIC,IACtB,EAAKP,OAAOQ,aAAaF,GAEzB,IAAIG,EAAgBC,YAAYC,MAChC,EAAKX,OAAOY,KAAM,sBAAsB,SAAUxK,GAEjD2J,EAAOc,KAAOzK,EAEd,IAAI0K,EAASf,EAAOc,KAAKnE,MAEzBxB,QAAQ6F,KAAM,eAAkBL,YAAYC,MAAQF,GAAgBO,QAAS,GAAM,QAEnFF,EAAOG,UAAU,SAAUC,GAErBA,EAAKhL,WAAcgL,EAAKhL,SAASiL,wBAClCD,EAAKhL,SAASkL,uBAA6CvK,IAAzBqK,EAAKhL,SAASmL,UAEnDH,EAAKhL,SAASmL,OAAStB,EAAOsB,OAC9BH,EAAKhL,SAASoL,aAAc,MAK9BR,EAAOG,UAAU,SAAWC,OAK5BJ,EAAOvJ,SAASsB,GAAKlB,KAAK4J,GAC1BxB,EAAOrD,MAAMW,IAAKyD,GAGlB,IAAIU,EAAQvF,GACZ8D,EAAO0B,SAAWX,EAAOY,SAAS,GAClC3B,EAAO0B,SAASE,eAAgB,EAEhC5B,EAAO0B,SAASG,SAASJ,MAAMA,EAAMA,EAAMA,GAE3CzB,EAAO8B,aAAe9B,EAAO0B,SAASvL,SACtC4C,EAAqCiH,EAAO8B,cAE5C9B,EAAO+B,8BAA8B/B,EAAO0B,SAAS,GACrD1B,EAAOgC,QAAQ,GAAKhC,EAAO0B,gBAGzB5K,GAAW,SAAWmL,GAExB9G,QAAQ8G,MAAOA,OA5OG,EAkPlBzC,UAAY,WAEX,IAAIQ,EAAM,eAEZ,EAAKC,OAAS,IAAIC,IAClB,IAAMC,EAAc,IAAIC,IACxBD,EAAYE,eAAgB,sCAC5B,EAAKJ,OAAOK,eAAeH,GAC3B,IAAMI,EAAY,IAAIC,IACtB,EAAKP,OAAOQ,aAAaF,GAEzB,IAAIG,EAAgBC,YAAYC,MAChC,EAAKX,OAAOY,KAAM,0BAA0B,SAAUxK,GAErD2J,EAAOkC,MAAQ7L,EAEf,IAAI0K,EAASf,EAAOkC,MAAMvF,MAE1BxB,QAAQ6F,KAAM,eAAkBL,YAAYC,MAAQF,GAAgBO,QAAS,GAAM,QAEnFF,EAAOG,UAAU,SAAUC,GAErBA,EAAKhL,WAAcgL,EAAKhL,SAASiL,wBAClCD,EAAKhL,SAASkL,uBAA6CvK,IAAzBqK,EAAKhL,SAASmL,UAEnDH,EAAKhL,SAASmL,OAAStB,EAAOsB,OAC9BH,EAAKhL,SAASoL,aAAc,MAK9BR,EAAOG,UAAU,SAAWC,OAK5BJ,EAAOvJ,SAASsB,GAAKlB,KAAK4J,GAC1BxB,EAAOrD,MAAMW,IAAKyD,GAGlB,IAAIU,EAAQvF,GACZ8D,EAAOmC,UAAYpB,EAAOY,SAAS,GACnC3B,EAAOmC,UAAUP,eAAgB,EACjC5B,EAAOmC,UAAUN,SAASJ,MAAMA,EAAMA,EAAMA,GAE5CzB,EAAOgC,QAAQ,GAAKhC,EAAOmC,UAE3BnC,EAAOoC,cAAgBpC,EAAOmC,UAAUhM,SACxC4C,EAAqCiH,EAAOoC,eAC5CpC,EAAO+B,8BAA8B/B,EAAOmC,UAAW,UAIrDrL,GAAW,SAAWmL,GAExB9G,QAAQ8G,MAAOA,OAzSG,EA+SnB5C,YAAc,WAEb,IAAIW,EAAM,eAEV,EAAKqC,SAAU,IAAI3L,MAAsBmK,KAAM,iCAC/C,EAAKwB,QAAQC,MAAQ,EAAKD,QAAQE,MAAQ7L,KAC1C,EAAK2L,QAAQG,KAAO,UAMpB,EAAKC,UAAW,IAAI/L,MAAsBmK,KAAM,gCAChD,EAAK4B,SAASH,MAAQ,EAAKG,SAASF,MAAQ7L,KAC5C,EAAK+L,SAASD,KAAO,WAErB,EAAKE,UAAW,IAAIhM,MAAsBmK,KAAM,kCAChD,EAAK6B,SAASJ,MAAQ,EAAKI,SAASH,MAAQ7L,KAC5C,EAAKgM,SAASF,KAAO,WAErB,EAAKG,UAAW,IAAIjM,MAAsBmK,KAAM,6BAChD,EAAK8B,SAASL,MAAQ,EAAKK,SAASJ,MAAQ7L,KAC5C,EAAKiM,SAASH,KAAO,WAErB,EAAKI,UAAW,IAAIlM,MAAsBmK,KAAM,kCAChD,EAAK+B,SAASN,MAAQ,EAAKM,SAASL,MAAQ7L,KAC5C,EAAKkM,SAASJ,KAAO,WAErB,EAAKlB,QAAS,IAAI5K,MAAsBmK,KAAM,yBAAyB,SAAWwB,GAEjFA,EAAQQ,QAAUnM,IAClB2L,EAAQS,SAAWpM,KACdsJ,EAAOf,OAAOe,EAAO7J,SAASoL,aAAc,GAC5CvB,EAAO0B,WAAW1B,EAAO8B,aAAaP,aAAc,GACpDvB,EAAOmC,YAAYnC,EAAOoC,cAAcb,aAAc,MAI5D,EAAKD,OAAOkB,KAAO,UArVD,EAwVnBlD,SAAW,WAEV,EAAKnJ,SAAW+E,EACf,IAAIxE,KAA2B,CAG9B4K,OAAQ,EAAKA,OACbyB,IAAK,EAAKH,YAGZ,EAAKI,UAAY9H,EAChB,IAAIxE,KAA2B,CAG9B4K,OAAQ,EAAKA,OACbyB,IAAK,EAAKV,WAGZ,EAAKY,UAAY/H,EAChB,IAAIxE,KAA2B,CAG9B4K,OAAQ,EAAKA,OACbyB,IAAK,EAAKN,YAGZ,EAAKS,UAAYhI,EAChB,IAAIxE,KAA2B,CAG9B4K,OAAQ,EAAKA,OACbyB,IAAK,EAAKL,YAGZ,EAAKS,UAAYjI,EAChB,IAAIxE,KAA2B,CAG9B4K,OAAQ,EAAKA,OACbyB,IAAK,EAAKJ,YAIZ5J,EAAqC,EAAK5C,UAG1C,EAAK8I,KAAO,IAAIvI,KAAW,IAAIA,KAA2B,GAAI,EAAKP,UACnE,EAAK+I,MAAQ,IAAIxI,KAAW,IAAIA,KAA2B,GAAI,EAAKsM,WACpE,EAAK7D,MAAQ,IAAIzI,KAAW,IAAIA,KAA2B,GAAI,EAAKuM,WACpE,EAAK7D,MAAQ,IAAI1I,KAAW,IAAIA,KAA2B,GAAI,EAAKwM,WACpE,EAAKE,MAAQ,IAAI1M,KAAW,IAAIA,KAA2B,GAAI,EAAKyM,WAEpE,EAAKnB,QAAU,CAAC,EAAK/C,KAAM,EAAKC,MAAO,EAAKC,MAAO,EAAKC,MAAM,EAAKgE,OAEnE,EAAKnE,KAAK9I,SAASoL,aAAc,EACjC,EAAKrC,MAAM/I,SAASoL,aAAc,EAClC,EAAKpC,MAAMhJ,SAASoL,aAAc,EAClC,EAAKnC,MAAMjJ,SAASoL,aAAc,EAClC,EAAK6B,MAAMjN,SAASoL,aAAc,EAClC,EAAK5E,MAAMW,IAAI,EAAK2B,MAEpB,EAAKtC,MAAMW,IAAI,EAAK4B,OAEpB,EAAKvC,MAAMW,IAAI,EAAK6B,OACpB,EAAKxC,MAAMW,IAAI,EAAK8B,OACpB,EAAKgE,MAAM5L,SAASsB,GAAKlB,KAAK4J,GAC9B,EAAK7E,MAAMW,IAAI,EAAK8F,OAUpB,EAAKjN,SAASqF,cAAgB,EAAK6G,QAInC,EAAKN,8BAA8B,EAAK9C,KAAK,GAC7C,EAAK8C,8BAA8B,EAAK7C,MAAM,GAC9C,EAAK6C,8BAA8B,EAAK5C,MAAM,GAI9C,EAAK4C,8BAA8B,EAAK3C,MAAM,GAC9C,EAAK2C,8BAA8B,EAAKqB,MAAM,IA/a5B,EAybnBpE,+BAAiC,SAACqE,EAAKC,EAAMC,EAAOC,EAAQC,EAAOC,EAAUC,EAAUC,GAQpF,IAJA,IAAMC,EAAqB,GACrBC,EAAa,GAGT3K,EAAI,EAAGA,GAFG,EAEeA,IAElC2K,EAAWpK,KAAM,GAIlB,IAAM,IAAIP,EAAI,EAAWA,EAAJ,GAAWA,IAAO,CAEtC0K,EAAmBnK,KAClB,IAAIhD,KACHkB,KAAKmM,SAAWV,EAAMC,EACtB1L,KAAKmM,SAAWV,EAAME,EACtB3L,KAAKmM,SAAWV,EAAMG,GACrB,MAIH,IAAMQ,GAAS7K,EAAI,GAAN,EACb2K,EAAWpK,KAAMhD,KAAgBuN,MAAOD,EAAM,EAAG,IAmBpD,IAfE,IAGEE,EAHiB,IAAIC,KAxBH,EAwB4BL,EAAYD,GAGnCO,gBAAiBnI,IAExCoI,EAAU,IAAI/F,aAA0B,EAAZrC,IAC5BqI,EAAS,IAAIhG,aAA0B,EAAZrC,IAG3B+D,EAAM,eAENuE,EAAS,GACTC,EAAS,GACTC,EAAS,GAEHtL,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAE7C,IACIwL,EADA5D,EAAS,IAAIrK,KAAW,IAAIA,KAA2B,KAG3DqK,EAAO6D,SAASC,MAAQ1L,EAExB,IAAI0L,EAAQ,EAAI1L,EAGhBkL,EAASQ,GAAUX,EAAW/K,GAAIN,EAClCwL,EAASQ,EAAQ,GAAMX,EAAW/K,GAAIL,EACtCuL,EAASQ,EAAQ,GAAMX,EAAW/K,GAAIiE,EAEtC2D,EAAO5D,SAAStE,EAAIqL,EAAW/K,GAAIN,EACnCkI,EAAO5D,SAASrE,EAAIoL,EAAW/K,GAAIL,EACnCiI,EAAO5D,SAASC,EAAI8G,EAAW/K,GAAIiE,EAQnCkH,EAAQnL,GAAM,EAAI,GAAMvB,KAAKG,IA3gBhB,GA2gBiCH,KAAK4J,GAAKrI,EAAI8C,IAC5D8E,EAAOU,MAAM5I,EAAIyL,EAAQnL,GACzB4H,EAAOU,MAAM3I,EAAIwL,EAAQnL,GACzB4H,EAAOU,MAAMrE,EAAIkH,EAAQnL,GAEzB,EAAKyD,gBAAgBU,IAAKyD,GAE1BA,EAAO+D,OAAS,UAEhB/D,EAAOgE,GAAG,SACR,SAASC,GACRhF,EAAOiF,eAAeD,EAAIhF,EAAOgC,QAAQ4B,EAAE,OAM9C7C,EAAOgE,GAAG,aACT,SAASC,GACRhF,EAAOkF,QAAQF,EAAIhF,EAAOgC,QAAQ4B,EAAE,OAItC7C,EAAOgE,GAAG,YAAY,SAASC,GAC7BhF,EAAOmF,SAASH,EAAIhF,EAAOgC,QAAQ4B,EAAE,OAGhC,GAAHA,KACHe,EAAU5D,EAAOqE,SAETjI,SAAStE,IAAM,EACvB8L,EAAQxH,SAASC,IAAM,EAGvBmH,EAAO7K,KAAKiL,GACZA,EAAQG,OAAS,UAEjBH,EAAQI,GAAG,SACV,SAASC,GACRhF,EAAOiF,eAAeD,EAAIhF,EAAOgC,QAAQ,OAI3C2C,EAAQI,GAAG,aACV,SAASC,GACRhF,EAAOkF,QAAQF,EAAIhF,EAAOgC,QAAQ,OAIpC2C,EAAQI,GAAG,YAAY,SAASC,GAC9BhF,EAAOmF,SAASH,EAAIhF,EAAOgC,QAAQ,QAI/B,GAAH4B,KACHe,EAAU5D,EAAOqE,SAETjI,SAAStE,IAAM,EACvB8L,EAAQxH,SAASC,IAAM,EACvBoH,EAAO9K,KAAKiL,GAGZA,EAAQG,OAAS,UACjBH,EAAQI,GAAG,SACV,SAASC,GACRhF,EAAOiF,eAAeD,EAAIhF,EAAOgC,QAAQ,OAI3C2C,EAAQI,GAAG,aACV,SAASC,GACRhF,EAAOkF,QAAQF,EAAIhF,EAAOgC,QAAQ,OAIpC2C,EAAQI,GAAG,YAAY,SAASC,GAC9BhF,EAAOmF,SAASH,EAAIhF,EAAOgC,QAAQ,QAI/B,GAAH4B,KACHe,EAAU5D,EAAOqE,SAETjI,SAAStE,IAAM,EACvB8L,EAAQxH,SAASC,IAAM,EACvBqH,EAAO/K,KAAKiL,GAGZA,EAAQG,OAAS,UACjBH,EAAQI,GAAG,SACV,SAASC,GACRhF,EAAOiF,eAAeD,EAAIhF,EAAOgC,QAAQ,OAI3C2C,EAAQI,GAAG,aACV,SAASC,GACRhF,EAAOkF,QAAQF,EAAIhF,EAAOgC,QAAQ,OAIpC2C,EAAQI,GAAG,YAAY,SAASC,GAC9BhF,EAAOmF,SAASH,EAAIhF,EAAOgC,QAAQ,QAMtCjB,EAAOsE,oBASR,IAASlM,EAAI,EAAGA,EAAG,IAAKA,IACvB,EAAKyD,gBAAgBU,IAAImH,EAAOtL,IAEjC,IAASA,EAAI,EAAGA,EAAG,IAAKA,IACvB,EAAKyD,gBAAgBU,IAAIiH,EAAOpL,IAEjC,IAASA,EAAI,EAAGA,EAAG,IAAKA,IACvB,EAAKyD,gBAAgBU,IAAIkH,EAAOrL,IAIjC,EAAKyD,gBAAgByI,mBAAkB,GAGvC,EAAKC,yBAA2B,IAAI5O,IAAgC2N,EAAS,GAC7E,EAAKkB,wBAA0B,IAAI7O,IAAgC4N,EAAQ,GAG3E,EAAKpG,aAAa0F,EAAE,GAAK,EAAK0B,yBAC9B,EAAKnH,YAAYyF,EAAE,GAAK,EAAK2B,yBAtoBX,EA0oBnBxD,8BAAgC,SAAC9C,EAAK2E,GAGrC,IAFA,IAAI4B,EAAU,IAAIlH,aAAcrC,IAEtB9C,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IACtCqM,EAAQrM,GAAKA,EAAI8C,GAGlBgD,EAAK4C,SAAS4D,aAAa,SAAU,IAAI/O,IAAgC8O,EAAS,IAElF,IAAIE,EAAQ,CAAE9M,MAAO,EAAGU,KAAM,QAASC,MAAO,UAC9C0F,EAAK9I,SAASyO,SAASc,MAAQA,EAG/BpP,OAAOqF,eAAesD,EAAK9I,SAAU,OAAQ,CAC5CyF,IAAI,kBAAI8J,EAAM9M,OACdZ,IAAI,SAAA6D,GAAC,OAAE6J,EAAM9M,MAAQiD,KAEtB,IAAI8J,EAAS,CAAE/M,MAAO,IAAKU,KAAM,QAASC,MAAO,UACjD0F,EAAK9I,SAASyO,SAASe,OAASA,EAGhCrP,OAAOqF,eAAesD,EAAK9I,SAAU,QAAS,CAC7CyF,IAAI,kBAAI+J,EAAO/M,OACfZ,IAAI,SAAA6D,GAAC,OAAE8J,EAAO/M,MAAQiD,KAGvB,IAAI+J,EAAY,CAAEhN,OAAO,EAAOU,KAAM,WACtChD,OAAOqF,eAAesD,EAAM,WAAY,CACvCrD,IAAI,kBAAIgK,EAAUhN,OAClBZ,IAAI,SAAA6D,GAAC,OAAE+J,EAAUhN,MAAQiD,KD1Zb,SAAgD1F,GAE9D,GAAIA,EAAS0P,yBAA2B,OAAO1P,EAE/CA,EAAS0P,0BAA2B,EAKpC,IAAI3M,EAAiB,CAEpB4M,aAAa,WAAD,OACTpP,KAAkBoP,aADT,mBAhBkB,4IAgBlB,WAiBb3P,EAAS4P,gBAAkB,SAAAC,GAE1BA,EAAOC,SAASP,MAAQvP,EAASyO,SAASc,MAC1CM,EAAOC,SAASN,OAASxP,EAASyO,SAASe,OAC3CK,EAAOE,aAAP,ovDA4EDhQ,GAAgBC,EAAU,iBAAkB+C,GAExC/C,EAASY,wBAAuBZ,EAASY,sBAAwB,IAAI+C,IAEzE3D,EAASY,sBAAsBgD,aAAY,SAAC1D,GACtCA,EAAK4D,SAASC,aAAa7D,EAAK4D,SAASC,WAAa,IAC3D7D,EAAK4D,SAASC,WAAW2L,0BAA2B,KAGrD1P,EAASK,OAASA,GAAOS,KAAKd,GC0S7BgQ,CAAsClH,EAAK9I,UAE3C8I,EAAKmH,oBFjaQ,SAA+CjQ,GAE7D,GAAIA,EAAS0P,yBAA2B,OAAO1P,EAE/CA,EAAS0P,0BAA2B,EAKpC,IAAI3M,EAAiB,CAEpB4M,aAAa,WAAD,OACTpP,KAAkBoP,aADT,mBAhBkB,4IAgBlB,WAgFb,OA/DA3P,EAAS4P,gBAAkB,SAAAC,GAE1BA,EAAOC,SAASP,MAAQvP,EAASyO,SAASc,MAC1CM,EAAOE,aAAP,0rCAiDDhQ,GAAgBC,EAAU,iBAAkB+C,GAExC/C,EAASY,wBAAuBZ,EAASY,sBAAwB,IAAI+C,IAEzE3D,EAASY,sBAAsBgD,aAAY,SAAC1D,GACtCA,EAAK4D,SAASC,aAAa7D,EAAK4D,SAASC,WAAa,IAC3D7D,EAAK4D,SAASC,WAAW2L,0BAA2B,KAGrD1P,EAASK,OAASA,GAAOS,KAAKd,GAEvBA,EEsUqBkQ,CAC1B,IAAI3P,KAAwB,CAAE4P,aAAc5P,QAE7CuI,EAAK9I,SAASoL,aAAc,EAE5BtC,EAAK4C,UAAW,IAAInL,KAAgC6P,KAAKtH,EAAK4C,UAE9D5C,EAAK4C,SAAS2E,cAAgBvK,GAG9BgD,EAAK4C,SAAS4E,aAAc,iBAAkB,EAAKvI,aAAa0F,EAAE,IAClE3E,EAAK4C,SAAS4E,aAAc,gBAAiB,EAAKtI,YAAYyF,EAAE,IAKhE3E,EAAKmH,oBAAoBxB,SAAW,CAAEc,MAAOzG,EAAK9I,SAASyO,SAASc,QA9rBlD,EAmsBlB3F,oBAAsB,SAAE2G,GAEtB,IAAIC,EAAcnK,OAAOC,WAAa,EAClCmK,EAAcpK,OAAOE,YAAc,EACnCmK,EAAO,eACPA,EAAQhK,QAAW6J,EAAMI,QAAUH,GAAgB,EACnDE,EAAQ/J,QAAW4J,EAAMK,QAAUH,GAAgB,GAzsBvC,EAgtBlB1B,QAAU,SAACF,EAAIgC,KAhtBG,EAwtBnB7B,SAAW,SAACH,EAAIgC,KAxtBG,EAguBnB/B,eAAiB,SAACD,EAAIgC,GAEjBA,GAIH,EAAKC,SAAS,CACVC,QAAS,aAvuBI,EA6uBlBzH,mBAAqB,WAGrB,EAAK1C,QAAwB,KAAd,EAAKF,OACpB,EAAKG,QAAwB,KAAd,EAAKF,OAEpB,IAAIqK,EAAgC,IAAxB,EAAKlK,MAAMmK,WAAoB,EAC3C,GAAK,EAAKnI,KAAO,CAEhB,EAAKA,KAAKzH,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKkC,KAAKzH,SAASsB,GACnE,EAAKmG,KAAKzH,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKiC,KAAKzH,SAASqB,GAEnE,EAAKoG,KAAK9I,SAASkR,MAAQF,EACxB,EAAKlI,KAAKqI,SAcb,EAAKrI,KAAK9I,SAASyO,SAASc,MAAM9M,MAAQ,EAAKqG,KAAK9I,SAASkR,KAE7D,EAAKpI,KAAK9I,SAASoL,aAAc,EAIlC,IAAM,IAAIpI,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAE7C,IAAI4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,GAGvCoO,EAAK,IAAM,EAAK3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKvC,KAAK9I,SAASkR,MAChEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAEjBxG,EAAOsE,qBAWR,GAAK,EAAKjG,MAAQ,CAEjB,EAAKA,MAAM5H,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKqC,MAAM5H,SAASsB,GACrE,EAAKsG,MAAM5H,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKoC,MAAM5H,SAASqB,GAErE,EAAKuG,MAAMjJ,SAASkR,MAAQF,EAC5B,EAAK/H,MAAMjJ,SAASyO,SAASc,MAAM9M,MAAQ,EAAKwG,MAAMjJ,SAASkR,KAC/D,EAAKjI,MAAMjJ,SAASoL,aAAc,EAGnC,IAAUpI,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAEzC4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAY,EAAV8C,IAGzCsL,EAAK,IAAM,EAAK3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKpC,MAAMjJ,SAASkR,MACjEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAEjBxG,EAAOsE,qBAWR,GAAK,EAAKjC,MAAQ,CAEjB,EAAKA,MAAM5L,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKqG,MAAM5L,SAASsB,GACrE,EAAKsK,MAAM5L,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKoG,MAAM5L,SAASqB,GACrE,EAAKuK,MAAM5L,SAASsB,EAAI,EAAKqG,MAAM3H,SAASsB,EAAIlB,KAAK4J,GACrD,EAAK4B,MAAMjN,SAASkR,MAAQF,EAC5B,EAAK/D,MAAMjN,SAASyO,SAASc,MAAM9M,MAAQ,EAAKwK,MAAMjN,SAASkR,KAC/D,EAAKjE,MAAMjN,SAASoL,aAAc,EAGnC,IAAUpI,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAEzC4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAY,EAAV8C,IAGzCsL,EAAK,IAAM,EAAK3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAK4B,MAAMjN,SAASkR,MACjEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAIjBxG,EAAOsE,qBAWR,GAAK,EAAKnG,MAAQ,CAEjB,EAAKA,MAAM1H,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKmC,MAAM1H,SAASsB,GACrE,EAAKoG,MAAM1H,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKkC,MAAM1H,SAASqB,GAErE,EAAKqG,MAAM/I,SAASkR,MAAQF,EAC5B,EAAKjI,MAAM/I,SAASyO,SAASc,MAAM9M,MAAQ,EAAKsG,MAAM/I,SAASkR,KAC/D,EAAKnI,MAAM/I,SAASoL,aAAc,EAGnC,IAAUpI,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAEzC4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAE8C,IAGzCsL,EAAK,IAAM,EAAK3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKtC,MAAM/I,SAASkR,MACjEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAEjBxG,EAAOsE,qBAWR,GAAK,EAAKlG,MAAQ,CAEjB,EAAKA,MAAM3H,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKoC,MAAM3H,SAASsB,GACrE,EAAKqG,MAAM3H,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKmC,MAAM3H,SAASqB,GAErE,EAAKsG,MAAMhJ,SAASkR,MAAQF,EAC5B,EAAKhI,MAAMhJ,SAASyO,SAASc,MAAM9M,MAAQ,EAAKuG,MAAMhJ,SAASkR,KAC/D,EAAKlI,MAAMhJ,SAASoL,aAAc,EAGnC,IAAUpI,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAEzC4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAY,EAAV8C,IAGzCsL,EAAK,IAAM,EAAK3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKrC,MAAMhJ,SAASkR,MACjEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAEjBxG,EAAOsE,qBAYR,GAAK,EAAK3D,SAAW,CAEpB,EAAKA,SAASlK,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAK2E,SAASlK,SAASsB,GAC3E,EAAK4I,SAASlK,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAK0E,SAASlK,SAASqB,GAE3E,EAAK6I,SAASvL,SAASkR,MAAQF,EAE/B,IAAUhO,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAE1C4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAY,EAAV8C,IAGzCsL,EAAK,IAAM,IAAM3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKE,SAASvL,SAASkR,MACrEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EACjBxG,EAAOvJ,SAASsB,GAAKlB,KAAK4J,GAE1BT,EAAOsE,qBAUR,GAAK,EAAKlD,UAAY,CAErB,EAAKA,UAAU3K,SAASsB,GAAK,KAAS,EAAKiE,QAAU,EAAKoF,UAAU3K,SAASsB,GAC7E,EAAKqJ,UAAU3K,SAASqB,GAAK,KAAS,EAAKmE,QAAU,EAAKmF,UAAU3K,SAASqB,GAE7E,EAAKsJ,UAAUhM,SAASkR,MAAQF,EAEhC,IAAUhO,EAAI,EAAGuL,EAAIzI,GAAW9C,EAAIuL,EAAGvL,IAAO,CAE1C4H,EAAS,EAAKnE,gBAAgB+E,SAASxI,EAAY,EAAV8C,IAGzCsL,EAAK,IAAM,IAAM3P,KAAKG,IAAK,GAAKH,KAAK4J,GAAK,EAAKW,UAAUhM,SAASkR,MACtEtG,EAAOU,MAAM5I,EAAI0O,EACjBxG,EAAOU,MAAM3I,EAAIyO,EACjBxG,EAAOU,MAAMrE,EAAImK,EAEjBxG,EAAOsE,qBAUL,EAAK7H,SAASgK,OAAO,EAAK7K,MAAO,EAAKO,QACtC,EAAKc,MAAMyJ,MAKZ,EAAKC,UAAYlL,OAAOmL,sBAAsB,EAAKlI,qBA/9BnC,EAm+BlBmI,YAAc,WACbzM,QAAQC,IAAI,OACZ,EAAK6L,SAAS,KAr+BG,EA0+BlBY,mBAAqB,WACnB,IAAMtL,EAAQ,EAAKmD,GAAGoI,YAChB/R,EAAS,EAAK2J,GAAGqI,aAEnB5L,IACHF,GAAY,GACZC,GAAY,MAEZD,GAAY,IACZC,GAAY,MAIb,EAAKsB,SAASK,QAAQtB,EAAOxG,GAC7B,EAAKmH,OAAO8K,OAASzL,EAAQxG,EAI7B,EAAKmH,OAAO+K,0BA1/BX,EAAKC,MAAQ,CACXhB,QAAQ,QAHK,E,gEAQhBrQ,KAAKyF,aAGLE,OAAOsD,iBAAiB,SAAUjJ,KAAKgR,sB,6CAIvCrL,OAAO2L,oBAAoB,SAAUtR,KAAKgR,oBAC1CrL,OAAO4L,qBAAqBvR,KAAK6Q,a,+BA++BzB,IAAD,OAEP,OAAO,6BACP,yBAAK5R,MAAOA,GAAOuS,IAAK,SAAAA,GAAG,OAAK,EAAK3I,GAAK2I,KAE1C,yBAAKC,QAASzR,KAAK+Q,YAAaW,UAAU,QAAQzS,MAAO,CAACoR,QAAQrQ,KAAKqR,MAAMhB,QAAQ/J,SAAS,QAAQqL,IAAI,MAAMC,KAAK,MAAMlM,MAAMC,OAAOC,WAAW,KAAK1G,OAAOyG,OAAOE,YAAY,KAAMgM,WAAW,uBACnM,yBAAKH,UAAU,aAAY,yBAAKI,IAAI,iCAAiCJ,UAAU,cAE/E,yBAAKA,UAAU,YAAf,QACQ,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cACxF,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cAChF,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cAE9E,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cAClF,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cAEhF,yBAAKA,UAAU,cAAa,yBAAKI,IAAI,iCAAiCJ,UAAU,cAChF,yBAAKA,UAAU,cAAf,QACI,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SAAf,QACA,4BAAQA,UAAU,aAAahM,MAAyB,GAAlBC,OAAOC,WAAgB1G,OAA2B,IAAnByG,OAAOE,YAAkBiM,IAAI,0DAA0DC,YAAY,IAAIC,MAAM,yEAAyEC,iBAAe,KAI9Q,yBAAKP,UAAU,QAAO,0BAAMA,UAAU,UAAhB,moBAEtB,yBAAKA,UAAU,WAAf,YACA,yBAAKA,UAAU,YAAf,kB,GA3hCqBtS,aCEV8S,GApBLC,IAAY,CAClBxB,OAAQ,WAAa,IAAD,EACpB,OACE,kBAAC,IAAD,KACE,yBAAKyB,GAAG,MAAMV,UAAU,MAAMzS,MAAO,CAACoT,OAAO,WAAYnT,OAAO,UAC9D,kBAAC,WAAD,KACI,kBAACoT,EAAA,EAAD,KACA,kBAACC,EAAA,GAAD,GAAOC,OAAK,EAACC,KAAK,KAAlB,kDAAoC,kBAEhC,kBAAC,GAAD,SAFJ,WCZMC,QACW,cAA7B/M,OAAOgN,SAASC,UAEe,UAA7BjN,OAAOgN,SAASC,UAEhBjN,OAAOgN,SAASC,SAASC,MACvB,2DCZNC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,GAAD,OAEF/J,SAASgK,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnI,GACL9G,QAAQ8G,MAAMA,EAAMoI,c","file":"static/js/main.3c027812.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AsciiEffect } from 'three/examples/jsm/effects/AsciiEffect.js';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nvar angle = 0;\nvar radiusL = 32;\nvar radiusS = 14; \n\nconst style = {\n  height: 5400 // we can control scene size by setting container dimensions\n};\n\nvar params = {\n\tenvMap: 'HDR',\n\troughness: 0.0,\n\tmetalness: 0.0,\n\texposure: 1.0,\n\tnodes: true,\n\tanimate: true,\n\tdebug: false\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar torusMesh, planeMesh;\nvar generatedCubeRenderTarget, ldrCubeRenderTarget, hdrCubeRenderTarget, rgbmCubeRenderTarget;\nvar ldrCubeMap, hdrCubeMap, rgbmCubeMap;\n\nclass Placenta extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    \n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  getEnvScene = () => {\n\n\t\tvar envScene = new THREE.Scene();\n\n\t\tvar geometry = new THREE.BoxBufferGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\n\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\n\t\troom.scale.setScalar( 10 );\n\t\tenvScene.add( room );\n\n\t\tvar mainLight = new THREE.PointLight( 0xffffff, 50, 0, 2 );\n\t\tenvScene.add( mainLight );\n\n\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\n\n\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\n\t\tlight1.material.color.setHex( 0xff0000 );\n\t\tlight1.position.set( - 5, 2, 0 );\n\t\tlight1.scale.set( 0.1, 1, 1 );\n\t\tenvScene.add( light1 );\n\n\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight2.material.color.setHex( 0x00ff00 );\n\t\tlight2.position.set( 0, 5, 0 );\n\t\tlight2.scale.set( 1, 0.1, 1 );\n\t\tenvScene.add( light2 );\n\n\t\tvar light3 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight3.material.color.setHex( 0x0000ff );\n\t\tlight3.position.set( 2, 1, 5 );\n\t\tlight3.scale.set( 1.5, 2, 0.1 );\n\t\tenvScene.add( light3 );\n\n\t\treturn envScene;\n\n\t}\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = 5400;\n    console.log(\"height\",height);\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0,0,0);\n    this.camera = new THREE.PerspectiveCamera(\n      40, // fov = field of view\n      width / height, // aspect ratio\n      1, // near plane\n      1000 // far plane\n    );\n    // this.camera.position.y = 150;\n    this.camera.position.set( 0, 0, 390 );\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n\n    var object;\n    var myThis = this;\n    var ship_material = new THREE.MeshPhongMaterial( { flatShading: true }  );\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n\n              // if ( child.isMesh ) child.material = ship_material;\n\n            } );\n\n            // myThis.object.position.z = -1000;\n            // myThis.object.scale.x = 80;\n            // myThis.object.scale.y = 80;\n            // myThis.object.scale.z = 80;\n            // myThis.scene.add( myThis.object );\n            // myThis.subdivide( geometry, 3 );\n            myThis.addCustomSceneObjects();\n            myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n    var textureLoader = new THREE.TextureLoader( this.manager );\n\n    this.texture = textureLoader.load( 'UterusWhole.jpg' );\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'placenta12.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, 5400 );\n\t// container.appendChild( renderer.domElement );\n\n\t//renderer.toneMapping = ReinhardToneMapping;\n\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\tthis.stats = new Stats();\n\t// container.appendChild( stats.dom );\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    // document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n  onDocumentMouseMove = ( event ) => {\n\n    // var windowHalfX = window.innerWidth / 2;\n    // var windowHalfY = window.innerHeight / 2;\n    // var myThis2 = this;\n    //     myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n    //     myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n      }\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n  \tconsole.log(\"this.object.children[1].geometry\",this.object.children[1].geometry);\n\n\tvar a = new THREE.Geometry().fromBufferGeometry( this.object.children[1].geometry );\n\ta.mergeVertices();\n\tthis.object.children[1].geometry.fromGeometry( a );\n\n\n  \tvar geometry = this.object.children[1].geometry;\n\tvar geometry2 = this.object.children[1].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group = new THREE.Group();\n\tthis.group2 = new THREE.Group();\n\n\tvar material;\n\n\tmaterial = new THREE.MeshStandardMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\tmaterial.flatShading = false;\n\n\tthis.torusMesh = new THREE.Mesh( geometry, material );\n\tthis.torusMesh.scale.x = 10;\n\tthis.torusMesh.scale.y = 10;\n\tthis.torusMesh.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMesh2.rotation.z = Math.PI;\n\tthis.torusMesh2.scale.x = 10;\n\tthis.torusMesh2.scale.y = 10;\n\tthis.torusMesh2.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group.add( this.torusMesh );\n\tthis.group2.add( this.torusMesh2 );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial = new Nodes.MeshStandardNodeMaterial();\n\tmaterial.color = new THREE.Color( 0xffffff );\n\tmaterial.roughness = params.roughness;\n\tmaterial.metalness = params.metalness;\n\n\tthis.torusMeshNode = new THREE.Mesh( geometry, material );\n\tthis.torusMeshNode.scale.x = 10;\n\tthis.torusMeshNode.scale.y = 10;\n\tthis.torusMeshNode.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2 = new THREE.Mesh( geometry2, material );\n\tthis.torusMeshNode2.rotation.z = Math.PI;\n\tthis.torusMeshNode2.scale.x = 10;\n\tthis.torusMeshNode2.scale.y = 10;\n\tthis.torusMeshNode2.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2.add(this.torusMeshNode2);\n\tthis.group.add(this.torusMeshNode);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh = new THREE.Mesh( geometry, material );\n\tthis.planeMesh.position.y = - 50;\n\tthis.planeMesh.rotation.x = - Math.PI * 0.5;\n\tthis.group.add(this.planeMesh);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2);\n\n\n\n\tvar a2 = new THREE.Geometry().fromBufferGeometry( this.object.children[2].geometry );\n\ta2.mergeVertices();\n\tthis.object.children[2].geometry.fromGeometry( a2 );\n\n\tconsole.log(this.object.children[2].geometry);\n\n  \tvar geometry_ = this.object.children[2].geometry;\n\tvar geometry2_ = this.object.children[2].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group_ = new THREE.Group();\n\tthis.group2_ = new THREE.Group();\n\n\tvar material_;\n\n\tmaterial_ = new THREE.MeshStandardMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\tmaterial_.flatShading = false;\n\n\tthis.torusMesh_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMesh_.scale.x = 10;\n\tthis.torusMesh_.scale.y = 10;\n\tthis.torusMesh_.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMesh2_.rotation.z = Math.PI;\n\tthis.torusMesh2_.scale.x = 10;\n\tthis.torusMesh2_.scale.y = 10;\n\tthis.torusMesh2_.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group_.add( this.torusMesh_ );\n\tthis.group2_.add( this.torusMesh2_ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial_ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial_.color = new THREE.Color( 0xffffff );\n\tmaterial_.roughness = params.roughness;\n\tmaterial_.metalness = params.metalness;\n\n\tthis.torusMeshNode_ = new THREE.Mesh( geometry_, material_ );\n\tthis.torusMeshNode_.scale.x = 10;\n\tthis.torusMeshNode_.scale.y = 10;\n\tthis.torusMeshNode_.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2_ = new THREE.Mesh( geometry2_, material_ );\n\tthis.torusMeshNode2_.rotation.z = Math.PI;\n\tthis.torusMeshNode2_.scale.x = 10;\n\tthis.torusMeshNode2_.scale.y = 10;\n\tthis.torusMeshNode2_.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\n\tthis.group2_.add(this.torusMeshNode2_);\n\tthis.group_.add(this.torusMeshNode_);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh_ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh_.position.y = - 50;\n\tthis.planeMesh_.rotation.x = - Math.PI * 0.5;\n\tthis.group_.add(this.planeMesh_);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2_);\n\n\tvar a3 = new THREE.Geometry().fromBufferGeometry( this.object.children[0].geometry );\n\ta3.mergeVertices();\n\tthis.object.children[0].geometry.fromGeometry( a3 );\n\n\tconsole.log(this.object.children[0].geometry);\n\n  \tvar geometry__ = this.object.children[0].geometry;\n\tvar geometry2__ = this.object.children[0].geometry;\n\n\t// var geometry = new THREE.SphereBufferGeometry( 30, 20, 10 );\n\t// var geometry22 = new THREE.TorusKnotBufferGeometry( 18, 8, 150, 20 );\n\tthis.group__ = new THREE.Group();\n\tthis.group2__ = new THREE.Group();\n\n\tvar material__;\n\n\tmaterial__ = new THREE.MeshStandardMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\tmaterial__.flatShading = false;\n\n\tthis.torusMesh__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMesh__.scale.x = 10;\n\tthis.torusMesh__.scale.y = 10;\n\tthis.torusMesh__.scale.z = 10;\n\t// this.torusMesh.position.z = 10;\n\n\tthis.torusMesh2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMesh2__.rotation.z = Math.PI;\n\tthis.torusMesh2__.scale.x = 10;\n\tthis.torusMesh2__.scale.y = 10;\n\tthis.torusMesh2__.scale.z = 10;\n\t// this.torusMesh2.position.z = -10;\n\n\tthis.group__.add( this.torusMesh__ );\n\tthis.group2__.add( this.torusMesh2__ );\n\t// this.scene.add( this.torusMesh );\n\n\tmaterial__ = new Nodes.MeshStandardNodeMaterial();\n\tmaterial__.color = new THREE.Color( 0xffffff );\n\tmaterial__.roughness = params.roughness;\n\tmaterial__.metalness = params.metalness;\n\n\tthis.torusMeshNode__ = new THREE.Mesh( geometry__, material__ );\n\tthis.torusMeshNode__.scale.x = 10;\n\tthis.torusMeshNode__.scale.y = 10;\n\tthis.torusMeshNode__.scale.z = 10;\n\t// this.torusMeshNode.position.z = 10;\n\n\tthis.torusMeshNode2__ = new THREE.Mesh( geometry2__, material__ );\n\tthis.torusMeshNode2__.rotation.z = Math.PI;\n\tthis.torusMeshNode2__.scale.x = 10;\n\tthis.torusMeshNode2__.scale.y = 10;\n\tthis.torusMeshNode2__.scale.z = 10;\n\t// this.torusMeshNode2.position.z = -10;\n\tthis.group.position.y = 90;\n\tthis.group2.position.y = 90;\n\tthis.group_.position.y = 90;\n\tthis.group2_.position.y = 90;\n\tthis.group__.position.y = 90;\n\tthis.group2__.position.y = 90;\n\tthis.group2__.add(this.torusMeshNode2__);\n\tthis.group__.add(this.torusMeshNode__);\n\t// this.scene.add( this.torusMeshNode );\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 200, 200 );\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tthis.planeMesh__ = new THREE.Mesh( geometry, material );\n\tthis.planeMesh__.position.y = - 50;\n\tthis.planeMesh__.rotation.x = - Math.PI * 0.5;\n\tthis.group__.add(this.planeMesh__);\n\t// this.scene.add( this.planeMesh );\n\t// this.scene.add(this.group);\n\tthis.scene.add(this.group2__);\n\n\n\n  \tTHREE.DefaultLoadingManager.onLoad = function ( ) {\n\n\t\tpmremGenerator.dispose();\n\n\t};\n\n\tvar hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ];\n\tvar myThis = this;\n\tthis.hdrCubeMap = new HDRCubeTextureLoader()\n\t\t.setPath( 'textures/cube/pp_cube_map/' )\n\t\t.setDataType( THREE.UnsignedByteType )\n\t\t.load( hdrUrls, function () {\n\t\t\thdrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.hdrCubeMap );\n\n\t\t\tmyThis.hdrCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.hdrCubeMap.needsUpdate = true;\n\n\t\t} );\n\n\tvar ldrUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.ldrCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisa/' )\n\t\t.load( ldrUrls, function () {\n\n\t\t\tmyThis.ldrCubeMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tldrCubeRenderTarget = pmremGenerator.fromCubemap( myThis.ldrCubeMap );\n\n\t\t} );\n\n\n\tvar rgbmUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ];\n\tthis.rgbmCubeMap = new THREE.CubeTextureLoader()\n\t\t.setPath( './textures/cube/pisaRGBM16/' )\n\t\t.load( rgbmUrls, function () {\n\n\t\t\tmyThis.rgbmCubeMap.encoding = THREE.RGBM16Encoding;\n\t\t\tmyThis.rgbmCubeMap.format = THREE.RGBAFormat;\n\n\t\t\trgbmCubeRenderTarget = pmremGenerator.fromCubemap( myThis.rgbmCubeMap );\n\n\t\t\tmyThis.rgbmCubeMap.magFilter = THREE.LinearFilter;\n\t\t\tmyThis.rgbmCubeMap.needsUpdate = true;\n\n\t\t} );\n\tvar pmremGenerator = new THREE.PMREMGenerator( this.renderer );\n\tpmremGenerator.compileCubemapShader();\n\n\tvar envScene = this.getEnvScene();\n\tgeneratedCubeRenderTarget = pmremGenerator.fromScene( envScene, 0.04 );\n\n\t\n    \n  };\n\n  startAnimationLoop = () => {\n  \t\n \t// \n  \t\t\n  \t\tif (this.object != undefined){\n  \t\tthis.stats.begin();\n\t  \tthis.torusMesh.visible = ! params.nodes;\n\t\tthis.torusMeshNode.visible = params.nodes;\n\n\t\tthis.torusMesh.material.roughness = params.roughness;\n\t\tthis.torusMesh.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode.material.roughness = params.roughness;\n\t\tthis.torusMeshNode.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2.visible = ! params.nodes;\n\t\tthis.torusMeshNode2.visible = params.nodes;\n\n\t\tthis.torusMesh2.material.roughness = params.roughness;\n\t\tthis.torusMesh2.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2.material.metalness = params.metalness;\n\n\t\tthis.torusMesh_.visible = ! params.nodes;\n\t\tthis.torusMeshNode_.visible = params.nodes;\n\n\t\tthis.torusMesh_.material.roughness = params.roughness;\n\t\tthis.torusMesh_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2_.visible = ! params.nodes;\n\t\tthis.torusMeshNode2_.visible = params.nodes;\n\n\t\tthis.torusMesh2_.material.roughness = params.roughness;\n\t\tthis.torusMesh2_.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2_.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2_.material.metalness = params.metalness;\n\n\t\tthis.torusMesh__.visible = ! params.nodes;\n\t\tthis.torusMeshNode__.visible = params.nodes;\n\n\t\tthis.torusMesh__.material.roughness = params.roughness;\n\t\tthis.torusMesh__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode__.material.metalness = params.metalness;\n\n\t\tthis.torusMesh2__.visible = ! params.nodes;\n\t\tthis.torusMeshNode2__.visible = params.nodes;\n\n\t\tthis.torusMesh2__.material.roughness = params.roughness;\n\t\tthis.torusMesh2__.material.metalness = params.metalness;\n\n\t\tthis.torusMeshNode2__.material.roughness = params.roughness;\n\t\tthis.torusMeshNode2__.material.metalness = params.metalness;\n\n\t\tvar renderTarget, cubeMap;\n\n\t\tswitch ( params.envMap ) {\n\n\t\t\tcase 'Generated':\n\t\t\t\trenderTarget = generatedCubeRenderTarget;\n\t\t\t\tcubeMap = generatedCubeRenderTarget.texture;\n\t\t\t\tbreak;\n\t\t\tcase 'LDR':\n\t\t\t\trenderTarget = ldrCubeRenderTarget;\n\t\t\t\tcubeMap = ldrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'HDR':\n\t\t\t\trenderTarget = hdrCubeRenderTarget;\n\t\t\t\tcubeMap = hdrCubeMap;\n\t\t\t\tbreak;\n\t\t\tcase 'RGBM16':\n\t\t\t\trenderTarget = rgbmCubeRenderTarget;\n\t\t\t\tcubeMap = rgbmCubeMap;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar newEnvMap = renderTarget ? renderTarget.texture : null;\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh.material.envMap ) {\n\n\t\t\tthis.torusMesh.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh.material.map = newEnvMap;\n\t\t\tthis.planeMesh.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode.rotation.y = this.torusMesh.rotation.y;\n\n\t\t\tthis.torusMesh2.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2.rotation.y = this.torusMesh2.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh_.material.envMap ) {\n\n\t\t\tthis.torusMesh_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode_.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh_.material.map = newEnvMap;\n\t\t\tthis.planeMesh_.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2_.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2_.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2_.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode_.rotation.y = this.torusMesh_.rotation.y;\n\n\t\t\tthis.torusMesh2_.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2_.rotation.y = this.torusMesh2_.rotation.y;\n\n\t\t}\n\n\t\tif ( newEnvMap && newEnvMap !== this.torusMesh__.material.envMap ) {\n\n\t\t\tthis.torusMesh__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode__.material.needsUpdate = true;\n\n\t\t\tthis.planeMesh__.material.map = newEnvMap;\n\t\t\tthis.planeMesh__.material.needsUpdate = true;\n\n\t\t\tthis.torusMesh2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMesh2__.material.needsUpdate = true;\n\n\t\t\tthis.torusMeshNode2__.material.envMap = newEnvMap;\n\t\t\tthis.torusMeshNode2__.material.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( params.animate ) {\n\n\t\t\tthis.torusMesh__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode__.rotation.y = this.torusMesh__.rotation.y;\n\n\t\t\tthis.torusMesh2__.rotation.y += 0.05;\n\t\t\tthis.torusMeshNode2__.rotation.y = this.torusMesh2__.rotation.y;\n\n\t\t}\n\n\t\tthis.planeMesh.visible = params.debug;\n\t\tthis.planeMesh_.visible = params.debug;\n\t\tthis.planeMesh__.visible = params.debug;\n\n\t\tif ((this.group != undefined) && (this.group2 != undefined)){\n\t      // this.camera.rotation.y += 0.1;\n\t      // this.group.position.y = radiusL * Math.cos( angle );  \n\t      // this.group.position.x = radiusL * Math.sin( angle );\n\t      // this.group.rotation.z = Math.PI - angle;\n\n\t      // this.group2.position.y = radiusS * Math.cos( angle );  \n\t      // this.group2.position.x = radiusS * Math.sin( angle );\n\t      // this.group2.rotation.z = Math.PI - angle;\n\t      // angle += 0.01;\n\t      // var xAdd = ( this.mouseX - this.camera.position.x ) * .05;\n\t      // var nahee = this.camera.position.x + xAdd;\n\t      // this.camera.position.x = nahee;\n\t      // this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * .05;\n\t    }\n    \tthis.camera.position.y = -20;\n    \t// this.camera.position.z = 0;\n\t\tthis.scene.background = cubeMap;\n\t\tthis.renderer.toneMappingExposure = params.exposure;\n\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\t    this.stats.end();\n\n\t}\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\n\nexport default Placenta;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AsciiEffect } from 'three/examples/jsm/effects/AsciiEffect.js';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\n\nvar angle = 0;\nvar radiusL = 32;\nvar radiusS = 14; \n\nconst style = {\n  height: 5400 // we can control scene size by setting container dimensions\n};\n\nconst params_bloom = {\n\t\texposure: 1,\n\t\tbloomStrength: 1,\n\t\tbloomThreshold: .5,\n\t\tbloomRadius: 1\n\t};\n\nvar params = {\n\tenvMap: 'HDR',\n\troughness: 0.0,\n\tmetalness: 0.0,\n\texposure: 1.0,\n\tnodes: true,\n\tanimate: true,\n\tdebug: false\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar torusMesh, planeMesh;\nvar generatedCubeRenderTarget, ldrCubeRenderTarget, hdrCubeRenderTarget, rgbmCubeRenderTarget;\nvar ldrCubeMap, hdrCubeMap, rgbmCubeMap;\n\nclass PlacentaAll extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    \n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  getEnvScene = () => {\n\n\t\tvar envScene = new THREE.Scene();\n\n\t\tvar geometry = new THREE.BoxBufferGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\n\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\n\t\troom.scale.setScalar( 10 );\n\t\tenvScene.add( room );\n\n\t\tvar mainLight = new THREE.PointLight( 0xffffff, 50, 0, 2 );\n\t\tenvScene.add( mainLight );\n\n\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\n\n\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\n\t\tlight1.material.color.setHex( 0xff0000 );\n\t\tlight1.position.set( - 5, 2, 0 );\n\t\tlight1.scale.set( 0.1, 1, 1 );\n\t\tenvScene.add( light1 );\n\n\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight2.material.color.setHex( 0x00ff00 );\n\t\tlight2.position.set( 0, 5, 0 );\n\t\tlight2.scale.set( 1, 0.1, 1 );\n\t\tenvScene.add( light2 );\n\n\t\tvar light3 = new THREE.Mesh( geometry, lightMaterial.clone() );\n\t\tlight3.material.color.setHex( 0x0000ff );\n\t\tlight3.position.set( 2, 1, 5 );\n\t\tlight3.scale.set( 1.5, 2, 0.1 );\n\t\tenvScene.add( light3 );\n\n\t\treturn envScene;\n\n\t}\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = 5400;\n    console.log(\"height\",height);\n\n    this.scene = new THREE.Scene();\n    {\n\t  const color = 0x3f7b9d;  // white\n\t  const near = 0;\n\t  const far = 60;\n\t  this.scene.fog = new THREE.Fog(color);\n\t}\n    this.scene.background = new THREE.Color(0,0,0);\n    this.camera = new THREE.PerspectiveCamera(\n      40, // fov = field of view\n      width / height, // aspect ratio\n      1, // near plane\n      1000 // far plane\n    );\n    // this.camera.position.y = 150;\n    this.camera.position.set( 0, 0, 390 );\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n    // this.renderer.toneMapping = THREE.ReinhardToneMapping;\n\n //    this.renderScene = new RenderPass( this.scene, this.camera );\n\n\t// this.bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n\t// this.bloomPass.threshold = params_bloom.bloomThreshold;\n\t// this.bloomPass.strength = params_bloom.bloomStrength;\n\t// this.bloomPass.radius = params_bloom.bloomRadius;\n\n\t// this.composer = new EffectComposer( this.renderer );\n\t// this.composer.addPass( this.renderScene );\n\t// this.composer.addPass( this.bloomPass );\n\n    const light = new THREE.AmbientLight( 0x000000 ,500); // soft white light\n    light.position.set( 0, 0, 0 );\n\tthis.scene.add( light );\n\n\t\tconst lights = [];\n\t\t\tlights[ 0 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 1 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 2 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 3 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 4 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\t\t\tlights[ 5 ] = new THREE.PointLight( 0xffffff, 100, 0 );\n\n\t\t\tlights[ 0 ].position.set( 0, 60, 40 );\n\t\t\tlights[ 1 ].position.set( 10, 20, 40 );\n\t\t\tlights[ 2 ].position.set( - 10, - 20, - 40 );\n\t\t\tlights[ 3 ].position.set( 0, -400, 0 );\n\t\t\tlights[ 4 ].position.set( 10, -20, 40 );\n\t\t\tlights[ 5 ].position.set( - 10, 130, 0 );\n\t\t\tthis.scene.add( lights[ 0 ] );\n\t\t\tthis.scene.add( lights[ 1 ] );\n\t\t\tthis.scene.add( lights[ 2 ] );\n\t\t\tthis.scene.add( lights[ 3 ] );\n\t\t\tthis.scene.add( lights[ 4 ] );\n\t\t\tthis.scene.add( lights[ 5 ] );\n    var object;\n    var myThis = this;\n    var ship_material = new THREE.MeshPhongMaterial( { \n    \tflatShading: false,\n    \tcolor: 0x2194ce,\n    \t// color:0x7544ba,\n    \temissive: 0x5e1919,\n    \tspecular: 0xf79a9a,\n    \temissiveIntensity:3,\n    \t// specular: 0x000000,\n    \tshininess:100,\n    \trefractionRatio:.56,\n    \tcombine: THREE.AddOperation,\n    \treflectivity: 1\n\n    }  );\n\n    this.group_ = new THREE.Group();\n\n    this.loadModel = function() {\n\n          if (myThis.object != undefined){\n            myThis.object.traverse( function ( child ) {\n            \t// child.geometry.mergeVertices();\n\t\t\t\t\n\t\t\t\t// myThis.scene.add( mesh2 );\n\t\t\t\tif(child.geometry !== undefined){ \n\t\t\t\t\tconst geometry2 = new THREE.Geometry().fromBufferGeometry( child.geometry );\n\t\t\t\t\tgeometry2.mergeVertices();\n\t\t\t\t\tconst mesh2 = new THREE.Mesh( geometry2, ship_material );\n\t\t\t\t\tmesh2.position.set(0, 100, 0); \n\t\t\t\t\tmesh2.scale.set(5, 5, 5); \n\t\t\t\t\tmesh2.rotation.set(0, 0, Math.PI); \n\t\t\t\t\tmyThis.group_.add( mesh2 );\n\t\t\t\t\tconsole.log(\"hi\");\n\t\t\t\t}\n\t\t\t\t\n\n            } );\n\n            // myThis.object.position.z = -1000;\n            // myThis.object.scale.x = 80;\n            // myThis.object.scale.y = 80;\n            // myThis.object.scale.z = 80;\n\n            // myThis.subdivide( geometry, 3 );\n            myThis.addCustomSceneObjects();\n            myThis.requestID = window.requestAnimationFrame(myThis.startAnimationLoop);\n          }else{\n          }\n          \n\n        }\n    this.manager = new THREE.LoadingManager( this.loadModel );\n\n        this.manager.onProgress = function ( item, loaded, total ) {\n\n          console.log( item, loaded, total );\n\n        };\n\n    this.onProgress = function( xhr ) {\n\n          if ( xhr.lengthComputable ) {\n\n            var percentComplete = xhr.loaded / xhr.total * 100;\n            console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\n\n          }\n\n        }\n\n    this.onError = function() {}\n\n    this.loader = new OBJLoader( this.manager );\n\n    this.loader.load( 'comp_baby_scene1.obj', function ( obj ) {\n      // console.log(obj);\n      myThis.object = obj;\n      console.log(obj);\n\n    }, this.onProgress, this.onError );\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, 5400 );\n\t// this.composer.setSize( window.innerWidth, 5400 );\n\t// container.appendChild( renderer.domElement );\n\n\t// renderer.toneMapping = ReinhardToneMapping;\n\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\tthis.stats = new Stats();\n\t// container.appendChild( stats.dom );\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    // document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n\n\tcubemap = (pathParam, pathFormat) => {\n\n\t\tconst path = pathParam;\n\t\tconst format = pathFormat;\n\t\tconst urls = [\n\t\t\tpath + 'posx' + format, path + 'negx' + format,\n\t\t\tpath + 'posy' + format, path + 'negy' + format,\n\t\t\tpath + 'posz' + format, path + 'negz' + format\n\t\t];\n\n\t\tconst textureCube = new THREE.CubeTextureLoader().load( urls );\n\n\t\t// library[ textureCube.uuid ] = textureCube;\n\n\t\treturn textureCube;\n\n\t};\n\n  onDocumentMouseMove = ( event ) => {\n\n    // var windowHalfX = window.innerWidth / 2;\n    // var windowHalfY = window.innerHeight / 2;\n    // var myThis2 = this;\n    //     myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n    //     myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n      }\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n  \tthis.scene.add(this.group_);\n\t\n    \n  };\n\n  startAnimationLoop = () => {\n  \t\n \t// \n  \t\t\n    \tthis.camera.position.y = -20;\n    \t// this.camera.position.z = 0;\n\t\t// this.scene.background = cubeMap;\n\t\t// this.renderer.toneMappingExposure = params.exposure;\n\n\t\t// this.camera.lookAt( this.scene.position);\n\t    this.renderer.render(this.scene, this.camera);\n\t    // this.composer.render();\n\t    this.group_.rotation.y += 0.04;\n\t    this.stats.end();\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\n\nexport default PlacentaAll;\n","// some utils\r\n\r\nimport * as THREE from \"three\";\r\n\r\nfunction addOrMergeProp( material, propName, data ) {\r\n\r\n\tif ( material[ propName ] ) {\r\n\r\n\t\tObject.assign( material[ propName ], data );\r\n\r\n\t} else {\r\n\r\n\t\tmaterial[ propName ] = data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//serialize\r\nfunction toJSON(){\r\n\tvar res = THREE.Material.prototype.toJSON.call(\r\n\t\tthis, \r\n\t\tundefined, \r\n\t\tthis._serializationManager.serialize.bind(this._serializationManager)\r\n\t)\r\n\tthis._serializationManager.afterSerialize.call(this._serializationManager,res)\r\n\treturn res\r\n}\r\n\r\n// from three's texture transform api, to be applied to a uniform matrix\r\nfunction setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\tvar c = Math.cos( rotation );\r\n\tvar s = Math.sin( rotation );\r\n\r\n\tthis.set(\r\n\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t0, 0, 0\r\n\t);\r\n\r\n}\r\n\r\n//spec gloss stuff ---------------------------------------------------------\r\n\r\n//this extends the shader to use specular gloss PBR model instead of rough/metal\r\n\r\nvar specularMapFragmentChunk = [\r\n\t'vec3 specularFactor = specular;',\r\n\t'#ifdef USE_SPECULARMAP',\r\n\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\r\n\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tspecularFactor *= texelSpecular.rgb;',\r\n\t'#endif',\r\n\t// 'gl_FragColor = vec4(vec3(specularFactor),1.);',\r\n\t// 'return;',\r\n].join( '\\n' );\r\n\r\nvar glossinessMapFragmentChunk = [\r\n\t'float glossinessFactor = glossiness;',\r\n\t'#ifdef USE_GLOSSINESSMAP',\r\n\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tglossinessFactor *= texelGlossiness.a;',\r\n\t// 'gl_FragColor = vec4(vec3(glossinessFactor),1.);',\r\n\t// 'return;',\r\n\t'#endif',\r\n].join( '\\n' );\r\n\r\nvar lightPhysicalFragmentChunk = [\r\n\t'PhysicalMaterial material;',\r\n\t'material.diffuseColor = diffuseColor.rgb;',\r\n\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\r\n\t'material.specularColor = specularFactor.rgb;',\r\n].join( '\\n' );\r\n\r\nvar SHADER_INCLUDES_SPEC_GLOSS = {\r\n\troughnessmap_fragment: specularMapFragmentChunk,\r\n\tmetalnessmap_fragment: glossinessMapFragmentChunk,\r\n\tlights_physical_fragment: lightPhysicalFragmentChunk,\r\n};\r\n\r\nexport function decorateMaterialWithSpecGloss( material ) {\r\n\r\n\tif ( material.isSpecGlossExtended ) return material;\r\n\r\n\tmaterial.isSpecGlossExtended = true;\r\n\r\n\t// these are the extra uniforms, but instead of being stored in .userData, or some such place\r\n\t// a designated prop could be used\r\n\tvar shaderUniforms = {\r\n\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ), type: 'vec3', stage: 'fragment' }, //fragment can be ommitted (defaults to it) but for sake of clarity\r\n\t\tglossiness: { value: 1, type: 'float', stage: 'fragment' },\r\n\t\tglossinessMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t\tspecularMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t};\r\n\r\n\tvar shaderIncludes = Object.assign({},SHADER_INCLUDES_SPEC_GLOSS)\r\n\r\n\tvar defines = {USE_GLOSSINESSMAP: ''}\r\n\r\n\t//conflicts could be resolved here\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\taddOrMergeProp( material, 'defines', defines );\r\n\r\n\tdelete material.metalnessMap\r\n\tdelete material.roughnessMap\r\n\r\n\t//expose uniforms as props for a cleaner interface (but shaderUniforms is also available so this can be omitted)\r\n\t//it just leads to a cleaner more familiar interface (PhongMaterial has specularMap, so this now has it too)\r\n\tfor ( let propName in shaderUniforms ) {\r\n\r\n\t\tObject.defineProperty( material, propName, {\r\n\t\t\tget: ()=> shaderUniforms[ propName ].value,\r\n\t\t\tset: ( v )=> (shaderUniforms[ propName ].value = v),\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\tvar f = function(data,meta){\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSpecGlossExtended = true\r\n\t\tdata.glossiness = this.glossiness\r\n\t\tdata.specular = this.specular.getHex()\r\n\t\tif(this.glossinessMap && this.glossinessMap.isTexture) data.glossinessMap = this.glossinessMap.toJSON( meta ).uuid \r\n\t}.bind(material)\r\n\r\n\tmaterial._serializationManager.addFunction(f)\r\n\t\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n// multi uv stuff ---------------------------------------------------------\r\n\r\n// this moves the transform from textures to the material, textures become just data\r\n\r\n//list of maps to be extended, these are easy\r\nvar DEFAULT_MAP_LIST = [\r\n\t'alphaMap',\r\n\t'specularMap',\r\n\t'map',\r\n\t'emissiveMap',\r\n\t'metalnessMap',\r\n\t'roughnessMap',\r\n\t'glossinessMap' //this one is from the other example, but if its there it should work, this can be solved to work together somehow\r\n];\r\n\r\n//this can be programatic\r\n//it tells the extension where to look for certain maps\r\n//these follow the /texture2D( $mapname, vUv )/ pattern\r\n//normal map is a bit more complex and would require a non programatic chunk \r\nvar PROP_TO_CHUNK_MAP = {\r\n\t'alphaMap': 'alphamap_fragment',\r\n\t'specularMap': 'specularmap_fragment',\r\n\t'map': 'map_fragment',\r\n\t'emissiveMap': 'emissivemap_fragment',\r\n\t'metalnessMap': 'metalnessmap_fragment',\r\n\t'roughnessMap': 'roughnessmap_fragment',\r\n\t'glossinessMap': 'metalnessmap_fragment', //this one cant be programatic because it belongs to another override, could be a specific check somewhere else\r\n\t'specularMapGloss': 'roughnessmap_fragment',\r\n};\r\n\r\n//some utils\r\n\r\nvar mapRegex = /texture2D\\( (.*Map|map), vUv \\)/gm //look for the pattern /texture2D( $someMap, vUv )/\r\n\r\n//because the other extension changes roughnessMap to specularMap we need the $1 to replace the name, otherwise it could be `mapName`\r\nfunction getReplaceString(mapName){\r\n\treturn `texture2D( $1, ( ${getUniformNameFromProp(mapName)} * vec3( vUv, 1. ) ).xy )`\r\n}\r\n\r\n//in order to keep the uniform name obvious that it belongs to the GLSL context, and to make it as private sounding as possible\r\nfunction getUniformNameFromProp(prop){\r\n\treturn `u_${prop}Transform`\r\n}\r\n\r\n//a utility to add the necessary transform properties to a material based on an arbitrary map name\r\n//so if specularMap is provided it will create these Vector2, a float, and an updateMatrix method\r\n//this is very similar to the Texture transform interface the only difference being that the props are prefixed\r\n//myTexture.repeat vs myMaterial.specularMapRepeat \r\nfunction addMapTransformPropsToMaterial( material, mapName ){\r\n\r\n\tlet _mapName = mapName\r\n\tmaterial[`${mapName}Repeat`] = new THREE.Vector2(1,1)\r\n\tmaterial[`${mapName}Offset`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Center`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Rotation`] = 0\r\n\tmaterial[`${mapName}UpdateMatrix`] = function(){\r\n\t\tthis.shaderUniforms[getUniformNameFromProp(_mapName)].value\r\n\t\t.setUvTransform(\r\n\t\t\tthis[`${_mapName}Offset`].x,\r\n\t\t\tthis[`${_mapName}Offset`].y, \r\n\t\t\tthis[`${_mapName}Repeat`].x,\r\n\t\t\tthis[`${_mapName}Repeat`].y, \r\n\t\t\tthis[`${_mapName}Rotation`], \r\n\t\t\tthis[`${_mapName}Center`].x,\r\n\t\t\tthis[`${_mapName}Center`].y, \r\n\t\t)\r\n\t}.bind(material)\r\n}\r\n\r\n\r\nexport default function decorateMaterialWithPerMapTransforms( material, mapList ) {\r\n\r\n\tif ( material.isPerMapTransformExtended ) return material;\r\n\r\n\tmaterial.isPerMapTransformExtended = true;\r\n\r\n\t//one can provide a subset from outside\r\n\tmapList = mapList || DEFAULT_MAP_LIST;\r\n\r\n\tvar shaderUniforms = {}\r\n\tvar shaderIncludes = {}\r\n\tvar serialize = []\r\n\r\n\tfor ( var i = 0; i < mapList.length; i ++ ) {\r\n\r\n\t\tvar mapName = mapList[ i ];\r\n\r\n\r\n\t\tif ( material[ mapName ] !== undefined ) {\r\n\r\n\t\t\taddMapTransformPropsToMaterial(material, mapName)\r\n\r\n\t\t\tvar uniform = { value: new THREE.Matrix3(), type:'mat3', stage: 'fragment' };\r\n\t\t\tuniform.value.setUvTransform = setUvTransform.bind( uniform.value );\r\n\r\n\t\t\tshaderUniforms[getUniformNameFromProp(mapName)] = uniform\r\n\r\n\t\t\t//this is for resolving the conflict, its not the most elegant solution but it works\r\n\t\t\t//i believe that this would be solved by refactoring the shader templates\r\n\t\t\tvar lookup = mapName\r\n\t\t\tif( material.isSpecGlossExtended && mapName === 'specularMap'){\r\n\t\t\t\tlookup = 'specularMapGloss' \r\n\t\t\t}\r\n\t\t\tserialize.push(mapName)\r\n\r\n\t\t\t//based on the map name ie. specularMap or even an extended glossinessMap pick a chunk\r\n\t\t\tvar chunkName = PROP_TO_CHUNK_MAP[lookup]\r\n\r\n\t\t\t//if there already is a chunk from some extension, pick that, otherwise copy the default chunk\r\n\t\t\tvar shaderChunk = (material.shaderIncludes && material.shaderIncludes[chunkName]) || THREE.ShaderChunk[chunkName]\r\n\r\n\t\t\t//apply the string transformation, this contains the copy of whatever chunk was provided (default or custom)\r\n\t\t\tshaderChunk = shaderChunk.replace( mapRegex , getReplaceString(mapName) )\r\n\r\n\t\t\t//provide this copy as the include chunk, this shader wont look up THREE.ShaderChunk \r\n\t\t\t//and doesnt have to wait for onBeforeCompile to do the transformation\r\n\t\t\t//final transformed chunk is already stored here in this context sync\r\n\t\t\tshaderIncludes[ chunkName ] = shaderChunk\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//combine with other chunks\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction(((data,meta)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isPerMapTransformExtended = true\r\n\r\n\t\tserialize.forEach(mapName=>{\r\n\t\t\tdata[`${mapName}Repeat`] = material[`${mapName}Repeat`].toArray()\r\n\t\t\tdata[`${mapName}Offset`] = material[`${mapName}Offset`].toArray()\r\n\t\t\tdata[`${mapName}Center`] = material[`${mapName}Center`].toArray()\r\n\t\t\tdata[`${mapName}Rotation`] = material[`${mapName}Rotation`]\r\n\t\t})\r\n\r\n\t\treturn data\r\n\r\n\t}).bind(material))\r\n\r\n\r\n\tmaterial._serializationManager.addAfterFunction(\r\n\t\tfunction( data ){\r\n\t\t\tdelete data.roughnessMap\r\n\t\t\tdelete data.roughness\r\n\t\t\tdelete data.metalnessMap\r\n\t\t\tdelete data.metalness\t\r\n\t\t}\r\n\t)\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n}\r\n\r\n// simple instance stuff from lambert example  ---------------------------------------------------------\r\n\r\n//this is a stage after begin_vertex, this would be more elegant with hooks and template refactor\r\nvar after_vertex_transform_chunk = `\r\n\ttransformed *= instanceScale; //the value present in transformed is in model space, \r\n\ttransformed = transformed + instanceOffset;\r\n`\r\n\r\nexport function decorateMaterialWithSimpleInstancing( material ) {\r\n\tconsole.log(\"shaderIncludes\");\r\n\tif( material.isSimpleInstanceExtended ) return material\r\n\r\n\tmaterial.isSimpleInstanceExtended = true \r\n\t\r\n\t//make a custom chunk that includes a copy of the default chunk from THREE.ShaderChunk\r\n\t//followed by a custom chunk, that is simply appended to the copy\r\n\tvar shaderIncludes = { \r\n\t\tbegin_vertex:`\r\n\t\t\t${THREE.ShaderChunk.begin_vertex}\r\n\t\t\t${after_vertex_transform_chunk}\r\n\t\t` \r\n\t}\r\n\r\n\tconsole.log(\"shaderIncludes\");\r\n\t//no good global chunk, but could be uv_pars, heres how to make it work with onbeforecompile\r\n\t//because this is somewhat of a set and forget thing, onBeforeCompile (or onBeforeParse) is \r\n\t//perfectly valid to use here\r\n\t//\"here are some attribute names, whenver you get around to assemblying the shader on WebGL level use them\"\r\n\t//A uniform (over an attribute) would be better if it were available in this scope\r\n\t\r\n\tvar attributeInjection = `\r\n\t\tattribute vec3 instanceOffset; \r\n\t\tattribute float instanceScale;\r\n\t`\r\n\r\n\tmaterial.onBeforeCompile = shader => {\r\n\t\tshader.vertexShader = `\r\n\t\t${attributeInjection}\r\n\t\t${shader.vertexShader}\r\n\t\t`\r\n\t}\r\n\r\n\t//alternatively one can use `uv_pars_vertex`\r\n\t//since displacement map is used in almost all of the shaders, this chunk is present \r\n\t//depth for example, has this chunk, so whatever attribute is added to StandardMaterial\r\n\t//is also going to be added to DepthMaterial\r\n\t/*shaderIncludes = {\r\n\t\tuv_pars_vertex: `\r\n\t\t${attributeInjection}\r\n\t\t${THREE.ShaderChunk.uv_pars_vertex}\r\n\t\t`\r\n\t}*/\r\n\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction((data)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSimpleInstanceExtended = true\r\n\t})\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n\r\nfunction SerializationManager(){\r\n\tthis.processFunctions = []\r\n\tthis.afterFunctions = []\r\n}\r\n\r\nSerializationManager.prototype = {\r\n\taddFunction: function( func ){\r\n\t\tthis.processFunctions.push(func)\r\n\t},\r\n\tserialize(data, meta){\r\n\t\tthis.processFunctions.forEach(f=>f(data))\r\n\t\treturn data\r\n\t},\r\n\tafterSerialize(data){\r\n\t\tthis.afterFunctions.forEach(f=>f(data))\r\n\t},\r\n\taddAfterFunction: function( func ){\r\n\t\tthis.afterFunctions.push(func)\r\n\t}\r\n}\r\n","// some utils\r\n\r\nimport * as THREE from \"three\";\r\n\r\nfunction addOrMergeProp( material, propName, data ) {\r\n\r\n\tif ( material[ propName ] ) {\r\n\r\n\t\tObject.assign( material[ propName ], data );\r\n\r\n\t} else {\r\n\r\n\t\tmaterial[ propName ] = data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//serialize\r\nfunction toJSON(){\r\n\tvar res = THREE.Material.prototype.toJSON.call(\r\n\t\tthis, \r\n\t\tundefined, \r\n\t\tthis._serializationManager.serialize.bind(this._serializationManager)\r\n\t)\r\n\tthis._serializationManager.afterSerialize.call(this._serializationManager,res)\r\n\treturn res\r\n}\r\n\r\n// from three's texture transform api, to be applied to a uniform matrix\r\nfunction setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\tvar c = Math.cos( rotation );\r\n\tvar s = Math.sin( rotation );\r\n\r\n\tthis.set(\r\n\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t0, 0, 0\r\n\t);\r\n\r\n}\r\n\r\n//spec gloss stuff ---------------------------------------------------------\r\n\r\n//this extends the shader to use specular gloss PBR model instead of rough/metal\r\n\r\nvar specularMapFragmentChunk = [\r\n\t'vec3 specularFactor = specular;',\r\n\t'#ifdef USE_SPECULARMAP',\r\n\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\r\n\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tspecularFactor *= texelSpecular.rgb;',\r\n\t'#endif',\r\n\t// 'gl_FragColor = vec4(vec3(specularFactor),1.);',\r\n\t// 'return;',\r\n].join( '\\n' );\r\n\r\nvar glossinessMapFragmentChunk = [\r\n\t'float glossinessFactor = glossiness;',\r\n\t'#ifdef USE_GLOSSINESSMAP',\r\n\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tglossinessFactor *= texelGlossiness.a;',\r\n\t// 'gl_FragColor = vec4(vec3(glossinessFactor),1.);',\r\n\t// 'return;',\r\n\t'#endif',\r\n].join( '\\n' );\r\n\r\nvar lightPhysicalFragmentChunk = [\r\n\t'PhysicalMaterial material;',\r\n\t'material.diffuseColor = diffuseColor.rgb;',\r\n\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\r\n\t'material.specularColor = specularFactor.rgb;',\r\n].join( '\\n' );\r\n\r\nvar SHADER_INCLUDES_SPEC_GLOSS = {\r\n\troughnessmap_fragment: specularMapFragmentChunk,\r\n\tmetalnessmap_fragment: glossinessMapFragmentChunk,\r\n\tlights_physical_fragment: lightPhysicalFragmentChunk,\r\n};\r\n\r\nexport default function decorateMaterialWithSpecGloss( material ) {\r\n\tconsole.log(\"gloss\");\r\n\tif ( material.isSpecGlossExtended ) return material;\r\n\r\n\tmaterial.isSpecGlossExtended = true;\r\n\r\n\t// these are the extra uniforms, but instead of being stored in .userData, or some such place\r\n\t// a designated prop could be used\r\n\tvar shaderUniforms = {\r\n\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ), type: 'vec3', stage: 'fragment' }, //fragment can be ommitted (defaults to it) but for sake of clarity\r\n\t\tglossiness: { value: 1, type: 'float', stage: 'fragment' },\r\n\t\tglossinessMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t\tspecularMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t};\r\n\r\n\tvar shaderIncludes = Object.assign({},SHADER_INCLUDES_SPEC_GLOSS)\r\n\r\n\tvar defines = {USE_GLOSSINESSMAP: ''}\r\n\r\n\t//conflicts could be resolved here\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\taddOrMergeProp( material, 'defines', defines );\r\n\r\n\tdelete material.metalnessMap\r\n\tdelete material.roughnessMap\r\n\r\n\t//expose uniforms as props for a cleaner interface (but shaderUniforms is also available so this can be omitted)\r\n\t//it just leads to a cleaner more familiar interface (PhongMaterial has specularMap, so this now has it too)\r\n\tfor ( let propName in shaderUniforms ) {\r\n\r\n\t\tObject.defineProperty( material, propName, {\r\n\t\t\tget: ()=> shaderUniforms[ propName ].value,\r\n\t\t\tset: ( v )=> (shaderUniforms[ propName ].value = v),\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\tvar f = function(data,meta){\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSpecGlossExtended = true\r\n\t\tdata.glossiness = this.glossiness\r\n\t\tdata.specular = this.specular.getHex()\r\n\t\tif(this.glossinessMap && this.glossinessMap.isTexture) data.glossinessMap = this.glossinessMap.toJSON( meta ).uuid \r\n\t}.bind(material)\r\n\r\n\tmaterial._serializationManager.addFunction(f)\r\n\t\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n// multi uv stuff ---------------------------------------------------------\r\n\r\n// this moves the transform from textures to the material, textures become just data\r\n\r\n//list of maps to be extended, these are easy\r\nvar DEFAULT_MAP_LIST = [\r\n\t'alphaMap',\r\n\t'specularMap',\r\n\t'map',\r\n\t'emissiveMap',\r\n\t'metalnessMap',\r\n\t'roughnessMap',\r\n\t'glossinessMap' //this one is from the other example, but if its there it should work, this can be solved to work together somehow\r\n];\r\n\r\n//this can be programatic\r\n//it tells the extension where to look for certain maps\r\n//these follow the /texture2D( $mapname, vUv )/ pattern\r\n//normal map is a bit more complex and would require a non programatic chunk \r\nvar PROP_TO_CHUNK_MAP = {\r\n\t'alphaMap': 'alphamap_fragment',\r\n\t'specularMap': 'specularmap_fragment',\r\n\t'map': 'map_fragment',\r\n\t'emissiveMap': 'emissivemap_fragment',\r\n\t'metalnessMap': 'metalnessmap_fragment',\r\n\t'roughnessMap': 'roughnessmap_fragment',\r\n\t'glossinessMap': 'metalnessmap_fragment', //this one cant be programatic because it belongs to another override, could be a specific check somewhere else\r\n\t'specularMapGloss': 'roughnessmap_fragment',\r\n};\r\n\r\n//some utils\r\n\r\nvar mapRegex = /texture2D\\( (.*Map|map), vUv \\)/gm //look for the pattern /texture2D( $someMap, vUv )/\r\n\r\n//because the other extension changes roughnessMap to specularMap we need the $1 to replace the name, otherwise it could be `mapName`\r\nfunction getReplaceString(mapName){\r\n\treturn `texture2D( $1, ( ${getUniformNameFromProp(mapName)} * vec3( vUv, 1. ) ).xy )`\r\n}\r\n\r\n//in order to keep the uniform name obvious that it belongs to the GLSL context, and to make it as private sounding as possible\r\nfunction getUniformNameFromProp(prop){\r\n\treturn `u_${prop}Transform`\r\n}\r\n\r\n//a utility to add the necessary transform properties to a material based on an arbitrary map name\r\n//so if specularMap is provided it will create these Vector2, a float, and an updateMatrix method\r\n//this is very similar to the Texture transform interface the only difference being that the props are prefixed\r\n//myTexture.repeat vs myMaterial.specularMapRepeat \r\nfunction addMapTransformPropsToMaterial( material, mapName ){\r\n\r\n\tlet _mapName = mapName\r\n\tmaterial[`${mapName}Repeat`] = new THREE.Vector2(1,1)\r\n\tmaterial[`${mapName}Offset`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Center`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Rotation`] = 0\r\n\tmaterial[`${mapName}UpdateMatrix`] = function(){\r\n\t\tthis.shaderUniforms[getUniformNameFromProp(_mapName)].value\r\n\t\t.setUvTransform(\r\n\t\t\tthis[`${_mapName}Offset`].x,\r\n\t\t\tthis[`${_mapName}Offset`].y, \r\n\t\t\tthis[`${_mapName}Repeat`].x,\r\n\t\t\tthis[`${_mapName}Repeat`].y, \r\n\t\t\tthis[`${_mapName}Rotation`], \r\n\t\t\tthis[`${_mapName}Center`].x,\r\n\t\t\tthis[`${_mapName}Center`].y, \r\n\t\t)\r\n\t}.bind(material)\r\n}\r\n\r\n\r\nexport function decorateMaterialWithPerMapTransforms( material, mapList ) {\r\n\tconsole.log(\"default\");\r\n\tif ( material.isPerMapTransformExtended ) return material;\r\n\r\n\tmaterial.isPerMapTransformExtended = true;\r\n\r\n\t//one can provide a subset from outside\r\n\tmapList = mapList || DEFAULT_MAP_LIST;\r\n\r\n\tvar shaderUniforms = {}\r\n\tvar shaderIncludes = {}\r\n\tvar serialize = []\r\n\r\n\tfor ( var i = 0; i < mapList.length; i ++ ) {\r\n\r\n\t\tvar mapName = mapList[ i ];\r\n\r\n\r\n\t\tif ( material[ mapName ] !== undefined ) {\r\n\r\n\t\t\taddMapTransformPropsToMaterial(material, mapName)\r\n\r\n\t\t\tvar uniform = { value: new THREE.Matrix3(), type:'mat3', stage: 'fragment' };\r\n\t\t\tuniform.value.setUvTransform = setUvTransform.bind( uniform.value );\r\n\r\n\t\t\tshaderUniforms[getUniformNameFromProp(mapName)] = uniform\r\n\r\n\t\t\t//this is for resolving the conflict, its not the most elegant solution but it works\r\n\t\t\t//i believe that this would be solved by refactoring the shader templates\r\n\t\t\tvar lookup = mapName\r\n\t\t\tif( material.isSpecGlossExtended && mapName === 'specularMap'){\r\n\t\t\t\tlookup = 'specularMapGloss' \r\n\t\t\t}\r\n\t\t\tserialize.push(mapName)\r\n\r\n\t\t\t//based on the map name ie. specularMap or even an extended glossinessMap pick a chunk\r\n\t\t\tvar chunkName = PROP_TO_CHUNK_MAP[lookup]\r\n\r\n\t\t\t//if there already is a chunk from some extension, pick that, otherwise copy the default chunk\r\n\t\t\tvar shaderChunk = (material.shaderIncludes && material.shaderIncludes[chunkName]) || THREE.ShaderChunk[chunkName]\r\n\r\n\t\t\t//apply the string transformation, this contains the copy of whatever chunk was provided (default or custom)\r\n\t\t\tshaderChunk = shaderChunk.replace( mapRegex , getReplaceString(mapName) )\r\n\r\n\t\t\t//provide this copy as the include chunk, this shader wont look up THREE.ShaderChunk \r\n\t\t\t//and doesnt have to wait for onBeforeCompile to do the transformation\r\n\t\t\t//final transformed chunk is already stored here in this context sync\r\n\t\t\tshaderIncludes[ chunkName ] = shaderChunk\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//combine with other chunks\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction(((data,meta)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isPerMapTransformExtended = true\r\n\r\n\t\tserialize.forEach(mapName=>{\r\n\t\t\tdata[`${mapName}Repeat`] = material[`${mapName}Repeat`].toArray()\r\n\t\t\tdata[`${mapName}Offset`] = material[`${mapName}Offset`].toArray()\r\n\t\t\tdata[`${mapName}Center`] = material[`${mapName}Center`].toArray()\r\n\t\t\tdata[`${mapName}Rotation`] = material[`${mapName}Rotation`]\r\n\t\t})\r\n\r\n\t\treturn data\r\n\r\n\t}).bind(material))\r\n\r\n\r\n\tmaterial._serializationManager.addAfterFunction(\r\n\t\tfunction( data ){\r\n\t\t\tdelete data.roughnessMap\r\n\t\t\tdelete data.roughness\r\n\t\t\tdelete data.metalnessMap\r\n\t\t\tdelete data.metalness\t\r\n\t\t}\r\n\t)\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n}\r\n\r\n// simple instance stuff from lambert example  ---------------------------------------------------------\r\n\r\n//this is a stage after begin_vertex, this would be more elegant with hooks and template refactor\r\nvar after_vertex_transform_chunk = `\r\n\ttransformed *= instanceScale; //the value present in transformed is in model space, \r\n\ttransformed = transformed + instanceOffset;\r\n`\r\n\r\nexport function decorateMaterialWithSimpleInstancing( material ) {\r\n\tconsole.log(\"shaderIncludes\");\r\n\tif( material.isSimpleInstanceExtended ) return material\r\n\r\n\tmaterial.isSimpleInstanceExtended = true \r\n\t\r\n\t//make a custom chunk that includes a copy of the default chunk from THREE.ShaderChunk\r\n\t//followed by a custom chunk, that is simply appended to the copy\r\n\tvar shaderIncludes = { \r\n\t\tbegin_vertex:`\r\n\t\t\t${THREE.ShaderChunk.begin_vertex}\r\n\t\t\t${after_vertex_transform_chunk}\r\n\t\t` \r\n\t}\r\n\r\n\tconsole.log(\"shaderIncludes\");\r\n\t//no good global chunk, but could be uv_pars, heres how to make it work with onbeforecompile\r\n\t//because this is somewhat of a set and forget thing, onBeforeCompile (or onBeforeParse) is \r\n\t//perfectly valid to use here\r\n\t//\"here are some attribute names, whenver you get around to assemblying the shader on WebGL level use them\"\r\n\t//A uniform (over an attribute) would be better if it were available in this scope\r\n\t\r\n\tvar attributeInjection = `\r\n\t\tattribute vec3 instanceOffset; \r\n\t\tattribute float instanceScale;\r\n\t`\r\n\r\n\tmaterial.onBeforeCompile = shader => {\r\n\t\tshader.vertexShader = `\r\n\t\t${attributeInjection}\r\n\t\t${shader.vertexShader}\r\n\t\t`\r\n\t}\r\n\r\n\t//alternatively one can use `uv_pars_vertex`\r\n\t//since displacement map is used in almost all of the shaders, this chunk is present \r\n\t//depth for example, has this chunk, so whatever attribute is added to StandardMaterial\r\n\t//is also going to be added to DepthMaterial\r\n\t/*shaderIncludes = {\r\n\t\tuv_pars_vertex: `\r\n\t\t${attributeInjection}\r\n\t\t${THREE.ShaderChunk.uv_pars_vertex}\r\n\t\t`\r\n\t}*/\r\n\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction((data)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSimpleInstanceExtended = true\r\n\t})\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n\r\nfunction SerializationManager(){\r\n\tthis.processFunctions = []\r\n\tthis.afterFunctions = []\r\n}\r\n\r\nSerializationManager.prototype = {\r\n\taddFunction: function( func ){\r\n\t\tthis.processFunctions.push(func)\r\n\t},\r\n\tserialize(data, meta){\r\n\t\tthis.processFunctions.forEach(f=>f(data))\r\n\t\treturn data\r\n\t},\r\n\tafterSerialize(data){\r\n\t\tthis.afterFunctions.forEach(f=>f(data))\r\n\t},\r\n\taddAfterFunction: function( func ){\r\n\t\tthis.afterFunctions.push(func)\r\n\t}\r\n}\r\n","// some utils\r\n\r\nimport * as THREE from \"three\";\r\n\r\nfunction addOrMergeProp( material, propName, data ) {\r\n\r\n\tif ( material[ propName ] ) {\r\n\r\n\t\tObject.assign( material[ propName ], data );\r\n\r\n\t} else {\r\n\r\n\t\tmaterial[ propName ] = data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//serialize\r\nfunction toJSON(){\r\n\tvar res = THREE.Material.prototype.toJSON.call(\r\n\t\tthis, \r\n\t\tundefined, \r\n\t\tthis._serializationManager.serialize.bind(this._serializationManager)\r\n\t)\r\n\tthis._serializationManager.afterSerialize.call(this._serializationManager,res)\r\n\treturn res\r\n}\r\n\r\n// from three's texture transform api, to be applied to a uniform matrix\r\nfunction setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\tvar c = Math.cos( rotation );\r\n\tvar s = Math.sin( rotation );\r\n\r\n\tthis.set(\r\n\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t0, 0, 0\r\n\t);\r\n\r\n}\r\n\r\n//spec gloss stuff ---------------------------------------------------------\r\n\r\n//this extends the shader to use specular gloss PBR model instead of rough/metal\r\n\r\nvar specularMapFragmentChunk = [\r\n\t'vec3 specularFactor = specular;',\r\n\t'#ifdef USE_SPECULARMAP',\r\n\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\r\n\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tspecularFactor *= texelSpecular.rgb;',\r\n\t'#endif',\r\n\t// 'gl_FragColor = vec4(vec3(specularFactor),1.);',\r\n\t// 'return;',\r\n].join( '\\n' );\r\n\r\nvar glossinessMapFragmentChunk = [\r\n\t'float glossinessFactor = glossiness;',\r\n\t'#ifdef USE_GLOSSINESSMAP',\r\n\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tglossinessFactor *= texelGlossiness.a;',\r\n\t// 'gl_FragColor = vec4(vec3(glossinessFactor),1.);',\r\n\t// 'return;',\r\n\t'#endif',\r\n].join( '\\n' );\r\n\r\nvar lightPhysicalFragmentChunk = [\r\n\t'PhysicalMaterial material;',\r\n\t'material.diffuseColor = diffuseColor.rgb;',\r\n\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\r\n\t'material.specularColor = specularFactor.rgb;',\r\n].join( '\\n' );\r\n\r\nvar SHADER_INCLUDES_SPEC_GLOSS = {\r\n\troughnessmap_fragment: specularMapFragmentChunk,\r\n\tmetalnessmap_fragment: glossinessMapFragmentChunk,\r\n\tlights_physical_fragment: lightPhysicalFragmentChunk,\r\n};\r\n\r\nexport function decorateMaterialWithSpecGloss( material ) {\r\n\r\n\tif ( material.isSpecGlossExtended ) return material;\r\n\r\n\tmaterial.isSpecGlossExtended = true;\r\n\r\n\t// these are the extra uniforms, but instead of being stored in .userData, or some such place\r\n\t// a designated prop could be used\r\n\tvar shaderUniforms = {\r\n\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ), type: 'vec3', stage: 'fragment' }, //fragment can be ommitted (defaults to it) but for sake of clarity\r\n\t\tglossiness: { value: 1, type: 'float', stage: 'fragment' },\r\n\t\tglossinessMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t\tspecularMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t};\r\n\r\n\tvar shaderIncludes = Object.assign({},SHADER_INCLUDES_SPEC_GLOSS)\r\n\r\n\tvar defines = {USE_GLOSSINESSMAP: ''}\r\n\r\n\t//conflicts could be resolved here\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\taddOrMergeProp( material, 'defines', defines );\r\n\r\n\tdelete material.metalnessMap\r\n\tdelete material.roughnessMap\r\n\r\n\t//expose uniforms as props for a cleaner interface (but shaderUniforms is also available so this can be omitted)\r\n\t//it just leads to a cleaner more familiar interface (PhongMaterial has specularMap, so this now has it too)\r\n\tfor ( let propName in shaderUniforms ) {\r\n\r\n\t\tObject.defineProperty( material, propName, {\r\n\t\t\tget: ()=> shaderUniforms[ propName ].value,\r\n\t\t\tset: ( v )=> (shaderUniforms[ propName ].value = v),\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\tvar f = function(data,meta){\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSpecGlossExtended = true\r\n\t\tdata.glossiness = this.glossiness\r\n\t\tdata.specular = this.specular.getHex()\r\n\t\tif(this.glossinessMap && this.glossinessMap.isTexture) data.glossinessMap = this.glossinessMap.toJSON( meta ).uuid \r\n\t}.bind(material)\r\n\r\n\tmaterial._serializationManager.addFunction(f)\r\n\t\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n// multi uv stuff ---------------------------------------------------------\r\n\r\n// this moves the transform from textures to the material, textures become just data\r\n\r\n//list of maps to be extended, these are easy\r\nvar DEFAULT_MAP_LIST = [\r\n\t'alphaMap',\r\n\t'specularMap',\r\n\t'map',\r\n\t'emissiveMap',\r\n\t'metalnessMap',\r\n\t'roughnessMap',\r\n\t'glossinessMap' //this one is from the other example, but if its there it should work, this can be solved to work together somehow\r\n];\r\n\r\n//this can be programatic\r\n//it tells the extension where to look for certain maps\r\n//these follow the /texture2D( $mapname, vUv )/ pattern\r\n//normal map is a bit more complex and would require a non programatic chunk \r\nvar PROP_TO_CHUNK_MAP = {\r\n\t'alphaMap': 'alphamap_fragment',\r\n\t'specularMap': 'specularmap_fragment',\r\n\t'map': 'map_fragment',\r\n\t'emissiveMap': 'emissivemap_fragment',\r\n\t'metalnessMap': 'metalnessmap_fragment',\r\n\t'roughnessMap': 'roughnessmap_fragment',\r\n\t'glossinessMap': 'metalnessmap_fragment', //this one cant be programatic because it belongs to another override, could be a specific check somewhere else\r\n\t'specularMapGloss': 'roughnessmap_fragment',\r\n};\r\n\r\n//some utils\r\n\r\nvar mapRegex = /texture2D\\( (.*Map|map), vUv \\)/gm //look for the pattern /texture2D( $someMap, vUv )/\r\n\r\n//because the other extension changes roughnessMap to specularMap we need the $1 to replace the name, otherwise it could be `mapName`\r\nfunction getReplaceString(mapName){\r\n\treturn `texture2D( $1, ( ${getUniformNameFromProp(mapName)} * vec3( vUv, 1. ) ).xy )`\r\n}\r\n\r\n//in order to keep the uniform name obvious that it belongs to the GLSL context, and to make it as private sounding as possible\r\nfunction getUniformNameFromProp(prop){\r\n\treturn `u_${prop}Transform`\r\n}\r\n\r\n//a utility to add the necessary transform properties to a material based on an arbitrary map name\r\n//so if specularMap is provided it will create these Vector2, a float, and an updateMatrix method\r\n//this is very similar to the Texture transform interface the only difference being that the props are prefixed\r\n//myTexture.repeat vs myMaterial.specularMapRepeat \r\nfunction addMapTransformPropsToMaterial( material, mapName ){\r\n\r\n\tlet _mapName = mapName\r\n\tmaterial[`${mapName}Repeat`] = new THREE.Vector2(1,1)\r\n\tmaterial[`${mapName}Offset`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Center`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Rotation`] = 0\r\n\tmaterial[`${mapName}UpdateMatrix`] = function(){\r\n\t\tthis.shaderUniforms[getUniformNameFromProp(_mapName)].value\r\n\t\t.setUvTransform(\r\n\t\t\tthis[`${_mapName}Offset`].x,\r\n\t\t\tthis[`${_mapName}Offset`].y, \r\n\t\t\tthis[`${_mapName}Repeat`].x,\r\n\t\t\tthis[`${_mapName}Repeat`].y, \r\n\t\t\tthis[`${_mapName}Rotation`], \r\n\t\t\tthis[`${_mapName}Center`].x,\r\n\t\t\tthis[`${_mapName}Center`].y, \r\n\t\t)\r\n\t}.bind(material)\r\n}\r\n\r\n\r\nexport function decorateMaterialWithPerMapTransforms( material, mapList ) {\r\n\r\n\tif ( material.isPerMapTransformExtended ) return material;\r\n\r\n\tmaterial.isPerMapTransformExtended = true;\r\n\r\n\t//one can provide a subset from outside\r\n\tmapList = mapList || DEFAULT_MAP_LIST;\r\n\r\n\tvar shaderUniforms = {}\r\n\tvar shaderIncludes = {}\r\n\tvar serialize = []\r\n\r\n\tfor ( var i = 0; i < mapList.length; i ++ ) {\r\n\r\n\t\tvar mapName = mapList[ i ];\r\n\r\n\r\n\t\tif ( material[ mapName ] !== undefined ) {\r\n\r\n\t\t\taddMapTransformPropsToMaterial(material, mapName)\r\n\r\n\t\t\tvar uniform = { value: new THREE.Matrix3(), type:'mat3', stage: 'fragment' };\r\n\t\t\tuniform.value.setUvTransform = setUvTransform.bind( uniform.value );\r\n\r\n\t\t\tshaderUniforms[getUniformNameFromProp(mapName)] = uniform\r\n\r\n\t\t\t//this is for resolving the conflict, its not the most elegant solution but it works\r\n\t\t\t//i believe that this would be solved by refactoring the shader templates\r\n\t\t\tvar lookup = mapName\r\n\t\t\tif( material.isSpecGlossExtended && mapName === 'specularMap'){\r\n\t\t\t\tlookup = 'specularMapGloss' \r\n\t\t\t}\r\n\t\t\tserialize.push(mapName)\r\n\r\n\t\t\t//based on the map name ie. specularMap or even an extended glossinessMap pick a chunk\r\n\t\t\tvar chunkName = PROP_TO_CHUNK_MAP[lookup]\r\n\r\n\t\t\t//if there already is a chunk from some extension, pick that, otherwise copy the default chunk\r\n\t\t\tvar shaderChunk = (material.shaderIncludes && material.shaderIncludes[chunkName]) || THREE.ShaderChunk[chunkName]\r\n\r\n\t\t\t//apply the string transformation, this contains the copy of whatever chunk was provided (default or custom)\r\n\t\t\tshaderChunk = shaderChunk.replace( mapRegex , getReplaceString(mapName) )\r\n\r\n\t\t\t//provide this copy as the include chunk, this shader wont look up THREE.ShaderChunk \r\n\t\t\t//and doesnt have to wait for onBeforeCompile to do the transformation\r\n\t\t\t//final transformed chunk is already stored here in this context sync\r\n\t\t\tshaderIncludes[ chunkName ] = shaderChunk\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//combine with other chunks\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction(((data,meta)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isPerMapTransformExtended = true\r\n\r\n\t\tserialize.forEach(mapName=>{\r\n\t\t\tdata[`${mapName}Repeat`] = material[`${mapName}Repeat`].toArray()\r\n\t\t\tdata[`${mapName}Offset`] = material[`${mapName}Offset`].toArray()\r\n\t\t\tdata[`${mapName}Center`] = material[`${mapName}Center`].toArray()\r\n\t\t\tdata[`${mapName}Rotation`] = material[`${mapName}Rotation`]\r\n\t\t})\r\n\r\n\t\treturn data\r\n\r\n\t}).bind(material))\r\n\r\n\r\n\tmaterial._serializationManager.addAfterFunction(\r\n\t\tfunction( data ){\r\n\t\t\tdelete data.roughnessMap\r\n\t\t\tdelete data.roughness\r\n\t\t\tdelete data.metalnessMap\r\n\t\t\tdelete data.metalness\t\r\n\t\t}\r\n\t)\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n}\r\n\r\n// simple instance stuff from lambert example  ---------------------------------------------------------\r\n\r\n//this is a stage after begin_vertex, this would be more elegant with hooks and template refactor\r\nvar after_vertex_transform_chunk = `\r\n\ttransformed *= instanceScale; //the value present in transformed is in model space, \r\n\ttransformed = transformed + instanceOffset;\r\n`\r\n\r\nexport default function decorateMaterialWithSimpleInstancing( material ) {\r\n\r\n\tif( material.isSimpleInstanceExtended ) return material\r\n\r\n\tmaterial.isSimpleInstanceExtended = true \r\n\t\r\n\t//make a custom chunk that includes a copy of the default chunk from THREE.ShaderChunk\r\n\t//followed by a custom chunk, that is simply appended to the copy\r\n\r\n\tvar shaderIncludes = {\r\n\r\n\t\tbegin_vertex:`\r\n\t\t\t${THREE.ShaderChunk.begin_vertex}\r\n\t\t\t${after_vertex_transform_chunk}\r\n\t\t` \r\n\t}\r\n\r\n\t//no good global chunk, but could be uv_pars, heres how to make it work with onbeforecompile\r\n\t//because this is somewhat of a set and forget thing, onBeforeCompile (or onBeforeParse) is \r\n\t//perfectly valid to use here\r\n\t//\"here are some attribute names, whenver you get around to assemblying the shader on WebGL level use them\"\r\n\t//A uniform (over an attribute) would be better if it were available in this scope\r\n\t\r\n\tvar attributeInjection = `\r\n\t\tattribute vec3 instanceOffset; \r\n\t\tattribute float instanceScale;\r\n\t`\r\n\r\n\tmaterial.onBeforeCompile = shader => {\r\n\t\t// console.log(\"vv\",shader.vertexShader);\r\n\t\tshader.uniforms.uTime = material.userData.uTime;\r\n\t\tshader.vertexShader = `\r\n\t\tattribute vec3 instanceOffset;\r\n\t\t\tattribute float instanceScale;\r\n\t\t\t#include <common>\r\n\t\t\t#include <uv_pars_vertex>\r\n\t\t\tattribute float aIndex;\r\n\t\t\t#include <displacementmap_pars_vertex>\r\n\t\t\t#include <morphtarget_pars_vertex>\r\n\t\t\t#include <skinning_pars_vertex>\r\n\t\t\t#include <logdepthbuf_pars_vertex>\r\n\t\t\t#include <clipping_planes_pars_vertex>\r\n\t\t\tvarying vec2 vHighPrecisionZW;\r\n\t\t\tuniform float uTime;\r\n\t\t\tvoid main() {\r\n\t\t\t\t#include <uv_vertex>\r\n\t\t\t\t#include <skinbase_vertex>\r\n\t\t\t\t#ifdef USE_DISPLACEMENTMAP\r\n\t\t\t\t\t#include <beginnormal_vertex>\r\n\t\t\t\t\t#include <morphnormal_vertex>\r\n\t\t\t\t\t#include <skinnormal_vertex>\r\n\t\t\t\t#endif\r\n\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t// instanced\r\n\t\t\t\tfloat _ind = aIndex + uTime;\r\n\t\t\t\ttransformed *= 1. + 0.5 * sin(24.0 * 3.14 * _ind );\r\n\t\t\t\ttransformed = transformed + instanceOffset;\r\n\t\t\t\t#include <morphtarget_vertex>\r\n\t\t\t\t#include <skinning_vertex>\r\n\t\t\t\t#include <displacementmap_vertex>\r\n\t\t\t\t#include <project_vertex>\r\n\t\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t\tvHighPrecisionZW = gl_Position.zw;\r\n\t\t\t}\r\n\t\t`\r\n\t}\r\n\r\n\t\t\t// ${attributeInjection}\r\n\t//alternatively one can use `uv_pars_vertex`\r\n\t//since displacement map is used in almost all of the shaders, this chunk is present \r\n\t//depth for example, has this chunk, so whatever attribute is added to StandardMaterial\r\n\t//is also going to be added to DepthMaterial\r\n\t// shaderIncludes = {\r\n\t// \tuv_pars_vertex: `\r\n\t// \t${attributeInjection}\r\n\t// \t${THREE.ShaderChunk.uv_pars_vertex}\r\n\t// \t`\r\n\t// }\r\n\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction((data)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSimpleInstanceExtended = true\r\n\t})\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\nfunction SerializationManager(){\r\n\tthis.processFunctions = []\r\n\tthis.afterFunctions = []\r\n}\r\n\r\nSerializationManager.prototype = {\r\n\taddFunction: function( func ){\r\n\t\tthis.processFunctions.push(func)\r\n\t},\r\n\tserialize(data, meta){\r\n\t\tthis.processFunctions.forEach(f=>f(data))\r\n\t\treturn data\r\n\t},\r\n\tafterSerialize(data){\r\n\t\tthis.afterFunctions.forEach(f=>f(data))\r\n\t},\r\n\taddAfterFunction: function( func ){\r\n\t\tthis.afterFunctions.push(func)\r\n\t}\r\n}\r\n","// some utils\r\n\r\nimport * as THREE from \"three\";\r\n\r\nfunction addOrMergeProp( material, propName, data ) {\r\n\r\n\tif ( material[ propName ] ) {\r\n\r\n\t\tObject.assign( material[ propName ], data );\r\n\r\n\t} else {\r\n\r\n\t\tmaterial[ propName ] = data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//serialize\r\nfunction toJSON(){\r\n\tvar res = THREE.Material.prototype.toJSON.call(\r\n\t\tthis, \r\n\t\tundefined, \r\n\t\tthis._serializationManager.serialize.bind(this._serializationManager)\r\n\t)\r\n\tthis._serializationManager.afterSerialize.call(this._serializationManager,res)\r\n\treturn res\r\n}\r\n\r\n// from three's texture transform api, to be applied to a uniform matrix\r\nfunction setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\tvar c = Math.cos( rotation );\r\n\tvar s = Math.sin( rotation );\r\n\r\n\tthis.set(\r\n\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t0, 0, 0\r\n\t);\r\n\r\n}\r\n\r\n//spec gloss stuff ---------------------------------------------------------\r\n\r\n//this extends the shader to use specular gloss PBR model instead of rough/metal\r\n\r\nvar specularMapFragmentChunk = [\r\n\t'vec3 specularFactor = specular;',\r\n\t'#ifdef USE_SPECULARMAP',\r\n\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\r\n\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tspecularFactor *= texelSpecular.rgb;',\r\n\t'#endif',\r\n\t// 'gl_FragColor = vec4(vec3(specularFactor),1.);',\r\n\t// 'return;',\r\n].join( '\\n' );\r\n\r\nvar glossinessMapFragmentChunk = [\r\n\t'float glossinessFactor = glossiness;',\r\n\t'#ifdef USE_GLOSSINESSMAP',\r\n\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n\t'\tglossinessFactor *= texelGlossiness.a;',\r\n\t// 'gl_FragColor = vec4(vec3(glossinessFactor),1.);',\r\n\t// 'return;',\r\n\t'#endif',\r\n].join( '\\n' );\r\n\r\nvar lightPhysicalFragmentChunk = [\r\n\t'PhysicalMaterial material;',\r\n\t'material.diffuseColor = diffuseColor.rgb;',\r\n\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\r\n\t'material.specularColor = specularFactor.rgb;',\r\n].join( '\\n' );\r\n\r\nvar SHADER_INCLUDES_SPEC_GLOSS = {\r\n\troughnessmap_fragment: specularMapFragmentChunk,\r\n\tmetalnessmap_fragment: glossinessMapFragmentChunk,\r\n\tlights_physical_fragment: lightPhysicalFragmentChunk,\r\n};\r\n\r\nexport function decorateMaterialWithSpecGloss( material ) {\r\n\r\n\tif ( material.isSpecGlossExtended ) return material;\r\n\r\n\tmaterial.isSpecGlossExtended = true;\r\n\r\n\t// these are the extra uniforms, but instead of being stored in .userData, or some such place\r\n\t// a designated prop could be used\r\n\tvar shaderUniforms = {\r\n\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ), type: 'vec3', stage: 'fragment' }, //fragment can be ommitted (defaults to it) but for sake of clarity\r\n\t\tglossiness: { value: 1, type: 'float', stage: 'fragment' },\r\n\t\tglossinessMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t\tspecularMap: { value: null, type: 'sampler2D', stage: 'fragment' },\r\n\t};\r\n\r\n\tvar shaderIncludes = Object.assign({},SHADER_INCLUDES_SPEC_GLOSS)\r\n\r\n\tvar defines = {USE_GLOSSINESSMAP: ''}\r\n\r\n\t//conflicts could be resolved here\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\taddOrMergeProp( material, 'defines', defines );\r\n\r\n\tdelete material.metalnessMap\r\n\tdelete material.roughnessMap\r\n\r\n\t//expose uniforms as props for a cleaner interface (but shaderUniforms is also available so this can be omitted)\r\n\t//it just leads to a cleaner more familiar interface (PhongMaterial has specularMap, so this now has it too)\r\n\tfor ( let propName in shaderUniforms ) {\r\n\r\n\t\tObject.defineProperty( material, propName, {\r\n\t\t\tget: ()=> shaderUniforms[ propName ].value,\r\n\t\t\tset: ( v )=> (shaderUniforms[ propName ].value = v),\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\tvar f = function(data,meta){\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSpecGlossExtended = true\r\n\t\tdata.glossiness = this.glossiness\r\n\t\tdata.specular = this.specular.getHex()\r\n\t\tif(this.glossinessMap && this.glossinessMap.isTexture) data.glossinessMap = this.glossinessMap.toJSON( meta ).uuid \r\n\t}.bind(material)\r\n\r\n\tmaterial._serializationManager.addFunction(f)\r\n\t\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n// multi uv stuff ---------------------------------------------------------\r\n\r\n// this moves the transform from textures to the material, textures become just data\r\n\r\n//list of maps to be extended, these are easy\r\nvar DEFAULT_MAP_LIST = [\r\n\t'alphaMap',\r\n\t'specularMap',\r\n\t'map',\r\n\t'emissiveMap',\r\n\t'metalnessMap',\r\n\t'roughnessMap',\r\n\t'glossinessMap' //this one is from the other example, but if its there it should work, this can be solved to work together somehow\r\n];\r\n\r\n//this can be programatic\r\n//it tells the extension where to look for certain maps\r\n//these follow the /texture2D( $mapname, vUv )/ pattern\r\n//normal map is a bit more complex and would require a non programatic chunk \r\nvar PROP_TO_CHUNK_MAP = {\r\n\t'alphaMap': 'alphamap_fragment',\r\n\t'specularMap': 'specularmap_fragment',\r\n\t'map': 'map_fragment',\r\n\t'emissiveMap': 'emissivemap_fragment',\r\n\t'metalnessMap': 'metalnessmap_fragment',\r\n\t'roughnessMap': 'roughnessmap_fragment',\r\n\t'glossinessMap': 'metalnessmap_fragment', //this one cant be programatic because it belongs to another override, could be a specific check somewhere else\r\n\t'specularMapGloss': 'roughnessmap_fragment',\r\n};\r\n\r\n//some utils\r\n\r\nvar mapRegex = /texture2D\\( (.*Map|map), vUv \\)/gm //look for the pattern /texture2D( $someMap, vUv )/\r\n\r\n//because the other extension changes roughnessMap to specularMap we need the $1 to replace the name, otherwise it could be `mapName`\r\nfunction getReplaceString(mapName){\r\n\treturn `texture2D( $1, ( ${getUniformNameFromProp(mapName)} * vec3( vUv, 1. ) ).xy )`\r\n}\r\n\r\n//in order to keep the uniform name obvious that it belongs to the GLSL context, and to make it as private sounding as possible\r\nfunction getUniformNameFromProp(prop){\r\n\treturn `u_${prop}Transform`\r\n}\r\n\r\n//a utility to add the necessary transform properties to a material based on an arbitrary map name\r\n//so if specularMap is provided it will create these Vector2, a float, and an updateMatrix method\r\n//this is very similar to the Texture transform interface the only difference being that the props are prefixed\r\n//myTexture.repeat vs myMaterial.specularMapRepeat \r\nfunction addMapTransformPropsToMaterial( material, mapName ){\r\n\r\n\tlet _mapName = mapName\r\n\tmaterial[`${mapName}Repeat`] = new THREE.Vector2(1,1)\r\n\tmaterial[`${mapName}Offset`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Center`] = new THREE.Vector2()\r\n\tmaterial[`${mapName}Rotation`] = 0\r\n\tmaterial[`${mapName}UpdateMatrix`] = function(){\r\n\t\tthis.shaderUniforms[getUniformNameFromProp(_mapName)].value\r\n\t\t.setUvTransform(\r\n\t\t\tthis[`${_mapName}Offset`].x,\r\n\t\t\tthis[`${_mapName}Offset`].y, \r\n\t\t\tthis[`${_mapName}Repeat`].x,\r\n\t\t\tthis[`${_mapName}Repeat`].y, \r\n\t\t\tthis[`${_mapName}Rotation`], \r\n\t\t\tthis[`${_mapName}Center`].x,\r\n\t\t\tthis[`${_mapName}Center`].y, \r\n\t\t)\r\n\t}.bind(material)\r\n}\r\n\r\n\r\nexport function decorateMaterialWithPerMapTransforms( material, mapList ) {\r\n\r\n\tif ( material.isPerMapTransformExtended ) return material;\r\n\r\n\tmaterial.isPerMapTransformExtended = true;\r\n\r\n\t//one can provide a subset from outside\r\n\tmapList = mapList || DEFAULT_MAP_LIST;\r\n\r\n\tvar shaderUniforms = {}\r\n\tvar shaderIncludes = {}\r\n\tvar serialize = []\r\n\r\n\tfor ( var i = 0; i < mapList.length; i ++ ) {\r\n\r\n\t\tvar mapName = mapList[ i ];\r\n\r\n\r\n\t\tif ( material[ mapName ] !== undefined ) {\r\n\r\n\t\t\taddMapTransformPropsToMaterial(material, mapName)\r\n\r\n\t\t\tvar uniform = { value: new THREE.Matrix3(), type:'mat3', stage: 'fragment' };\r\n\t\t\tuniform.value.setUvTransform = setUvTransform.bind( uniform.value );\r\n\r\n\t\t\tshaderUniforms[getUniformNameFromProp(mapName)] = uniform\r\n\r\n\t\t\t//this is for resolving the conflict, its not the most elegant solution but it works\r\n\t\t\t//i believe that this would be solved by refactoring the shader templates\r\n\t\t\tvar lookup = mapName\r\n\t\t\tif( material.isSpecGlossExtended && mapName === 'specularMap'){\r\n\t\t\t\tlookup = 'specularMapGloss' \r\n\t\t\t}\r\n\t\t\tserialize.push(mapName)\r\n\r\n\t\t\t//based on the map name ie. specularMap or even an extended glossinessMap pick a chunk\r\n\t\t\tvar chunkName = PROP_TO_CHUNK_MAP[lookup]\r\n\r\n\t\t\t//if there already is a chunk from some extension, pick that, otherwise copy the default chunk\r\n\t\t\tvar shaderChunk = (material.shaderIncludes && material.shaderIncludes[chunkName]) || THREE.ShaderChunk[chunkName]\r\n\r\n\t\t\t//apply the string transformation, this contains the copy of whatever chunk was provided (default or custom)\r\n\t\t\tshaderChunk = shaderChunk.replace( mapRegex , getReplaceString(mapName) )\r\n\r\n\t\t\t//provide this copy as the include chunk, this shader wont look up THREE.ShaderChunk \r\n\t\t\t//and doesnt have to wait for onBeforeCompile to do the transformation\r\n\t\t\t//final transformed chunk is already stored here in this context sync\r\n\t\t\tshaderIncludes[ chunkName ] = shaderChunk\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//combine with other chunks\r\n\taddOrMergeProp( material, 'shaderUniforms', shaderUniforms );\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction(((data,meta)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isPerMapTransformExtended = true\r\n\r\n\t\tserialize.forEach(mapName=>{\r\n\t\t\tdata[`${mapName}Repeat`] = material[`${mapName}Repeat`].toArray()\r\n\t\t\tdata[`${mapName}Offset`] = material[`${mapName}Offset`].toArray()\r\n\t\t\tdata[`${mapName}Center`] = material[`${mapName}Center`].toArray()\r\n\t\t\tdata[`${mapName}Rotation`] = material[`${mapName}Rotation`]\r\n\t\t})\r\n\r\n\t\treturn data\r\n\r\n\t}).bind(material))\r\n\r\n\r\n\tmaterial._serializationManager.addAfterFunction(\r\n\t\tfunction( data ){\r\n\t\t\tdelete data.roughnessMap\r\n\t\t\tdelete data.roughness\r\n\t\t\tdelete data.metalnessMap\r\n\t\t\tdelete data.metalness\t\r\n\t\t}\r\n\t)\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n}\r\n\r\n// simple instance stuff from lambert example  ---------------------------------------------------------\r\n\r\n//this is a stage after begin_vertex, this would be more elegant with hooks and template refactor\r\nvar after_vertex_transform_chunk = `\r\n\ttransformed *= instanceScale; //the value present in transformed is in model space, \r\n\ttransformed = transformed + instanceOffset;\r\n`\r\n\r\nexport default function decorateMaterialWithSimpleInstancing2( material ) {\r\n\r\n\tif( material.isSimpleInstanceExtended ) return material\r\n\r\n\tmaterial.isSimpleInstanceExtended = true \r\n\t\r\n\t//make a custom chunk that includes a copy of the default chunk from THREE.ShaderChunk\r\n\t//followed by a custom chunk, that is simply appended to the copy\r\n\r\n\tvar shaderIncludes = {\r\n\r\n\t\tbegin_vertex:`\r\n\t\t\t${THREE.ShaderChunk.begin_vertex}\r\n\t\t\t${after_vertex_transform_chunk}\r\n\t\t` \r\n\t}\r\n\r\n\t//no good global chunk, but could be uv_pars, heres how to make it work with onbeforecompile\r\n\t//because this is somewhat of a set and forget thing, onBeforeCompile (or onBeforeParse) is \r\n\t//perfectly valid to use here\r\n\t//\"here are some attribute names, whenver you get around to assemblying the shader on WebGL level use them\"\r\n\t//A uniform (over an attribute) would be better if it were available in this scope\r\n\t\r\n\tvar attributeInjection = `\r\n\t\tattribute vec3 instanceOffset; \r\n\t\tattribute float instanceScale;\r\n\t`\r\n\r\n\tmaterial.onBeforeCompile = shader => {\r\n\t\t// console.log(material.userData.uScale);\r\n\t\tshader.uniforms.uTime = material.userData.uTime;\r\n\t\tshader.uniforms.uScale = material.userData.uScale;\r\n\t\tshader.vertexShader = `\r\n\t\tattribute vec3 instanceOffset;\r\n\t\t\tattribute float instanceScale;\r\n\r\n\t\t#define STANDARD\r\nvarying vec3 vViewPosition;\r\n#ifndef FLAT_SHADED\r\n\tvarying vec3 vNormal;\r\n\t#ifdef USE_TANGENT\r\n\t\tvarying vec3 vTangent;\r\n\t\tvarying vec3 vBitangent;\r\n\t#endif\r\n#endif\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n// instanced\r\nattribute float aIndex;\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\nuniform float uTime;\r\nuniform float uScale;\r\nvoid main() {\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n#ifndef FLAT_SHADED\r\n\tvNormal = normalize( transformedNormal );\r\n\t#ifdef USE_TANGENT\r\n\t\tvTangent = normalize( transformedTangent );\r\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\r\n\t#endif\r\n#endif\r\n\t#include <begin_vertex>\r\n\t// instanced\r\n\t\t\t\tfloat _ind = aIndex + uTime;\r\n\t\t\ttransformed *= uScale + .5 * sin(24.0 * 3.14 * _ind )+ cos(2. * 3.14 * _ind );\r\n\t\t\t//transformed *= instanceScale;\r\n\t\t\t\ttransformed = transformed + instanceOffset;\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n}\r\n\t\t`\r\n\t}\r\n\r\n\t\t\t// ${attributeInjection}\r\n\t//alternatively one can use `uv_pars_vertex`\r\n\t//since displacement map is used in almost all of the shaders, this chunk is present \r\n\t//depth for example, has this chunk, so whatever attribute is added to StandardMaterial\r\n\t//is also going to be added to DepthMaterial\r\n\t// shaderIncludes = {\r\n\t// \tuv_pars_vertex: `\r\n\t// \t${attributeInjection}\r\n\t// \t${THREE.ShaderChunk.uv_pars_vertex}\r\n\t// \t`\r\n\t// }\r\n\r\n\taddOrMergeProp( material, 'shaderIncludes', shaderIncludes );\r\n\r\n\tif(!material._serializationManager) material._serializationManager = new SerializationManager()\r\n\r\n\tmaterial._serializationManager.addFunction((data)=>{\r\n\t\tif( !data.metadata.extensions ) data.metadata.extensions = {}\r\n\t\tdata.metadata.extensions.isSimpleInstanceExtended = true\r\n\t})\r\n\t\r\n\tmaterial.toJSON = toJSON.bind(material)\r\n\r\n\treturn material\r\n\r\n}\r\n\r\n\r\nfunction SerializationManager(){\r\n\tthis.processFunctions = []\r\n\tthis.afterFunctions = []\r\n}\r\n\r\nSerializationManager.prototype = {\r\n\taddFunction: function( func ){\r\n\t\tthis.processFunctions.push(func)\r\n\t},\r\n\tserialize(data, meta){\r\n\t\tthis.processFunctions.forEach(f=>f(data))\r\n\t\treturn data\r\n\t},\r\n\tafterSerialize(data){\r\n\t\tthis.afterFunctions.forEach(f=>f(data))\r\n\t},\r\n\taddAfterFunction: function( func ){\r\n\t\tthis.afterFunctions.push(func)\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { DDSLoader } from 'three/examples/jsm/loaders/DDSLoader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier.js';\nimport { Detector } from 'three/examples/jsm/WebGL.js';\nimport decorateMaterialWithPerMapTransforms from '../js/SpecGlossMultiUVInstanceExample.js';\nimport decorateMaterialWithSpecGloss from '../js/SpecGlossMultiUVInstanceExample3.js';\nimport decorateMaterialWithSimpleInstancing from '../js/SpecGlossMultiUVInstanceExample2.js';\nimport decorateMaterialWithSimpleInstancing2 from '../js/SpecGlossMultiUVInstanceExample4.js';\nimport { NURBSCurve } from 'three/examples/jsm/curves/NURBSCurve.js';\nimport { Interaction } from 'three.interaction';\n\nimport * as Nodes from 'three/examples/jsm/nodes/Nodes.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nvar INSTANCES = 128;\nvar frequency = 32;\nvar gltfScale = 1500;\n\n\nconst style = {\n  // height: 5400 // we can control scene size by setting container dimensions\n};\n\nvar container, stats;\nvar camera, scene, renderer;\nvar mobOrDesk = false;\n\nclass PlacentaNo extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t    this.state = {\n\t      display:\"none\"\n\t    };\n    \n\t}\n  componentDidMount() {\n    this.sceneSetup();\n    \n    \n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    // this.controls.dispose();\n  }\n\n\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n   \tif (width >= height){\n   \t\tmobOrDesk = false;\n   \t}else{\n   \t\tmobOrDesk = true;\n   \t}\n\n    if (mobOrDesk){\n    \tINSTANCES = 64;\n    \tgltfScale = 1000;\n    }else{\n    \tINSTANCES = 128;\n    \tgltfScale = 1500;\n    }\n\n    this.scene = new THREE.Scene();\n    //dummy scene\n\tthis.intersectsScene = new THREE.Scene();\n\n\tthis.mouseX = 0;\n\tthis.mouseY = 0;\n\n\tthis.targetX = 0;\n\tthis.targetY = 0;\n\n    this.clock = new THREE.Clock();\n\n\tthis.camera = new THREE.PerspectiveCamera( 27, window.innerWidth / window.innerHeight, 1, 10000 );\n\tthis.camera.position.z = 1200;\n\n    // this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n   \tvar light = new THREE.DirectionalLight( 0xffffff,4 );\n\tlight.position.set( 100, 260, 160 );\n\t\n\t// light.castShadow = true;\n\t// light.shadow.camera.left = - 240;\n\t// light.shadow.camera.right = 240;\n\t// light.shadow.camera.top = 240;\n\t// light.shadow.camera.bottom = - 240;\n\t// light.shadow.camera.near = 10;\n\t// light.shadow.camera.far = 1500;\n\n\t// light.shadow.bias = - 0.001;\n\t// light.shadow.mapSize.width = 512;\n\t// light.shadow.mapSize.height = 512;\n\tthis.scene.add(light)\n\n\tvar ambient = new THREE.AmbientLight( 0x222222 );\n\tthis.scene.add( ambient );\n\t\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.physicallyCorrectLights = true;\n    // this.renderer.gammaOutput = true;\n   \tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n    // this.renderer.shadowMap.enabled = true;\n    \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\tthis.renderer.setSize( window.innerWidth, window.innerHeight );\n\t// container.appendChild( renderer.domElement );\n\tthis.interaction = new Interaction(this.renderer, this.intersectsScene, this.camera);\n\t//renderer.toneMapping = ReinhardToneMapping;\n\n\tthis.stats = new Stats();\n\n\t// this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\t// this.controls.minDistance = 50;\n\t// this.controls.maxDistance = 300;\n\n\t// window.addEventListener( 'resize', onWindowResize, false );\n\n\t// this.meshSelected = false;\n\n\t// this.colorAttArr = [];\n\tthis.offsetAttArr = [];\n\tthis.scaleAttArr = [];\n\n\t// this.initInstanceAttributes();\n\t// this.initInstanceAttributes2();\n\tconst matArraySize = INSTANCES * 4\n\tthis.matrixArray = [\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t]\n\tthis.matrixAttributeArray = [];\n\n\tthis.matrixArray2 = [\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t]\n\tthis.matrixAttributeArray2 = [];\n\n\tthis.matrixArray3 = [\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t]\n\tthis.matrixAttributeArray3 = [];\n\n\tthis.matrixArray4 = [\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t]\n\tthis.matrixAttributeArray4 = [];\n\n\tthis.matrixArray5 = [\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t\tnew Float32Array(matArraySize),\n\t]\n\tthis.matrixAttributeArray5 = [];\n\t\n\t\n\n\tif (mobOrDesk){\n    \tthis.initInstanceAttributesExtended(400,200,200,200,this.matrixArray,this.matrixAttributeArray,this.mesh, 1);\n\t\t// for gltf1\n\t\tthis.initInstanceAttributesExtended(400,120,200,50,this.matrixArray2,this.matrixAttributeArray2,this.mesh2, 2);\n\n\t\tthis.initInstanceAttributesExtended(300,100,320,100,this.matrixArray3,this.matrixAttributeArray3,this.mesh3, 3);\n\t\t// for gltf2\n\t\tthis.initInstanceAttributesExtended(400,120,50,120,this.matrixArray4,this.matrixAttributeArray4,this.mesh4, 4);\n    }else{\n    \tthis.initInstanceAttributesExtended(300,150,150,150,this.matrixArray,this.matrixAttributeArray,this.mesh, 1);\n\t\t// for gltf1\n\t\tthis.initInstanceAttributesExtended(500,100,300,300,this.matrixArray2,this.matrixAttributeArray2,this.mesh2, 2);\n\n\t\tthis.initInstanceAttributesExtended(600,200,200,200,this.matrixArray3,this.matrixAttributeArray3,this.mesh3, 3);\n\t\t// for gltf2\n\t\tthis.initInstanceAttributesExtended(500,0,250,150,this.matrixArray4,this.matrixAttributeArray4,this.mesh4, 4);\n    }\n\n\tthis.initTexture();\n\tthis.initBall();\n\n\t// this.onChangeGuiMaterial(this.material);\n\tthis.loadGLTF();\n\tthis.loadGLTF2();\n\tthis.startAnimationLoop();\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    document.addEventListener( 'mousemove', this.onDocumentMouseMove, false );\n  };\n\n  loadGLTF = () => {\n\n  \tvar myThis = this;\n\n\tthis.loader = new GLTFLoader();\n\tconst dracoLoader = new DRACOLoader();\n\tdracoLoader.setDecoderPath( 'three/examples/js/libs/draco/gltf/' );\n\tthis.loader.setDRACOLoader(dracoLoader );\n\tconst ddsLoader = new DDSLoader();\n\tthis.loader.setDDSLoader(ddsLoader );\n\n\tvar loadStartTime = performance.now();\n\tthis.loader.load( 'textures/papa.gltf', function( data ) {\n\n\t\tmyThis.gltf = data;\n\n\t\tvar object = myThis.gltf.scene;\n\n\t\tconsole.info( 'Load time: ' + ( performance.now() - loadStartTime ).toFixed( 2 ) + ' ms.' );\n\n\t\tobject.traverse( function( node ) {\n\n\t\t\tif ( node.material && ( node.material.isMeshStandardMaterial ||\n\t\t\t\t ( node.material.isShaderMaterial && node.material.envMap !== undefined ) ) ) {\n\n\t\t\t\tnode.material.envMap = myThis.envMap;\n\t\t\t\tnode.material.needsUpdate = true;\n\t\t\t}\n\n\t\t} );\n\n\t\tobject.traverse( function ( node ) {\n\n\t\t\t// if ( node.isMesh || node.isLight ) node.castShadow = true;\n\n\t\t} );\n\t\tobject.rotation.y -= Math.PI;\n\t\tmyThis.scene.add( object );\n\t\t\n\n\t\tvar scale = gltfScale;\n\t\tmyThis.meshGLTF = object.children[0]\n\t\tmyThis.meshGLTF.frustumCulled = false\n\t\t// myThis.meshGLTF.visible = guiData.currentMesh === 'gltf'\n\t\tmyThis.meshGLTF.geometry.scale(scale,scale,scale)\n\n\t\tmyThis.materialGLTF = myThis.meshGLTF.material\n\t\tdecorateMaterialWithPerMapTransforms(myThis.materialGLTF)\n\t\t// myThis.applyInstancingToMesh2(myThis.meshGLTF)\n\t\tmyThis.applyInstancingToMeshExtended(myThis.meshGLTF,2)\n\t\tmyThis.meshArr[5] = myThis.meshGLTF;\n\t\t// myThis.applyIndecisToInstancedMesh(myThis.meshGLTF)\n\n\t}, undefined, function ( error ) {\n\n\t\tconsole.error( error );\n\n\t} );\n\n}\n\n  loadGLTF2 = () => {\n\n  \tvar myThis = this;\n\n\tthis.loader = new GLTFLoader();\n\tconst dracoLoader = new DRACOLoader();\n\tdracoLoader.setDecoderPath( 'three/examples/js/libs/draco/gltf/' );\n\tthis.loader.setDRACOLoader(dracoLoader );\n\tconst ddsLoader = new DDSLoader();\n\tthis.loader.setDDSLoader(ddsLoader );\n\n\tvar loadStartTime = performance.now();\n\tthis.loader.load( 'textures/hey/papa.gltf', function( data ) {\n\n\t\tmyThis.gltf2 = data;\n\n\t\tvar object = myThis.gltf2.scene;\n\n\t\tconsole.info( 'Load time: ' + ( performance.now() - loadStartTime ).toFixed( 2 ) + ' ms.' );\n\n\t\tobject.traverse( function( node ) {\n\n\t\t\tif ( node.material && ( node.material.isMeshStandardMaterial ||\n\t\t\t\t ( node.material.isShaderMaterial && node.material.envMap !== undefined ) ) ) {\n\n\t\t\t\tnode.material.envMap = myThis.envMap;\n\t\t\t\tnode.material.needsUpdate = true;\n\t\t\t}\n\n\t\t} );\n\n\t\tobject.traverse( function ( node ) {\n\n\t\t\t// if ( node.isMesh || node.isLight ) node.castShadow = true;\n\n\t\t} );\n\t\tobject.rotation.y -= Math.PI;\n\t\tmyThis.scene.add( object );\n\t\t// object.position.x = 500;\n\n\t\tvar scale = gltfScale;\n\t\tmyThis.meshGLTF2 = object.children[0]\n\t\tmyThis.meshGLTF2.frustumCulled = false\n\t\tmyThis.meshGLTF2.geometry.scale(scale,scale,scale)\n\n\t\tmyThis.meshArr[6] = myThis.meshGLTF2;\n\n\t\tmyThis.materialGLTF2 = myThis.meshGLTF2.material\n\t\tdecorateMaterialWithPerMapTransforms(myThis.materialGLTF2)\n\t\tmyThis.applyInstancingToMeshExtended(myThis.meshGLTF2, 4)\n\t\t// myThis.applyInstancingToMesh4(myThis.meshGLTF2)\n\t\t// myThis.applyIndecisToInstancedMesh(myThis.meshGLTF)\n\n\t}, undefined, function ( error ) {\n\n\t\tconsole.error( error );\n\n\t} );\n\n}\n\n\tinitTexture = () => {\n\n\t\tvar myThis = this;\n\n\t\tthis.texture = new THREE.TextureLoader().load( 'textures/mat/naheerun_mat.png' )\n\t\tthis.texture.wrapS = this.texture.wrapT = THREE.RepeatWrapping\n\t\tthis.texture.name = \"texture\"\n\n\t\t// this.texture2 = new THREE.TextureLoader().load( 'textures/what_emissive.png' )\n\t\t// this.texture2.wrapS = this.texture2.wrapT = THREE.RepeatWrapping\n\t\t// this.texture2.name = \"texture2\"\n\n\t\tthis.texture3 = new THREE.TextureLoader().load( 'textures/mat/ospapax_mat.png' )\n\t\tthis.texture3.wrapS = this.texture3.wrapT = THREE.RepeatWrapping\n\t\tthis.texture3.name = \"texture3\"\n\n\t\tthis.texture4 = new THREE.TextureLoader().load( 'textures/mat/oogenesis_mat.png' )\n\t\tthis.texture4.wrapS = this.texture4.wrapT = THREE.RepeatWrapping\n\t\tthis.texture4.name = \"texture4\"\n\n\t\tthis.texture5 = new THREE.TextureLoader().load( 'textures/mat/what_mat.png' )\n\t\tthis.texture5.wrapS = this.texture5.wrapT = THREE.RepeatWrapping\n\t\tthis.texture5.name = \"texture5\"\n\n\t\tthis.texture6 = new THREE.TextureLoader().load( 'textures/mat/spermtank_mat.png' )\n\t\tthis.texture6.wrapS = this.texture6.wrapT = THREE.RepeatWrapping\n\t\tthis.texture6.name = \"texture6\"\n\n\t\tthis.envMap = new THREE.TextureLoader().load( 'textures/pp_new_2.jpg', function ( texture ) {\n\n\t\t\ttexture.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\ttexture.encoding = THREE.sRGBEncoding;\n\t\t\tif ( myThis.mesh ) myThis.material.needsUpdate = true;\n\t\t\tif ( myThis.meshGLTF ) myThis.materialGLTF.needsUpdate = true;\n\t\t\tif ( myThis.meshGLTF2 ) myThis.materialGLTF2.needsUpdate = true;\n\n\t\t} );\n\n\t\tthis.envMap.name = \"envMap\"\n\t}\n\n\tinitBall = () => {\n\n\t\tthis.material = decorateMaterialWithSpecGloss(\n\t\t\tnew THREE.MeshStandardMaterial({\n\t\t\t\t// color: 0xff0000,\n\t\t\t\t// color: 0x222222,\n\t\t\t\tenvMap: this.envMap,\n\t\t\t\tmap: this.texture6,\n\t\t\t})\n\t\t)\n\t\tthis.material2 = decorateMaterialWithSpecGloss(\n\t\t\tnew THREE.MeshStandardMaterial({\n\t\t\t\t// color: 0x00ff00,\n\t\t\t\t// color: 0x222222,\n\t\t\t\tenvMap: this.envMap,\n\t\t\t\tmap: this.texture,\n\t\t\t})\n\t\t)\n\t\tthis.material3 = decorateMaterialWithSpecGloss(\n\t\t\tnew THREE.MeshStandardMaterial({\n\t\t\t\t// color: 0x0000ff,\n\t\t\t\t// color: 0x222222,\n\t\t\t\tenvMap: this.envMap,\n\t\t\t\tmap: this.texture3,\n\t\t\t})\n\t\t)\n\t\tthis.material4 = decorateMaterialWithSpecGloss(\n\t\t\tnew THREE.MeshStandardMaterial({\n\t\t\t\t// color: 0xffff00,\n\t\t\t\t// color: 0x222222,\n\t\t\t\tenvMap: this.envMap,\n\t\t\t\tmap: this.texture4,\n\t\t\t})\n\t\t)\n\t\tthis.material5 = decorateMaterialWithSpecGloss(\n\t\t\tnew THREE.MeshStandardMaterial({\n\t\t\t\t// color: 0xff00ff,\n\t\t\t\t// color: 0x222222,\n\t\t\t\tenvMap: this.envMap,\n\t\t\t\tmap: this.texture5,\n\t\t\t})\n\t\t)\n\n\t\tdecorateMaterialWithPerMapTransforms(this.material)\n\n\n\t\tthis.mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(8), this.material)\n\t\tthis.mesh2 = new THREE.Mesh(new THREE.SphereBufferGeometry(8), this.material2)\n\t\tthis.mesh3 = new THREE.Mesh(new THREE.SphereBufferGeometry(8), this.material3)\n\t\tthis.mesh4 = new THREE.Mesh(new THREE.SphereBufferGeometry(8), this.material4)\n\t\tthis.mesh5 = new THREE.Mesh(new THREE.SphereBufferGeometry(8), this.material5)\n\n\t\tthis.meshArr = [this.mesh, this.mesh2, this.mesh3, this.mesh4,this.mesh5];\n\n\t\tthis.mesh.material.needsUpdate = true;\n\t\tthis.mesh2.material.needsUpdate = true;\n\t\tthis.mesh3.material.needsUpdate = true;\n\t\tthis.mesh4.material.needsUpdate = true;\n\t\tthis.mesh5.material.needsUpdate = true;\n\t\tthis.scene.add(this.mesh);\n\t\t// this.mesh2.rotation.y -= Math.PI;\n\t\tthis.scene.add(this.mesh2);\n\t\t// this.mesh3.rotation.z -= Math.PI;\n\t\tthis.scene.add(this.mesh3);\n\t\tthis.scene.add(this.mesh4);\n\t\tthis.mesh5.rotation.y -= Math.PI;\n\t\tthis.scene.add(this.mesh5);\n\t\t\n\n\t\t// this.mesh.castShadow = true\n\t\t// this.mesh.receiveShadow = true\n\t\t// this.mesh2.castShadow = true\n\t\t// this.mesh2.receiveShadow = true\n\t\t// this.mesh3.castShadow = true\n\t\t// this.mesh3.receiveShadow = true\n\n\t\tthis.material.glossinessMap = this.texture //needs .a so doesnt work with this texture\n\t\t// this.material.specularMap = this.texture\n\n\t\t// this.applyInstancingToMesh(this.mesh)\n\t\tthis.applyInstancingToMeshExtended(this.mesh,1)\n\t\tthis.applyInstancingToMeshExtended(this.mesh2,2)\n\t\tthis.applyInstancingToMeshExtended(this.mesh3,3)\n\t\t// this.applyInstancingToMesh3(this.mesh2)\n\t\t// this.applyInstancingToMesh4(this.mesh3)\n\n\t\tthis.applyInstancingToMeshExtended(this.mesh4,4)\n\t\tthis.applyInstancingToMeshExtended(this.mesh5,3)\n\n\t\t// this.applyInstancingToMesh5(this.mesh4)\n\t\t// this.applyInstancingToMesh6(this.mesh5)\n\t\t// this.applyIndecisToInstancedMesh(this.mesh)\n\n\n\t}\n\n\n\tinitInstanceAttributesExtended = (max, minus,minus2,minus3, array, attArray, meshName, n) => {\n\t\t//create geometry attributes\n\t\t// NURBS curve\n\n\t\t\t\tconst nurbsControlPoints = [];\n\t\t\t\tconst nurbsKnots = [];\n\t\t\t\tconst nurbsDegree = 3;\n\n\t\t\t\tfor ( let i = 0; i <= nurbsDegree; i ++ ) {\n\n\t\t\t\t\tnurbsKnots.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, j = 10; i < j; i ++ ) {\n\n\t\t\t\t\tnurbsControlPoints.push(\n\t\t\t\t\t\tnew THREE.Vector4(\n\t\t\t\t\t\t\tMath.random() * max - minus,\n\t\t\t\t\t\t\tMath.random() * max - minus2,\n\t\t\t\t\t\t\tMath.random() * max - minus3,\n\t\t\t\t\t\t\t-100 // weight of control point: higher means stronger attraction\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tconst knot = ( i + 1 ) / ( j - nurbsDegree );\n\t\t\t\t\tnurbsKnots.push( THREE.MathUtils.clamp( knot, 0, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t\tconst nurbsCurve = new NURBSCurve( nurbsDegree, nurbsKnots, nurbsControlPoints );\n\n\t\t// var knot = new Curves.TorusKnot( 60 );\n\t\tvar positions = nurbsCurve.getSpacedPoints( INSTANCES );\n\n\t\tvar offsets = new Float32Array( INSTANCES * 3 ); // xyz\n\t\tvar scales = new Float32Array( INSTANCES * 1 ); // s\n\t\t// var colors = new Float32Array( INSTANCES * 3 ); \n\n\t\tvar myThis = this;\n\n\t\tvar dummy2 = [];\n\t\tvar dummy4 = [];\n\t\tvar dummy3 = [];\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = new THREE.Mesh(new THREE.SphereBufferGeometry(12)) \n\t\t\tvar object2;\n\n\t\t\tobject.userData.index = i //keep for mapping to attribute\n\n\t\t\tvar index = 3 * i;\n\n\t\t\t// per-instance position offset\n\t\t\toffsets[ index ] = positions[ i ].x;\n\t\t\toffsets[ index + 1 ] = positions[ i ].y;\n\t\t\toffsets[ index + 2 ] = positions[ i ].z;\n\n\t\t\tobject.position.x = positions[ i ].x;\n\t\t\tobject.position.y = positions[ i ].y;\n\t\t\tobject.position.z = positions[ i ].z;\n\n\t\t\t// per-instance color tint - optional\n\t\t\t// colors[ index ] = 1;\n\t\t\t// colors[ index + 1 ] = 1;\n\t\t\t// colors[ index + 2 ] = 1;\n\n\t\t\t// per-instance scale variation\n\t\t\tscales[ i ] = 1 + 0.5 * Math.sin( frequency * Math.PI * i / INSTANCES );\n\t\t\tobject.scale.x = scales[ i ];\n\t\t\tobject.scale.y = scales[ i ];\n\t\t\tobject.scale.z = scales[ i ];\n\n\t\t\tthis.intersectsScene.add( object );\n\t\t\t\n\t\t\tobject.cursor = \"pointer\";\n\n\t\t\tobject.on('click',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEventClicked(ev, myThis.meshArr[n-1]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\n\t\t\t// console.log(\"mouseover\",this.mesh);\n\t\t\tobject.on('mouseover',\n\t\t\t\tfunction(ev) {\n\t\t\t\t myThis.goEvent(ev, myThis.meshArr[n-1]);\n\t\t}\n\n\t\t\t);\n\t\t\tobject.on('mouseout', function(ev) {\n\t\t\t\t myThis.goEvent2(ev, myThis.meshArr[n-1]);\n\t\t});\n\n\t\t\tif (n==2){\n\t\t\t\tobject2 = object.clone();\n\n\t\t\t\tobject2.position.x *= -1.0;\n\t\t\t\tobject2.position.z *= -1.0;\n\n\t\t\t\t// this.intersectsScene.children[INSTANCES*5+i] = object2 ;\n\t\t\t\tdummy2.push(object2);\n\t\t\t\tobject2.cursor = \"pointer\";\n\n\t\t\t\tobject2.on('click',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEventClicked(ev, myThis.meshArr[5]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseover',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEvent(ev, myThis.meshArr[5]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseout', function(ev) {\n\t\t\t\t\t myThis.goEvent2(ev, myThis.meshArr[5]);\n\t\t\t});\n\t\t\t\t// object2.updateMatrixWorld()\n\t\t\t}\n\t\t\tif (n==4){\n\t\t\t\tobject2 = object.clone();\n\n\t\t\t\tobject2.position.x *= -1.0;\n\t\t\t\tobject2.position.z *= -1.0;\n\t\t\t\tdummy4.push(object2);\n\t\t\t\t// this.intersectsScene.add( object2 );\n\t\t\t\t// this.intersectsScene.children[INSTANCES*6+i] = object2 ;\n\t\t\t\tobject2.cursor = \"pointer\";\n\t\t\t\tobject2.on('click',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEventClicked(ev, myThis.meshArr[6]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseover',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEvent(ev, myThis.meshArr[6]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseout', function(ev) {\n\t\t\t\t\t myThis.goEvent2(ev, myThis.meshArr[6]);\n\t\t\t});\n\t\t\t\t// object2.updateMatrixWorld()\n\t\t\t}\n\t\t\tif (n==3){\n\t\t\t\tobject2 = object.clone();\n\n\t\t\t\tobject2.position.x *= -1.0;\n\t\t\t\tobject2.position.z *= -1.0;\n\t\t\t\tdummy3.push(object2);\n\t\t\t\t// this.intersectsScene.add( object2 );\n\t\t\t\t// this.intersectsScene.children[INSTANCES*4+i] = object2;\n\t\t\t\tobject2.cursor = \"pointer\";\n\t\t\t\tobject2.on('click',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEventClicked(ev, myThis.meshArr[4]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseover',\n\t\t\t\t\tfunction(ev) {\n\t\t\t\t\t myThis.goEvent(ev, myThis.meshArr[4]);\n\t\t\t}\n\n\t\t\t\t);\n\t\t\t\tobject2.on('mouseout', function(ev) {\n\t\t\t\t\t myThis.goEvent2(ev, myThis.meshArr[4]);\n\t\t\t});\n\t\t\t\t// object2.updateMatrixWorld()\n\t\t\t}\n\t\t\t\n\n\t\t\tobject.updateMatrixWorld()\n\t\t\t// console.log(\"i\",object);\n\t\t\t// refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tarray[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] ;\n\t\t\t\t// console.log(object.matrixWorld.elements[r*4 + c] );\n\t\t\t\t\n\t\t}\n\t\tfor (var i = 0; i <256; i++) {\n\t\t\tthis.intersectsScene.add(dummy3[i]);\n\t\t}\n\t\tfor (var i = 0; i <256; i++) {\n\t\t\tthis.intersectsScene.add(dummy2[i]);\n\t\t}\n\t\tfor (var i = 0; i <256; i++) {\n\t\t\tthis.intersectsScene.add(dummy4[i]);\n\t\t}\n\t\t// this.intersectsScene.add( new THREE.Mesh(new THREE.SphereBufferGeometry(100), this.material) );\n\n\t\tthis.intersectsScene.updateMatrixWorld(true);\n\n\t\t// this.instanceColorAttribute2 = new THREE.InstancedBufferAttribute( colors, 3 )\n\t\tthis.instanceOffsetAttribute2 = new THREE.InstancedBufferAttribute( offsets, 3 )\n\t\tthis.instanceScaleAttribute2 = new THREE.InstancedBufferAttribute( scales, 1 )\n\n\t\t// this.colorAttArr[n-1] = this.instanceColorAttribute2;\n\t\tthis.offsetAttArr[n-1] = this.instanceOffsetAttribute2;\n\t\tthis.scaleAttArr[n-1] = this.instanceScaleAttribute2;\n\t}\n\n\n\tapplyInstancingToMeshExtended = (mesh,n) => {\n\t\tvar indecis = new Float32Array( INSTANCES ); \n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\t\t\tindecis[i] = i / INSTANCES\n\t\t}\n\n\t\tmesh.geometry.addAttribute('aIndex', new THREE.InstancedBufferAttribute( indecis, 1 ) )\n\n\t\tvar uTime = { value: 0, type: 'float', stage: 'vertex' }\n\t\tmesh.material.userData.uTime = uTime\n\t\t// console.log(\"mesh.material.shaderUniforms.uTime\",mesh.material.shaderUniforms );\n\t\t//we expose it as a primitive\n\t\tObject.defineProperty(mesh.material, 'time', {\n\t\t\tget:()=>uTime.value,\n\t\t\tset:v=>uTime.value = v\n\t\t})\n\t\tvar uScale = { value: 1.5, type: 'float', stage: 'vertex' }\n\t\tmesh.material.userData.uScale = uScale\n\t\t// console.log(\"mesh.material.shaderUniforms.uTime\",mesh.material.shaderUniforms );\n\t\t//we expose it as a primitive\n\t\tObject.defineProperty(mesh.material, 'scale', {\n\t\t\tget:()=>uScale.value,\n\t\t\tset:v=>uScale.value = v\n\t\t})\n\n\t\tvar uSelected = { value: false, type: 'boolean' }\n\t\tObject.defineProperty(mesh, 'selected', {\n\t\t\tget:()=>uSelected.value,\n\t\t\tset:v=>uSelected.value = v\n\t\t})\n\n\t\t// console.log(\"mesh.selected\",mesh.selected);\n\t\t// console.log(\"mesh.material.shaderUniforms.uTime\",mesh.material);\n\t\tdecorateMaterialWithSimpleInstancing2(mesh.material)\n\t\t// console.log(decorateMaterialWithSimpleInstancing(this.mesh.material));\n\t\tmesh.customDepthMaterial = decorateMaterialWithSimpleInstancing(\n\t\t\tnew THREE.MeshDepthMaterial({ depthPacking: THREE.RGBADepthPacking })\n\t\t)\n\t\tmesh.material.needsUpdate = true;\n\n\t\tmesh.geometry = new THREE.InstancedBufferGeometry().copy(mesh.geometry)\n\n\t\tmesh.geometry.instanceCount = INSTANCES\n\n\t\t// mesh.geometry.setAttribute( 'instanceColor', this.colorAttArr[n-1] );\n\t\tmesh.geometry.setAttribute( 'instanceOffset', this.offsetAttArr[n-1]);\n\t\tmesh.geometry.setAttribute( 'instanceScale', this.scaleAttArr[n-1] );\n\t\t\n\t\t// mesh.customDepthMaterial.shaderIncludes.uv_pars_vertex = mesh.material.shaderIncludes.uv_pars_vertex //copy these\n\t\t// mesh.customDepthMaterial.shaderIncludes.begin_vertex = mesh.material.shaderIncludes.begin_vertex //copy these\n\t\t// for shadow\n\t\tmesh.customDepthMaterial.userData = { uTime: mesh.material.userData.uTime }//wire this by reference, whenever prop updates material uniform this material updates too by referencing the same uniform\n\n\t\t// mesh.customDepthMaterial.userData = { uScale: mesh.material.userData.uScale }\n\t}\n\n  onDocumentMouseMove = ( event ) => {\n\n    var windowHalfX = window.innerWidth / 2;\n    var windowHalfY = window.innerHeight / 2;\n    var myThis2 = this;\n        myThis2.mouseX = ( event.clientX - windowHalfX ) / 2;\n        myThis2.mouseY = ( event.clientY - windowHalfY ) / 2;\n\n    // this.mouse.x = myThis2.mouseX;\n    // this.mouse.y = myThis2.mouseY;\n\n      }\n\n  goEvent = (ev, param) => {\n\t\t// console.log(\"oh clicked\",param);\n\t\t// if (param){\n\t\t// \tparam.material.color.r = .9;\n\t\t// \tparam.material.color.b = .9;\n\t\t// }\n\t\t\n\t}\n goEvent2 = (ev, param) => {\n\t\t// console.log(\"oh clicked2\",param);\n\t\t// if (param){\n\t\t// \tparam.material.color.r = .1;\n\t\t// \tparam.material.color.b = 0.7098039215686275;\n\t\t// }\n\t\t\n\t}\n\tgoEventClicked = (ev, param) => {\n\t\t// console.log(\"oh clicked2\",param);\n\t\tif (param){\n\t\t\t// param.material.color.r = .1;\n\t\t\t// param.material.color.b = 0.7098039215686275;\n\n\t\t\tthis.setState({\n\t      display: \"inherit\"\n\t    });\n\t\t}\n\t\t\n\t}\n\n  startAnimationLoop = () => {\n  \t\n \t\n\t\tthis.targetX = this.mouseX * .001;\n\t\tthis.targetY = this.mouseY * .001;\n\n\t\tvar delta = this.clock.getDelta() * 0.01 * 1;\n\t\tif ( this.mesh ) {\n\n\t\t\tthis.mesh.rotation.y += 0.05 * ( this.targetX - this.mesh.rotation.y );\n\t\t\tthis.mesh.rotation.x += 0.05 * ( this.targetY - this.mesh.rotation.x );\n\n\t\t\tthis.mesh.material.time += delta;\n\t\t\tif(this.mesh.selected){\n\t\t\t\t// console.log(\"it's selected\");\n\t\t\t\t// if(this.mesh.material.scale<5){\n\t\t\t\t// \tthis.mesh.material.scale += delta*300;\n\t\t\t\t// }\n\t\t\t\t// this.mesh.material.userData.uScale.value = this.mesh.material.scale;\n\t\t\t}else{\n\t\t\t\t// console.log(\"it's not selected\");\n\t\t\t\t// if(this.mesh.material.scale>2.5){\n\t\t\t\t// \tthis.mesh.material.scale -= delta*300;\n\t\t\t\t// }\n\t\t\t\t// this.mesh.material.userData.uScale.value = this.mesh.material.scale;\n\t\t\t}\n\t\t\t\n\t\t\tthis.mesh.material.userData.uTime.value = this.mesh.material.time;\n\t\t\t\n\t\t\tthis.mesh.material.needsUpdate = true;\n\t\t\t// console.log(\"color\", this.mesh.material.scale);\n\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1. * Math.sin( 24 * Math.PI * this.mesh.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t// //refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\t\t\t\n\n\t\t}\n\t\tif ( this.mesh4 ) {\n\n\t\t\tthis.mesh4.rotation.y += 0.05 * ( this.targetX - this.mesh4.rotation.y );\n\t\t\tthis.mesh4.rotation.x += 0.05 * ( this.targetY - this.mesh4.rotation.x );\n\n\t\t\tthis.mesh4.material.time += delta\n\t\t\tthis.mesh4.material.userData.uTime.value = this.mesh4.material.time;\n\t\t\tthis.mesh4.material.needsUpdate = true;\n\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES*3]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1. * Math.sin( 24 * Math.PI * this.mesh4.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t//refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray4[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\t\t\t\n\n\t\t}\n\t\tif ( this.mesh5 ) {\n\n\t\t\tthis.mesh5.rotation.y += 0.05 * ( this.targetX - this.mesh5.rotation.y );\n\t\t\tthis.mesh5.rotation.x += 0.05 * ( this.targetY - this.mesh5.rotation.x );\n\t\t\tthis.mesh5.rotation.y = this.mesh3.rotation.y + Math.PI;\n\t\t\tthis.mesh5.material.time += delta\n\t\t\tthis.mesh5.material.userData.uTime.value = this.mesh5.material.time;\n\t\t\tthis.mesh5.material.needsUpdate = true;\n\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES*4]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1. * Math.sin( 24 * Math.PI * this.mesh5.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\t// object.rotation.y = Math.PI;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t// //refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray3[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\t\t\t\n\n\t\t}\n\t\tif ( this.mesh2 ) {\n\n\t\t\tthis.mesh2.rotation.y += 0.05 * ( this.targetX - this.mesh2.rotation.y );\n\t\t\tthis.mesh2.rotation.x += 0.05 * ( this.targetY - this.mesh2.rotation.x );\n\n\t\t\tthis.mesh2.material.time += delta\n\t\t\tthis.mesh2.material.userData.uTime.value = this.mesh2.material.time;\n\t\t\tthis.mesh2.material.needsUpdate = true;\n\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1. * Math.sin( 24 * Math.PI * this.mesh2.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t//refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray3[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\t\t\t\n\n\t\t}\n\t\tif ( this.mesh3 ) {\n\n\t\t\tthis.mesh3.rotation.y += 0.05 * ( this.targetX - this.mesh3.rotation.y );\n\t\t\tthis.mesh3.rotation.x += 0.05 * ( this.targetY - this.mesh3.rotation.x );\n\n\t\t\tthis.mesh3.material.time += delta\n\t\t\tthis.mesh3.material.userData.uTime.value = this.mesh3.material.time;\n\t\t\tthis.mesh3.material.needsUpdate = true;\n\n\n\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES*2]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1. * Math.sin( 24 * Math.PI * this.mesh3.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t//refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray4[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\t\t\t\n\n\t\t}\n\n\t\tif ( this.meshGLTF ) {\n\n\t\t\tthis.meshGLTF.rotation.y += 0.05 * ( this.targetX - this.meshGLTF.rotation.y );\n\t\t\tthis.meshGLTF.rotation.x += 0.05 * ( this.targetY - this.meshGLTF.rotation.x );\n\n\t\t\tthis.meshGLTF.material.time += delta;\n\t\t\t// console.log(this.intersectsScene.children.length);\n\t\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES*5]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1.5 * Math.sin( 24 * Math.PI * this.meshGLTF.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\t\t\tobject.rotation.y -= Math.PI;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t// //refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray2[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\n\t\t}\n\t\tif ( this.meshGLTF2 ) {\n\n\t\t\tthis.meshGLTF2.rotation.y += 0.05 * ( this.targetX - this.meshGLTF2.rotation.y );\n\t\t\tthis.meshGLTF2.rotation.x += 0.05 * ( this.targetY - this.meshGLTF2.rotation.x );\n\n\t\t\tthis.meshGLTF2.material.time += delta;\n\n\t\t\tfor ( var i = 0, l = INSTANCES; i < l; i ++ ) {\n\n\t\t\tvar object = this.intersectsScene.children[i+INSTANCES*6]\n\n\t\t\t// per-instance scale variation\n\t\t\tvar ss = 1.5 + 1.5 * Math.sin( 24 * Math.PI * this.meshGLTF2.material.time );\n\t\t\tobject.scale.x = ss;\n\t\t\tobject.scale.y = ss;\n\t\t\tobject.scale.z = ss;\n\n\t\t\tobject.updateMatrixWorld()\n\n\t\t\t// //refactor this\n\t\t\t// for ( let r = 0 ; r < 4 ; r ++ )\n\t\t\t// for ( let c = 0 ; c < 4 ; c ++ )\n\t\t\t// \tthis.matrixArray4[r][i*4 + c] = object.matrixWorld.elements[r*4 + c] //fetch matrix value\n\t\t\t\t\n\t\t}\n\n\t\t}\n\t    this.renderer.render(this.scene, this.camera);\n\t    this.stats.end();\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n  };\n\n  removeModal = () => {\n  \tconsole.log(\"jey\");\n  \tthis.setState({\n\t      // display: \"none\"\n\t    });\n  }\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    if (mobOrDesk){\n    \tINSTANCES = 64;\n    \tgltfScale = 1000;\n    }else{\n    \tINSTANCES = 128;\n    \tgltfScale = 1500;\n    }\n\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n\n    return <div>\n    <div style={style} ref={ref => (this.el = ref)}>\n    </div>\n    <div onClick={this.removeModal} className=\"modal\" style={{display:this.state.display,position:\"fixed\",top:\"0px\",left:\"0px\",width:window.innerWidth+\"px\",height:window.innerHeight+\"px\", background:\"rgba(49,0,119,0.3)\"}}>\n    <div className=\"thumbnail\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n\n    <div className=\"excerpt1\">&nbsp;</div>\n            <div className=\"thumbnail3\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n    <div className=\"thumbnail4\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n    <div className=\"thumbnail5\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n\n      <div className=\"thumbnail6\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n    <div className=\"thumbnail7\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n    \n    <div className=\"thumbnail8\"><img src=\"/textures/mat/naheerun_mat.png\" className=\"thumbImg\"/></div>\n    <div className=\"thumbnail2\">&nbsp;</div>\n        <div className=\"video\">\n        <div className=\"frame\">&nbsp;</div>\n        <iframe className=\"innerVideo\" width={window.innerWidth*0.6} height={window.innerHeight*0.36} src=\"https://www.youtube.com/embed/-d-agXX5Z1I?playsinline=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; \" allowfullscreen></iframe>\n\n        </div>\n\n    <div className=\"text\"><span className=\"innerP\">대디레지던시는 이러저러한 프로그램입니다. 오픈콜은 열려있습니다. 지원하세요. 대디레지던시는 이러저러한 프로그램입니다. 오픈콜은 열려있습니다. 지원하세요. 대디레지던시는 이러저러한 프로그램입니다. 오픈콜은 열려있습니다. 지원하세요.</span></div>\n\n    <div className=\"excerpt\"> hi babe</div>\n    <div className=\"excerpt2\"> hi babe</div>\n    </div>\n    </div>;\n  }\n}\n\n\nexport default PlacentaNo;\n","import React, { Component , Fragment} from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from 'react-router-dom';\nimport './App.css';\n\nimport createClass from 'create-react-class';\n\nimport Placenta from './components/Placenta';\nimport PlacentaAll from './components/PlacentaAll';\nimport PlacentaNo from './components/PlacentaNo';\n\nvar App = createClass({\n    render: function () {\n    return (\n      <Router>\n        <div id=\"app\" className=\"App\" style={{margin:\"0px auto\", height:\"905px\"}}>\n          <Fragment>\n              <Switch>\n              <Route exact path=\"/\" exact render={() => (\n\n                  <PlacentaNo></PlacentaNo>\n                )} />\n\n                </Switch>\n              </Fragment>\n            </div>\n          </Router>\n\n        )}\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}